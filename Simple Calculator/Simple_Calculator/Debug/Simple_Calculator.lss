
Simple_Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000035b6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  000035b6  0000362a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002454  00000000  00000000  00003734  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c6f  00000000  00000000  00005b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000180  00000000  00000000  000067f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001d3  00000000  00000000  00006977  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000200f  00000000  00000000  00006b4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001170  00000000  00000000  00008b59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001001  00000000  00000000  00009cc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  0000accc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c1  00000000  00000000  0000ae6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008ae  00000000  00000000  0000b12d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b9db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 eb       	ldi	r30, 0xB6	; 182
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 63 06 	call	0xcc6	; 0xcc6 <main>
      7a:	0c 94 d9 1a 	jmp	0x35b2	; 0x35b2 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 71 1a 	jmp	0x34e2	; 0x34e2 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 8d 1a 	jmp	0x351a	; 0x351a <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 7d 1a 	jmp	0x34fa	; 0x34fa <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 7d 1a 	jmp	0x34fa	; 0x34fa <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 71 1a 	jmp	0x34e2	; 0x34e2 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 8d 1a 	jmp	0x351a	; 0x351a <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 7d 1a 	jmp	0x34fa	; 0x34fa <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 7d 1a 	jmp	0x34fa	; 0x34fa <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 7d 1a 	jmp	0x34fa	; 0x34fa <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 81 1a 	jmp	0x3502	; 0x3502 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 9d 1a 	jmp	0x353a	; 0x353a <__epilogue_restores__+0x20>

000007ea <__floatunsisf>:
     7ea:	a8 e0       	ldi	r26, 0x08	; 8
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 79 1a 	jmp	0x34f2	; 0x34f2 <__prologue_saves__+0x10>
     7f6:	7b 01       	movw	r14, r22
     7f8:	8c 01       	movw	r16, r24
     7fa:	61 15       	cp	r22, r1
     7fc:	71 05       	cpc	r23, r1
     7fe:	81 05       	cpc	r24, r1
     800:	91 05       	cpc	r25, r1
     802:	19 f4       	brne	.+6      	; 0x80a <__floatunsisf+0x20>
     804:	82 e0       	ldi	r24, 0x02	; 2
     806:	89 83       	std	Y+1, r24	; 0x01
     808:	60 c0       	rjmp	.+192    	; 0x8ca <__stack+0x6b>
     80a:	83 e0       	ldi	r24, 0x03	; 3
     80c:	89 83       	std	Y+1, r24	; 0x01
     80e:	8e e1       	ldi	r24, 0x1E	; 30
     810:	c8 2e       	mov	r12, r24
     812:	d1 2c       	mov	r13, r1
     814:	dc 82       	std	Y+4, r13	; 0x04
     816:	cb 82       	std	Y+3, r12	; 0x03
     818:	ed 82       	std	Y+5, r14	; 0x05
     81a:	fe 82       	std	Y+6, r15	; 0x06
     81c:	0f 83       	std	Y+7, r16	; 0x07
     81e:	18 87       	std	Y+8, r17	; 0x08
     820:	c8 01       	movw	r24, r16
     822:	b7 01       	movw	r22, r14
     824:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__clzsi2>
     828:	fc 01       	movw	r30, r24
     82a:	31 97       	sbiw	r30, 0x01	; 1
     82c:	f7 ff       	sbrs	r31, 7
     82e:	3b c0       	rjmp	.+118    	; 0x8a6 <__stack+0x47>
     830:	22 27       	eor	r18, r18
     832:	33 27       	eor	r19, r19
     834:	2e 1b       	sub	r18, r30
     836:	3f 0b       	sbc	r19, r31
     838:	57 01       	movw	r10, r14
     83a:	68 01       	movw	r12, r16
     83c:	02 2e       	mov	r0, r18
     83e:	04 c0       	rjmp	.+8      	; 0x848 <__floatunsisf+0x5e>
     840:	d6 94       	lsr	r13
     842:	c7 94       	ror	r12
     844:	b7 94       	ror	r11
     846:	a7 94       	ror	r10
     848:	0a 94       	dec	r0
     84a:	d2 f7       	brpl	.-12     	; 0x840 <__floatunsisf+0x56>
     84c:	40 e0       	ldi	r20, 0x00	; 0
     84e:	50 e0       	ldi	r21, 0x00	; 0
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	70 e0       	ldi	r23, 0x00	; 0
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	a0 e0       	ldi	r26, 0x00	; 0
     85a:	b0 e0       	ldi	r27, 0x00	; 0
     85c:	04 c0       	rjmp	.+8      	; 0x866 <__stack+0x7>
     85e:	88 0f       	add	r24, r24
     860:	99 1f       	adc	r25, r25
     862:	aa 1f       	adc	r26, r26
     864:	bb 1f       	adc	r27, r27
     866:	2a 95       	dec	r18
     868:	d2 f7       	brpl	.-12     	; 0x85e <__floatunsisf+0x74>
     86a:	01 97       	sbiw	r24, 0x01	; 1
     86c:	a1 09       	sbc	r26, r1
     86e:	b1 09       	sbc	r27, r1
     870:	8e 21       	and	r24, r14
     872:	9f 21       	and	r25, r15
     874:	a0 23       	and	r26, r16
     876:	b1 23       	and	r27, r17
     878:	00 97       	sbiw	r24, 0x00	; 0
     87a:	a1 05       	cpc	r26, r1
     87c:	b1 05       	cpc	r27, r1
     87e:	21 f0       	breq	.+8      	; 0x888 <__stack+0x29>
     880:	41 e0       	ldi	r20, 0x01	; 1
     882:	50 e0       	ldi	r21, 0x00	; 0
     884:	60 e0       	ldi	r22, 0x00	; 0
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	4a 29       	or	r20, r10
     88a:	5b 29       	or	r21, r11
     88c:	6c 29       	or	r22, r12
     88e:	7d 29       	or	r23, r13
     890:	4d 83       	std	Y+5, r20	; 0x05
     892:	5e 83       	std	Y+6, r21	; 0x06
     894:	6f 83       	std	Y+7, r22	; 0x07
     896:	78 87       	std	Y+8, r23	; 0x08
     898:	8e e1       	ldi	r24, 0x1E	; 30
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	8e 1b       	sub	r24, r30
     89e:	9f 0b       	sbc	r25, r31
     8a0:	9c 83       	std	Y+4, r25	; 0x04
     8a2:	8b 83       	std	Y+3, r24	; 0x03
     8a4:	12 c0       	rjmp	.+36     	; 0x8ca <__stack+0x6b>
     8a6:	30 97       	sbiw	r30, 0x00	; 0
     8a8:	81 f0       	breq	.+32     	; 0x8ca <__stack+0x6b>
     8aa:	0e 2e       	mov	r0, r30
     8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <__stack+0x57>
     8ae:	ee 0c       	add	r14, r14
     8b0:	ff 1c       	adc	r15, r15
     8b2:	00 1f       	adc	r16, r16
     8b4:	11 1f       	adc	r17, r17
     8b6:	0a 94       	dec	r0
     8b8:	d2 f7       	brpl	.-12     	; 0x8ae <__stack+0x4f>
     8ba:	ed 82       	std	Y+5, r14	; 0x05
     8bc:	fe 82       	std	Y+6, r15	; 0x06
     8be:	0f 83       	std	Y+7, r16	; 0x07
     8c0:	18 87       	std	Y+8, r17	; 0x08
     8c2:	ce 1a       	sub	r12, r30
     8c4:	df 0a       	sbc	r13, r31
     8c6:	dc 82       	std	Y+4, r13	; 0x04
     8c8:	cb 82       	std	Y+3, r12	; 0x03
     8ca:	1a 82       	std	Y+2, r1	; 0x02
     8cc:	ce 01       	movw	r24, r28
     8ce:	01 96       	adiw	r24, 0x01	; 1
     8d0:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     8d4:	28 96       	adiw	r28, 0x08	; 8
     8d6:	ea e0       	ldi	r30, 0x0A	; 10
     8d8:	0c 94 95 1a 	jmp	0x352a	; 0x352a <__epilogue_restores__+0x10>

000008dc <__clzsi2>:
     8dc:	ef 92       	push	r14
     8de:	ff 92       	push	r15
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	7b 01       	movw	r14, r22
     8e6:	8c 01       	movw	r16, r24
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	e8 16       	cp	r14, r24
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	f8 06       	cpc	r15, r24
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	08 07       	cpc	r16, r24
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	18 07       	cpc	r17, r24
     8f8:	88 f4       	brcc	.+34     	; 0x91c <__clzsi2+0x40>
     8fa:	8f ef       	ldi	r24, 0xFF	; 255
     8fc:	e8 16       	cp	r14, r24
     8fe:	f1 04       	cpc	r15, r1
     900:	01 05       	cpc	r16, r1
     902:	11 05       	cpc	r17, r1
     904:	31 f0       	breq	.+12     	; 0x912 <__clzsi2+0x36>
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x36>
     908:	88 e0       	ldi	r24, 0x08	; 8
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	17 c0       	rjmp	.+46     	; 0x940 <__clzsi2+0x64>
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	12 c0       	rjmp	.+36     	; 0x940 <__clzsi2+0x64>
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	e8 16       	cp	r14, r24
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	f8 06       	cpc	r15, r24
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	08 07       	cpc	r16, r24
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	18 07       	cpc	r17, r24
     92c:	28 f0       	brcs	.+10     	; 0x938 <__clzsi2+0x5c>
     92e:	88 e1       	ldi	r24, 0x18	; 24
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	04 c0       	rjmp	.+8      	; 0x940 <__clzsi2+0x64>
     938:	80 e1       	ldi	r24, 0x10	; 16
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	a0 e0       	ldi	r26, 0x00	; 0
     93e:	b0 e0       	ldi	r27, 0x00	; 0
     940:	20 e2       	ldi	r18, 0x20	; 32
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	40 e0       	ldi	r20, 0x00	; 0
     946:	50 e0       	ldi	r21, 0x00	; 0
     948:	28 1b       	sub	r18, r24
     94a:	39 0b       	sbc	r19, r25
     94c:	4a 0b       	sbc	r20, r26
     94e:	5b 0b       	sbc	r21, r27
     950:	04 c0       	rjmp	.+8      	; 0x95a <__clzsi2+0x7e>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	8a 95       	dec	r24
     95c:	d2 f7       	brpl	.-12     	; 0x952 <__clzsi2+0x76>
     95e:	f7 01       	movw	r30, r14
     960:	e8 59       	subi	r30, 0x98	; 152
     962:	ff 4f       	sbci	r31, 0xFF	; 255
     964:	80 81       	ld	r24, Z
     966:	28 1b       	sub	r18, r24
     968:	31 09       	sbc	r19, r1
     96a:	41 09       	sbc	r20, r1
     96c:	51 09       	sbc	r21, r1
     96e:	c9 01       	movw	r24, r18
     970:	1f 91       	pop	r17
     972:	0f 91       	pop	r16
     974:	ff 90       	pop	r15
     976:	ef 90       	pop	r14
     978:	08 95       	ret

0000097a <__pack_f>:
     97a:	df 92       	push	r13
     97c:	ef 92       	push	r14
     97e:	ff 92       	push	r15
     980:	0f 93       	push	r16
     982:	1f 93       	push	r17
     984:	fc 01       	movw	r30, r24
     986:	e4 80       	ldd	r14, Z+4	; 0x04
     988:	f5 80       	ldd	r15, Z+5	; 0x05
     98a:	06 81       	ldd	r16, Z+6	; 0x06
     98c:	17 81       	ldd	r17, Z+7	; 0x07
     98e:	d1 80       	ldd	r13, Z+1	; 0x01
     990:	80 81       	ld	r24, Z
     992:	82 30       	cpi	r24, 0x02	; 2
     994:	48 f4       	brcc	.+18     	; 0x9a8 <__pack_f+0x2e>
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	a0 e1       	ldi	r26, 0x10	; 16
     99c:	b0 e0       	ldi	r27, 0x00	; 0
     99e:	e8 2a       	or	r14, r24
     9a0:	f9 2a       	or	r15, r25
     9a2:	0a 2b       	or	r16, r26
     9a4:	1b 2b       	or	r17, r27
     9a6:	a5 c0       	rjmp	.+330    	; 0xaf2 <__pack_f+0x178>
     9a8:	84 30       	cpi	r24, 0x04	; 4
     9aa:	09 f4       	brne	.+2      	; 0x9ae <__pack_f+0x34>
     9ac:	9f c0       	rjmp	.+318    	; 0xaec <__pack_f+0x172>
     9ae:	82 30       	cpi	r24, 0x02	; 2
     9b0:	21 f4       	brne	.+8      	; 0x9ba <__pack_f+0x40>
     9b2:	ee 24       	eor	r14, r14
     9b4:	ff 24       	eor	r15, r15
     9b6:	87 01       	movw	r16, r14
     9b8:	05 c0       	rjmp	.+10     	; 0x9c4 <__pack_f+0x4a>
     9ba:	e1 14       	cp	r14, r1
     9bc:	f1 04       	cpc	r15, r1
     9be:	01 05       	cpc	r16, r1
     9c0:	11 05       	cpc	r17, r1
     9c2:	19 f4       	brne	.+6      	; 0x9ca <__pack_f+0x50>
     9c4:	e0 e0       	ldi	r30, 0x00	; 0
     9c6:	f0 e0       	ldi	r31, 0x00	; 0
     9c8:	96 c0       	rjmp	.+300    	; 0xaf6 <__pack_f+0x17c>
     9ca:	62 81       	ldd	r22, Z+2	; 0x02
     9cc:	73 81       	ldd	r23, Z+3	; 0x03
     9ce:	9f ef       	ldi	r25, 0xFF	; 255
     9d0:	62 38       	cpi	r22, 0x82	; 130
     9d2:	79 07       	cpc	r23, r25
     9d4:	0c f0       	brlt	.+2      	; 0x9d8 <__pack_f+0x5e>
     9d6:	5b c0       	rjmp	.+182    	; 0xa8e <__pack_f+0x114>
     9d8:	22 e8       	ldi	r18, 0x82	; 130
     9da:	3f ef       	ldi	r19, 0xFF	; 255
     9dc:	26 1b       	sub	r18, r22
     9de:	37 0b       	sbc	r19, r23
     9e0:	2a 31       	cpi	r18, 0x1A	; 26
     9e2:	31 05       	cpc	r19, r1
     9e4:	2c f0       	brlt	.+10     	; 0x9f0 <__pack_f+0x76>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	2a c0       	rjmp	.+84     	; 0xa44 <__pack_f+0xca>
     9f0:	b8 01       	movw	r22, r16
     9f2:	a7 01       	movw	r20, r14
     9f4:	02 2e       	mov	r0, r18
     9f6:	04 c0       	rjmp	.+8      	; 0xa00 <__pack_f+0x86>
     9f8:	76 95       	lsr	r23
     9fa:	67 95       	ror	r22
     9fc:	57 95       	ror	r21
     9fe:	47 95       	ror	r20
     a00:	0a 94       	dec	r0
     a02:	d2 f7       	brpl	.-12     	; 0x9f8 <__pack_f+0x7e>
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	a0 e0       	ldi	r26, 0x00	; 0
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	04 c0       	rjmp	.+8      	; 0xa16 <__pack_f+0x9c>
     a0e:	88 0f       	add	r24, r24
     a10:	99 1f       	adc	r25, r25
     a12:	aa 1f       	adc	r26, r26
     a14:	bb 1f       	adc	r27, r27
     a16:	2a 95       	dec	r18
     a18:	d2 f7       	brpl	.-12     	; 0xa0e <__pack_f+0x94>
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	a1 09       	sbc	r26, r1
     a1e:	b1 09       	sbc	r27, r1
     a20:	8e 21       	and	r24, r14
     a22:	9f 21       	and	r25, r15
     a24:	a0 23       	and	r26, r16
     a26:	b1 23       	and	r27, r17
     a28:	00 97       	sbiw	r24, 0x00	; 0
     a2a:	a1 05       	cpc	r26, r1
     a2c:	b1 05       	cpc	r27, r1
     a2e:	21 f0       	breq	.+8      	; 0xa38 <__pack_f+0xbe>
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	9a 01       	movw	r18, r20
     a3a:	ab 01       	movw	r20, r22
     a3c:	28 2b       	or	r18, r24
     a3e:	39 2b       	or	r19, r25
     a40:	4a 2b       	or	r20, r26
     a42:	5b 2b       	or	r21, r27
     a44:	da 01       	movw	r26, r20
     a46:	c9 01       	movw	r24, r18
     a48:	8f 77       	andi	r24, 0x7F	; 127
     a4a:	90 70       	andi	r25, 0x00	; 0
     a4c:	a0 70       	andi	r26, 0x00	; 0
     a4e:	b0 70       	andi	r27, 0x00	; 0
     a50:	80 34       	cpi	r24, 0x40	; 64
     a52:	91 05       	cpc	r25, r1
     a54:	a1 05       	cpc	r26, r1
     a56:	b1 05       	cpc	r27, r1
     a58:	39 f4       	brne	.+14     	; 0xa68 <__pack_f+0xee>
     a5a:	27 ff       	sbrs	r18, 7
     a5c:	09 c0       	rjmp	.+18     	; 0xa70 <__pack_f+0xf6>
     a5e:	20 5c       	subi	r18, 0xC0	; 192
     a60:	3f 4f       	sbci	r19, 0xFF	; 255
     a62:	4f 4f       	sbci	r20, 0xFF	; 255
     a64:	5f 4f       	sbci	r21, 0xFF	; 255
     a66:	04 c0       	rjmp	.+8      	; 0xa70 <__pack_f+0xf6>
     a68:	21 5c       	subi	r18, 0xC1	; 193
     a6a:	3f 4f       	sbci	r19, 0xFF	; 255
     a6c:	4f 4f       	sbci	r20, 0xFF	; 255
     a6e:	5f 4f       	sbci	r21, 0xFF	; 255
     a70:	e0 e0       	ldi	r30, 0x00	; 0
     a72:	f0 e0       	ldi	r31, 0x00	; 0
     a74:	20 30       	cpi	r18, 0x00	; 0
     a76:	a0 e0       	ldi	r26, 0x00	; 0
     a78:	3a 07       	cpc	r19, r26
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	4a 07       	cpc	r20, r26
     a7e:	a0 e4       	ldi	r26, 0x40	; 64
     a80:	5a 07       	cpc	r21, r26
     a82:	10 f0       	brcs	.+4      	; 0xa88 <__pack_f+0x10e>
     a84:	e1 e0       	ldi	r30, 0x01	; 1
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	79 01       	movw	r14, r18
     a8a:	8a 01       	movw	r16, r20
     a8c:	27 c0       	rjmp	.+78     	; 0xadc <__pack_f+0x162>
     a8e:	60 38       	cpi	r22, 0x80	; 128
     a90:	71 05       	cpc	r23, r1
     a92:	64 f5       	brge	.+88     	; 0xaec <__pack_f+0x172>
     a94:	fb 01       	movw	r30, r22
     a96:	e1 58       	subi	r30, 0x81	; 129
     a98:	ff 4f       	sbci	r31, 0xFF	; 255
     a9a:	d8 01       	movw	r26, r16
     a9c:	c7 01       	movw	r24, r14
     a9e:	8f 77       	andi	r24, 0x7F	; 127
     aa0:	90 70       	andi	r25, 0x00	; 0
     aa2:	a0 70       	andi	r26, 0x00	; 0
     aa4:	b0 70       	andi	r27, 0x00	; 0
     aa6:	80 34       	cpi	r24, 0x40	; 64
     aa8:	91 05       	cpc	r25, r1
     aaa:	a1 05       	cpc	r26, r1
     aac:	b1 05       	cpc	r27, r1
     aae:	39 f4       	brne	.+14     	; 0xabe <__pack_f+0x144>
     ab0:	e7 fe       	sbrs	r14, 7
     ab2:	0d c0       	rjmp	.+26     	; 0xace <__pack_f+0x154>
     ab4:	80 e4       	ldi	r24, 0x40	; 64
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	a0 e0       	ldi	r26, 0x00	; 0
     aba:	b0 e0       	ldi	r27, 0x00	; 0
     abc:	04 c0       	rjmp	.+8      	; 0xac6 <__pack_f+0x14c>
     abe:	8f e3       	ldi	r24, 0x3F	; 63
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	a0 e0       	ldi	r26, 0x00	; 0
     ac4:	b0 e0       	ldi	r27, 0x00	; 0
     ac6:	e8 0e       	add	r14, r24
     ac8:	f9 1e       	adc	r15, r25
     aca:	0a 1f       	adc	r16, r26
     acc:	1b 1f       	adc	r17, r27
     ace:	17 ff       	sbrs	r17, 7
     ad0:	05 c0       	rjmp	.+10     	; 0xadc <__pack_f+0x162>
     ad2:	16 95       	lsr	r17
     ad4:	07 95       	ror	r16
     ad6:	f7 94       	ror	r15
     ad8:	e7 94       	ror	r14
     ada:	31 96       	adiw	r30, 0x01	; 1
     adc:	87 e0       	ldi	r24, 0x07	; 7
     ade:	16 95       	lsr	r17
     ae0:	07 95       	ror	r16
     ae2:	f7 94       	ror	r15
     ae4:	e7 94       	ror	r14
     ae6:	8a 95       	dec	r24
     ae8:	d1 f7       	brne	.-12     	; 0xade <__pack_f+0x164>
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x17c>
     aec:	ee 24       	eor	r14, r14
     aee:	ff 24       	eor	r15, r15
     af0:	87 01       	movw	r16, r14
     af2:	ef ef       	ldi	r30, 0xFF	; 255
     af4:	f0 e0       	ldi	r31, 0x00	; 0
     af6:	6e 2f       	mov	r22, r30
     af8:	67 95       	ror	r22
     afa:	66 27       	eor	r22, r22
     afc:	67 95       	ror	r22
     afe:	90 2f       	mov	r25, r16
     b00:	9f 77       	andi	r25, 0x7F	; 127
     b02:	d7 94       	ror	r13
     b04:	dd 24       	eor	r13, r13
     b06:	d7 94       	ror	r13
     b08:	8e 2f       	mov	r24, r30
     b0a:	86 95       	lsr	r24
     b0c:	49 2f       	mov	r20, r25
     b0e:	46 2b       	or	r20, r22
     b10:	58 2f       	mov	r21, r24
     b12:	5d 29       	or	r21, r13
     b14:	b7 01       	movw	r22, r14
     b16:	ca 01       	movw	r24, r20
     b18:	1f 91       	pop	r17
     b1a:	0f 91       	pop	r16
     b1c:	ff 90       	pop	r15
     b1e:	ef 90       	pop	r14
     b20:	df 90       	pop	r13
     b22:	08 95       	ret

00000b24 <__unpack_f>:
     b24:	fc 01       	movw	r30, r24
     b26:	db 01       	movw	r26, r22
     b28:	40 81       	ld	r20, Z
     b2a:	51 81       	ldd	r21, Z+1	; 0x01
     b2c:	22 81       	ldd	r18, Z+2	; 0x02
     b2e:	62 2f       	mov	r22, r18
     b30:	6f 77       	andi	r22, 0x7F	; 127
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	22 1f       	adc	r18, r18
     b36:	22 27       	eor	r18, r18
     b38:	22 1f       	adc	r18, r18
     b3a:	93 81       	ldd	r25, Z+3	; 0x03
     b3c:	89 2f       	mov	r24, r25
     b3e:	88 0f       	add	r24, r24
     b40:	82 2b       	or	r24, r18
     b42:	28 2f       	mov	r18, r24
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	99 1f       	adc	r25, r25
     b48:	99 27       	eor	r25, r25
     b4a:	99 1f       	adc	r25, r25
     b4c:	11 96       	adiw	r26, 0x01	; 1
     b4e:	9c 93       	st	X, r25
     b50:	11 97       	sbiw	r26, 0x01	; 1
     b52:	21 15       	cp	r18, r1
     b54:	31 05       	cpc	r19, r1
     b56:	a9 f5       	brne	.+106    	; 0xbc2 <__unpack_f+0x9e>
     b58:	41 15       	cp	r20, r1
     b5a:	51 05       	cpc	r21, r1
     b5c:	61 05       	cpc	r22, r1
     b5e:	71 05       	cpc	r23, r1
     b60:	11 f4       	brne	.+4      	; 0xb66 <__unpack_f+0x42>
     b62:	82 e0       	ldi	r24, 0x02	; 2
     b64:	37 c0       	rjmp	.+110    	; 0xbd4 <__unpack_f+0xb0>
     b66:	82 e8       	ldi	r24, 0x82	; 130
     b68:	9f ef       	ldi	r25, 0xFF	; 255
     b6a:	13 96       	adiw	r26, 0x03	; 3
     b6c:	9c 93       	st	X, r25
     b6e:	8e 93       	st	-X, r24
     b70:	12 97       	sbiw	r26, 0x02	; 2
     b72:	9a 01       	movw	r18, r20
     b74:	ab 01       	movw	r20, r22
     b76:	67 e0       	ldi	r22, 0x07	; 7
     b78:	22 0f       	add	r18, r18
     b7a:	33 1f       	adc	r19, r19
     b7c:	44 1f       	adc	r20, r20
     b7e:	55 1f       	adc	r21, r21
     b80:	6a 95       	dec	r22
     b82:	d1 f7       	brne	.-12     	; 0xb78 <__unpack_f+0x54>
     b84:	83 e0       	ldi	r24, 0x03	; 3
     b86:	8c 93       	st	X, r24
     b88:	0d c0       	rjmp	.+26     	; 0xba4 <__unpack_f+0x80>
     b8a:	22 0f       	add	r18, r18
     b8c:	33 1f       	adc	r19, r19
     b8e:	44 1f       	adc	r20, r20
     b90:	55 1f       	adc	r21, r21
     b92:	12 96       	adiw	r26, 0x02	; 2
     b94:	8d 91       	ld	r24, X+
     b96:	9c 91       	ld	r25, X
     b98:	13 97       	sbiw	r26, 0x03	; 3
     b9a:	01 97       	sbiw	r24, 0x01	; 1
     b9c:	13 96       	adiw	r26, 0x03	; 3
     b9e:	9c 93       	st	X, r25
     ba0:	8e 93       	st	-X, r24
     ba2:	12 97       	sbiw	r26, 0x02	; 2
     ba4:	20 30       	cpi	r18, 0x00	; 0
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	38 07       	cpc	r19, r24
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	48 07       	cpc	r20, r24
     bae:	80 e4       	ldi	r24, 0x40	; 64
     bb0:	58 07       	cpc	r21, r24
     bb2:	58 f3       	brcs	.-42     	; 0xb8a <__unpack_f+0x66>
     bb4:	14 96       	adiw	r26, 0x04	; 4
     bb6:	2d 93       	st	X+, r18
     bb8:	3d 93       	st	X+, r19
     bba:	4d 93       	st	X+, r20
     bbc:	5c 93       	st	X, r21
     bbe:	17 97       	sbiw	r26, 0x07	; 7
     bc0:	08 95       	ret
     bc2:	2f 3f       	cpi	r18, 0xFF	; 255
     bc4:	31 05       	cpc	r19, r1
     bc6:	79 f4       	brne	.+30     	; 0xbe6 <__unpack_f+0xc2>
     bc8:	41 15       	cp	r20, r1
     bca:	51 05       	cpc	r21, r1
     bcc:	61 05       	cpc	r22, r1
     bce:	71 05       	cpc	r23, r1
     bd0:	19 f4       	brne	.+6      	; 0xbd8 <__unpack_f+0xb4>
     bd2:	84 e0       	ldi	r24, 0x04	; 4
     bd4:	8c 93       	st	X, r24
     bd6:	08 95       	ret
     bd8:	64 ff       	sbrs	r22, 4
     bda:	03 c0       	rjmp	.+6      	; 0xbe2 <__unpack_f+0xbe>
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	8c 93       	st	X, r24
     be0:	12 c0       	rjmp	.+36     	; 0xc06 <__unpack_f+0xe2>
     be2:	1c 92       	st	X, r1
     be4:	10 c0       	rjmp	.+32     	; 0xc06 <__unpack_f+0xe2>
     be6:	2f 57       	subi	r18, 0x7F	; 127
     be8:	30 40       	sbci	r19, 0x00	; 0
     bea:	13 96       	adiw	r26, 0x03	; 3
     bec:	3c 93       	st	X, r19
     bee:	2e 93       	st	-X, r18
     bf0:	12 97       	sbiw	r26, 0x02	; 2
     bf2:	83 e0       	ldi	r24, 0x03	; 3
     bf4:	8c 93       	st	X, r24
     bf6:	87 e0       	ldi	r24, 0x07	; 7
     bf8:	44 0f       	add	r20, r20
     bfa:	55 1f       	adc	r21, r21
     bfc:	66 1f       	adc	r22, r22
     bfe:	77 1f       	adc	r23, r23
     c00:	8a 95       	dec	r24
     c02:	d1 f7       	brne	.-12     	; 0xbf8 <__unpack_f+0xd4>
     c04:	70 64       	ori	r23, 0x40	; 64
     c06:	14 96       	adiw	r26, 0x04	; 4
     c08:	4d 93       	st	X+, r20
     c0a:	5d 93       	st	X+, r21
     c0c:	6d 93       	st	X+, r22
     c0e:	7c 93       	st	X, r23
     c10:	17 97       	sbiw	r26, 0x07	; 7
     c12:	08 95       	ret

00000c14 <__fpcmp_parts_f>:
     c14:	1f 93       	push	r17
     c16:	dc 01       	movw	r26, r24
     c18:	fb 01       	movw	r30, r22
     c1a:	9c 91       	ld	r25, X
     c1c:	92 30       	cpi	r25, 0x02	; 2
     c1e:	08 f4       	brcc	.+2      	; 0xc22 <__fpcmp_parts_f+0xe>
     c20:	47 c0       	rjmp	.+142    	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c22:	80 81       	ld	r24, Z
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	08 f4       	brcc	.+2      	; 0xc2a <__fpcmp_parts_f+0x16>
     c28:	43 c0       	rjmp	.+134    	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c2a:	94 30       	cpi	r25, 0x04	; 4
     c2c:	51 f4       	brne	.+20     	; 0xc42 <__fpcmp_parts_f+0x2e>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	84 30       	cpi	r24, 0x04	; 4
     c34:	99 f5       	brne	.+102    	; 0xc9c <__fpcmp_parts_f+0x88>
     c36:	81 81       	ldd	r24, Z+1	; 0x01
     c38:	68 2f       	mov	r22, r24
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	61 1b       	sub	r22, r17
     c3e:	71 09       	sbc	r23, r1
     c40:	3f c0       	rjmp	.+126    	; 0xcc0 <__fpcmp_parts_f+0xac>
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	21 f0       	breq	.+8      	; 0xc4e <__fpcmp_parts_f+0x3a>
     c46:	92 30       	cpi	r25, 0x02	; 2
     c48:	31 f4       	brne	.+12     	; 0xc56 <__fpcmp_parts_f+0x42>
     c4a:	82 30       	cpi	r24, 0x02	; 2
     c4c:	b9 f1       	breq	.+110    	; 0xcbc <__fpcmp_parts_f+0xa8>
     c4e:	81 81       	ldd	r24, Z+1	; 0x01
     c50:	88 23       	and	r24, r24
     c52:	89 f1       	breq	.+98     	; 0xcb6 <__fpcmp_parts_f+0xa2>
     c54:	2d c0       	rjmp	.+90     	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c56:	11 96       	adiw	r26, 0x01	; 1
     c58:	1c 91       	ld	r17, X
     c5a:	11 97       	sbiw	r26, 0x01	; 1
     c5c:	82 30       	cpi	r24, 0x02	; 2
     c5e:	f1 f0       	breq	.+60     	; 0xc9c <__fpcmp_parts_f+0x88>
     c60:	81 81       	ldd	r24, Z+1	; 0x01
     c62:	18 17       	cp	r17, r24
     c64:	d9 f4       	brne	.+54     	; 0xc9c <__fpcmp_parts_f+0x88>
     c66:	12 96       	adiw	r26, 0x02	; 2
     c68:	2d 91       	ld	r18, X+
     c6a:	3c 91       	ld	r19, X
     c6c:	13 97       	sbiw	r26, 0x03	; 3
     c6e:	82 81       	ldd	r24, Z+2	; 0x02
     c70:	93 81       	ldd	r25, Z+3	; 0x03
     c72:	82 17       	cp	r24, r18
     c74:	93 07       	cpc	r25, r19
     c76:	94 f0       	brlt	.+36     	; 0xc9c <__fpcmp_parts_f+0x88>
     c78:	28 17       	cp	r18, r24
     c7a:	39 07       	cpc	r19, r25
     c7c:	bc f0       	brlt	.+46     	; 0xcac <__fpcmp_parts_f+0x98>
     c7e:	14 96       	adiw	r26, 0x04	; 4
     c80:	8d 91       	ld	r24, X+
     c82:	9d 91       	ld	r25, X+
     c84:	0d 90       	ld	r0, X+
     c86:	bc 91       	ld	r27, X
     c88:	a0 2d       	mov	r26, r0
     c8a:	24 81       	ldd	r18, Z+4	; 0x04
     c8c:	35 81       	ldd	r19, Z+5	; 0x05
     c8e:	46 81       	ldd	r20, Z+6	; 0x06
     c90:	57 81       	ldd	r21, Z+7	; 0x07
     c92:	28 17       	cp	r18, r24
     c94:	39 07       	cpc	r19, r25
     c96:	4a 07       	cpc	r20, r26
     c98:	5b 07       	cpc	r21, r27
     c9a:	18 f4       	brcc	.+6      	; 0xca2 <__fpcmp_parts_f+0x8e>
     c9c:	11 23       	and	r17, r17
     c9e:	41 f0       	breq	.+16     	; 0xcb0 <__fpcmp_parts_f+0x9c>
     ca0:	0a c0       	rjmp	.+20     	; 0xcb6 <__fpcmp_parts_f+0xa2>
     ca2:	82 17       	cp	r24, r18
     ca4:	93 07       	cpc	r25, r19
     ca6:	a4 07       	cpc	r26, r20
     ca8:	b5 07       	cpc	r27, r21
     caa:	40 f4       	brcc	.+16     	; 0xcbc <__fpcmp_parts_f+0xa8>
     cac:	11 23       	and	r17, r17
     cae:	19 f0       	breq	.+6      	; 0xcb6 <__fpcmp_parts_f+0xa2>
     cb0:	61 e0       	ldi	r22, 0x01	; 1
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	05 c0       	rjmp	.+10     	; 0xcc0 <__fpcmp_parts_f+0xac>
     cb6:	6f ef       	ldi	r22, 0xFF	; 255
     cb8:	7f ef       	ldi	r23, 0xFF	; 255
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <__fpcmp_parts_f+0xac>
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	cb 01       	movw	r24, r22
     cc2:	1f 91       	pop	r17
     cc4:	08 95       	ret

00000cc6 <main>:
#include "keypad.h"
#include "lcd.h"


int main(void)
{
     cc6:	0f 93       	push	r16
     cc8:	1f 93       	push	r17
     cca:	df 93       	push	r29
     ccc:	cf 93       	push	r28
     cce:	cd b7       	in	r28, 0x3d	; 61
     cd0:	de b7       	in	r29, 0x3e	; 62
     cd2:	c4 55       	subi	r28, 0x54	; 84
     cd4:	d0 40       	sbci	r29, 0x00	; 0
     cd6:	0f b6       	in	r0, 0x3f	; 63
     cd8:	f8 94       	cli
     cda:	de bf       	out	0x3e, r29	; 62
     cdc:	0f be       	out	0x3f, r0	; 63
     cde:	cd bf       	out	0x3d, r28	; 61
	uint8 CharacterPressed;
	uint16 firstNumber = 0;
     ce0:	fe 01       	movw	r30, r28
     ce2:	e0 5b       	subi	r30, 0xB0	; 176
     ce4:	ff 4f       	sbci	r31, 0xFF	; 255
     ce6:	11 82       	std	Z+1, r1	; 0x01
     ce8:	10 82       	st	Z, r1
	uint16 secondNumber = 0;
     cea:	fe 01       	movw	r30, r28
     cec:	e2 5b       	subi	r30, 0xB2	; 178
     cee:	ff 4f       	sbci	r31, 0xFF	; 255
     cf0:	11 82       	std	Z+1, r1	; 0x01
     cf2:	10 82       	st	Z, r1
	float32 initialNumber = 0.1;
     cf4:	fe 01       	movw	r30, r28
     cf6:	e6 5b       	subi	r30, 0xB6	; 182
     cf8:	ff 4f       	sbci	r31, 0xFF	; 255
     cfa:	8d ec       	ldi	r24, 0xCD	; 205
     cfc:	9c ec       	ldi	r25, 0xCC	; 204
     cfe:	ac ec       	ldi	r26, 0xCC	; 204
     d00:	bd e3       	ldi	r27, 0x3D	; 61
     d02:	80 83       	st	Z, r24
     d04:	91 83       	std	Z+1, r25	; 0x01
     d06:	a2 83       	std	Z+2, r26	; 0x02
     d08:	b3 83       	std	Z+3, r27	; 0x03
	uint8 operator;
	uint16 result;
	LCD_init();
     d0a:	0e 94 04 10 	call	0x2008	; 0x2008 <LCD_init>

	initialNumber = 0.1;
     d0e:	fe 01       	movw	r30, r28
     d10:	e6 5b       	subi	r30, 0xB6	; 182
     d12:	ff 4f       	sbci	r31, 0xFF	; 255
     d14:	8d ec       	ldi	r24, 0xCD	; 205
     d16:	9c ec       	ldi	r25, 0xCC	; 204
     d18:	ac ec       	ldi	r26, 0xCC	; 204
     d1a:	bd e3       	ldi	r27, 0x3D	; 61
     d1c:	80 83       	st	Z, r24
     d1e:	91 83       	std	Z+1, r25	; 0x01
     d20:	a2 83       	std	Z+2, r26	; 0x02
     d22:	b3 83       	std	Z+3, r27	; 0x03
	CharacterPressed = KEYPAD_getPressedKey();
     d24:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <KEYPAD_getPressedKey>
     d28:	fe 01       	movw	r30, r28
     d2a:	ee 5a       	subi	r30, 0xAE	; 174
     d2c:	ff 4f       	sbci	r31, 0xFF	; 255
     d2e:	80 83       	st	Z, r24
     d30:	e3 c0       	rjmp	.+454    	; 0xef8 <main+0x232>
	while((CharacterPressed >= 0) && (CharacterPressed <= 9))
	{
		LCD_intgerToString(CharacterPressed);
     d32:	fe 01       	movw	r30, r28
     d34:	ee 5a       	subi	r30, 0xAE	; 174
     d36:	ff 4f       	sbci	r31, 0xFF	; 255
     d38:	80 81       	ld	r24, Z
     d3a:	88 2f       	mov	r24, r24
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	0e 94 30 1a 	call	0x3460	; 0x3460 <LCD_intgerToString>
     d42:	fe 01       	movw	r30, r28
     d44:	ed 5b       	subi	r30, 0xBD	; 189
     d46:	ff 4f       	sbci	r31, 0xFF	; 255
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	aa ef       	ldi	r26, 0xFA	; 250
     d4e:	b3 e4       	ldi	r27, 0x43	; 67
     d50:	80 83       	st	Z, r24
     d52:	91 83       	std	Z+1, r25	; 0x01
     d54:	a2 83       	std	Z+2, r26	; 0x02
     d56:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d58:	8e 01       	movw	r16, r28
     d5a:	01 5c       	subi	r16, 0xC1	; 193
     d5c:	1f 4f       	sbci	r17, 0xFF	; 255
     d5e:	fe 01       	movw	r30, r28
     d60:	ed 5b       	subi	r30, 0xBD	; 189
     d62:	ff 4f       	sbci	r31, 0xFF	; 255
     d64:	60 81       	ld	r22, Z
     d66:	71 81       	ldd	r23, Z+1	; 0x01
     d68:	82 81       	ldd	r24, Z+2	; 0x02
     d6a:	93 81       	ldd	r25, Z+3	; 0x03
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	4a e7       	ldi	r20, 0x7A	; 122
     d72:	55 e4       	ldi	r21, 0x45	; 69
     d74:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d78:	dc 01       	movw	r26, r24
     d7a:	cb 01       	movw	r24, r22
     d7c:	f8 01       	movw	r30, r16
     d7e:	80 83       	st	Z, r24
     d80:	91 83       	std	Z+1, r25	; 0x01
     d82:	a2 83       	std	Z+2, r26	; 0x02
     d84:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d86:	fe 01       	movw	r30, r28
     d88:	ff 96       	adiw	r30, 0x3f	; 63
     d8a:	60 81       	ld	r22, Z
     d8c:	71 81       	ldd	r23, Z+1	; 0x01
     d8e:	82 81       	ldd	r24, Z+2	; 0x02
     d90:	93 81       	ldd	r25, Z+3	; 0x03
     d92:	20 e0       	ldi	r18, 0x00	; 0
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	40 e8       	ldi	r20, 0x80	; 128
     d98:	5f e3       	ldi	r21, 0x3F	; 63
     d9a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     d9e:	88 23       	and	r24, r24
     da0:	2c f4       	brge	.+10     	; 0xdac <main+0xe6>
		__ticks = 1;
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	9e af       	std	Y+62, r25	; 0x3e
     da8:	8d af       	std	Y+61, r24	; 0x3d
     daa:	46 c0       	rjmp	.+140    	; 0xe38 <main+0x172>
	else if (__tmp > 65535)
     dac:	fe 01       	movw	r30, r28
     dae:	ff 96       	adiw	r30, 0x3f	; 63
     db0:	60 81       	ld	r22, Z
     db2:	71 81       	ldd	r23, Z+1	; 0x01
     db4:	82 81       	ldd	r24, Z+2	; 0x02
     db6:	93 81       	ldd	r25, Z+3	; 0x03
     db8:	20 e0       	ldi	r18, 0x00	; 0
     dba:	3f ef       	ldi	r19, 0xFF	; 255
     dbc:	4f e7       	ldi	r20, 0x7F	; 127
     dbe:	57 e4       	ldi	r21, 0x47	; 71
     dc0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     dc4:	18 16       	cp	r1, r24
     dc6:	64 f5       	brge	.+88     	; 0xe20 <main+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dc8:	fe 01       	movw	r30, r28
     dca:	ed 5b       	subi	r30, 0xBD	; 189
     dcc:	ff 4f       	sbci	r31, 0xFF	; 255
     dce:	60 81       	ld	r22, Z
     dd0:	71 81       	ldd	r23, Z+1	; 0x01
     dd2:	82 81       	ldd	r24, Z+2	; 0x02
     dd4:	93 81       	ldd	r25, Z+3	; 0x03
     dd6:	20 e0       	ldi	r18, 0x00	; 0
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	40 e2       	ldi	r20, 0x20	; 32
     ddc:	51 e4       	ldi	r21, 0x41	; 65
     dde:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     de2:	dc 01       	movw	r26, r24
     de4:	cb 01       	movw	r24, r22
     de6:	bc 01       	movw	r22, r24
     de8:	cd 01       	movw	r24, r26
     dea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     dee:	dc 01       	movw	r26, r24
     df0:	cb 01       	movw	r24, r22
     df2:	9e af       	std	Y+62, r25	; 0x3e
     df4:	8d af       	std	Y+61, r24	; 0x3d
     df6:	0f c0       	rjmp	.+30     	; 0xe16 <main+0x150>
     df8:	80 e9       	ldi	r24, 0x90	; 144
     dfa:	91 e0       	ldi	r25, 0x01	; 1
     dfc:	9c af       	std	Y+60, r25	; 0x3c
     dfe:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e00:	8b ad       	ldd	r24, Y+59	; 0x3b
     e02:	9c ad       	ldd	r25, Y+60	; 0x3c
     e04:	01 97       	sbiw	r24, 0x01	; 1
     e06:	f1 f7       	brne	.-4      	; 0xe04 <main+0x13e>
     e08:	9c af       	std	Y+60, r25	; 0x3c
     e0a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e0c:	8d ad       	ldd	r24, Y+61	; 0x3d
     e0e:	9e ad       	ldd	r25, Y+62	; 0x3e
     e10:	01 97       	sbiw	r24, 0x01	; 1
     e12:	9e af       	std	Y+62, r25	; 0x3e
     e14:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e16:	8d ad       	ldd	r24, Y+61	; 0x3d
     e18:	9e ad       	ldd	r25, Y+62	; 0x3e
     e1a:	00 97       	sbiw	r24, 0x00	; 0
     e1c:	69 f7       	brne	.-38     	; 0xdf8 <main+0x132>
     e1e:	16 c0       	rjmp	.+44     	; 0xe4c <main+0x186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e20:	fe 01       	movw	r30, r28
     e22:	ff 96       	adiw	r30, 0x3f	; 63
     e24:	60 81       	ld	r22, Z
     e26:	71 81       	ldd	r23, Z+1	; 0x01
     e28:	82 81       	ldd	r24, Z+2	; 0x02
     e2a:	93 81       	ldd	r25, Z+3	; 0x03
     e2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e30:	dc 01       	movw	r26, r24
     e32:	cb 01       	movw	r24, r22
     e34:	9e af       	std	Y+62, r25	; 0x3e
     e36:	8d af       	std	Y+61, r24	; 0x3d
     e38:	8d ad       	ldd	r24, Y+61	; 0x3d
     e3a:	9e ad       	ldd	r25, Y+62	; 0x3e
     e3c:	9a af       	std	Y+58, r25	; 0x3a
     e3e:	89 af       	std	Y+57, r24	; 0x39
     e40:	89 ad       	ldd	r24, Y+57	; 0x39
     e42:	9a ad       	ldd	r25, Y+58	; 0x3a
     e44:	01 97       	sbiw	r24, 0x01	; 1
     e46:	f1 f7       	brne	.-4      	; 0xe44 <main+0x17e>
     e48:	9a af       	std	Y+58, r25	; 0x3a
     e4a:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(500);
		initialNumber *= 10;
     e4c:	8e 01       	movw	r16, r28
     e4e:	06 5b       	subi	r16, 0xB6	; 182
     e50:	1f 4f       	sbci	r17, 0xFF	; 255
     e52:	fe 01       	movw	r30, r28
     e54:	e6 5b       	subi	r30, 0xB6	; 182
     e56:	ff 4f       	sbci	r31, 0xFF	; 255
     e58:	60 81       	ld	r22, Z
     e5a:	71 81       	ldd	r23, Z+1	; 0x01
     e5c:	82 81       	ldd	r24, Z+2	; 0x02
     e5e:	93 81       	ldd	r25, Z+3	; 0x03
     e60:	20 e0       	ldi	r18, 0x00	; 0
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	40 e2       	ldi	r20, 0x20	; 32
     e66:	51 e4       	ldi	r21, 0x41	; 65
     e68:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e6c:	dc 01       	movw	r26, r24
     e6e:	cb 01       	movw	r24, r22
     e70:	f8 01       	movw	r30, r16
     e72:	80 83       	st	Z, r24
     e74:	91 83       	std	Z+1, r25	; 0x01
     e76:	a2 83       	std	Z+2, r26	; 0x02
     e78:	b3 83       	std	Z+3, r27	; 0x03
		firstNumber *= initialNumber;
     e7a:	fe 01       	movw	r30, r28
     e7c:	e0 5b       	subi	r30, 0xB0	; 176
     e7e:	ff 4f       	sbci	r31, 0xFF	; 255
     e80:	80 81       	ld	r24, Z
     e82:	91 81       	ldd	r25, Z+1	; 0x01
     e84:	cc 01       	movw	r24, r24
     e86:	a0 e0       	ldi	r26, 0x00	; 0
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	bc 01       	movw	r22, r24
     e8c:	cd 01       	movw	r24, r26
     e8e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
     e92:	dc 01       	movw	r26, r24
     e94:	cb 01       	movw	r24, r22
     e96:	fe 01       	movw	r30, r28
     e98:	e6 5b       	subi	r30, 0xB6	; 182
     e9a:	ff 4f       	sbci	r31, 0xFF	; 255
     e9c:	bc 01       	movw	r22, r24
     e9e:	cd 01       	movw	r24, r26
     ea0:	20 81       	ld	r18, Z
     ea2:	31 81       	ldd	r19, Z+1	; 0x01
     ea4:	42 81       	ldd	r20, Z+2	; 0x02
     ea6:	53 81       	ldd	r21, Z+3	; 0x03
     ea8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     eac:	dc 01       	movw	r26, r24
     eae:	cb 01       	movw	r24, r22
     eb0:	8e 01       	movw	r16, r28
     eb2:	00 5b       	subi	r16, 0xB0	; 176
     eb4:	1f 4f       	sbci	r17, 0xFF	; 255
     eb6:	bc 01       	movw	r22, r24
     eb8:	cd 01       	movw	r24, r26
     eba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ebe:	dc 01       	movw	r26, r24
     ec0:	cb 01       	movw	r24, r22
     ec2:	f8 01       	movw	r30, r16
     ec4:	91 83       	std	Z+1, r25	; 0x01
     ec6:	80 83       	st	Z, r24
		firstNumber +=  CharacterPressed;
     ec8:	fe 01       	movw	r30, r28
     eca:	ee 5a       	subi	r30, 0xAE	; 174
     ecc:	ff 4f       	sbci	r31, 0xFF	; 255
     ece:	80 81       	ld	r24, Z
     ed0:	28 2f       	mov	r18, r24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	de 01       	movw	r26, r28
     ed6:	a0 5b       	subi	r26, 0xB0	; 176
     ed8:	bf 4f       	sbci	r27, 0xFF	; 255
     eda:	fe 01       	movw	r30, r28
     edc:	e0 5b       	subi	r30, 0xB0	; 176
     ede:	ff 4f       	sbci	r31, 0xFF	; 255
     ee0:	80 81       	ld	r24, Z
     ee2:	91 81       	ldd	r25, Z+1	; 0x01
     ee4:	82 0f       	add	r24, r18
     ee6:	93 1f       	adc	r25, r19
     ee8:	8d 93       	st	X+, r24
     eea:	9c 93       	st	X, r25
		CharacterPressed = KEYPAD_getPressedKey();
     eec:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <KEYPAD_getPressedKey>
     ef0:	fe 01       	movw	r30, r28
     ef2:	ee 5a       	subi	r30, 0xAE	; 174
     ef4:	ff 4f       	sbci	r31, 0xFF	; 255
     ef6:	80 83       	st	Z, r24
	uint16 result;
	LCD_init();

	initialNumber = 0.1;
	CharacterPressed = KEYPAD_getPressedKey();
	while((CharacterPressed >= 0) && (CharacterPressed <= 9))
     ef8:	fe 01       	movw	r30, r28
     efa:	ee 5a       	subi	r30, 0xAE	; 174
     efc:	ff 4f       	sbci	r31, 0xFF	; 255
     efe:	80 81       	ld	r24, Z
     f00:	8a 30       	cpi	r24, 0x0A	; 10
     f02:	08 f4       	brcc	.+2      	; 0xf06 <main+0x240>
     f04:	16 cf       	rjmp	.-468    	; 0xd32 <main+0x6c>
	}

	while(1)
	{

		if((CharacterPressed == '+') || (CharacterPressed == '-') || (CharacterPressed == '*') || (CharacterPressed == '/'))
     f06:	fe 01       	movw	r30, r28
     f08:	ee 5a       	subi	r30, 0xAE	; 174
     f0a:	ff 4f       	sbci	r31, 0xFF	; 255
     f0c:	80 81       	ld	r24, Z
     f0e:	8b 32       	cpi	r24, 0x2B	; 43
     f10:	99 f0       	breq	.+38     	; 0xf38 <main+0x272>
     f12:	fe 01       	movw	r30, r28
     f14:	ee 5a       	subi	r30, 0xAE	; 174
     f16:	ff 4f       	sbci	r31, 0xFF	; 255
     f18:	80 81       	ld	r24, Z
     f1a:	8d 32       	cpi	r24, 0x2D	; 45
     f1c:	69 f0       	breq	.+26     	; 0xf38 <main+0x272>
     f1e:	fe 01       	movw	r30, r28
     f20:	ee 5a       	subi	r30, 0xAE	; 174
     f22:	ff 4f       	sbci	r31, 0xFF	; 255
     f24:	80 81       	ld	r24, Z
     f26:	8a 32       	cpi	r24, 0x2A	; 42
     f28:	39 f0       	breq	.+14     	; 0xf38 <main+0x272>
     f2a:	fe 01       	movw	r30, r28
     f2c:	ee 5a       	subi	r30, 0xAE	; 174
     f2e:	ff 4f       	sbci	r31, 0xFF	; 255
     f30:	80 81       	ld	r24, Z
     f32:	8f 32       	cpi	r24, 0x2F	; 47
     f34:	09 f0       	breq	.+2      	; 0xf38 <main+0x272>
     f36:	80 c0       	rjmp	.+256    	; 0x1038 <main+0x372>
		{
			operator = CharacterPressed;
     f38:	de 01       	movw	r26, r28
     f3a:	a7 5b       	subi	r26, 0xB7	; 183
     f3c:	bf 4f       	sbci	r27, 0xFF	; 255
     f3e:	fe 01       	movw	r30, r28
     f40:	ee 5a       	subi	r30, 0xAE	; 174
     f42:	ff 4f       	sbci	r31, 0xFF	; 255
     f44:	80 81       	ld	r24, Z
     f46:	8c 93       	st	X, r24
			LCD_displayCharacter(CharacterPressed);
     f48:	fe 01       	movw	r30, r28
     f4a:	ee 5a       	subi	r30, 0xAE	; 174
     f4c:	ff 4f       	sbci	r31, 0xFF	; 255
     f4e:	80 81       	ld	r24, Z
     f50:	0e 94 31 15 	call	0x2a62	; 0x2a62 <LCD_displayCharacter>
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	aa ef       	ldi	r26, 0xFA	; 250
     f5a:	b3 e4       	ldi	r27, 0x43	; 67
     f5c:	8d ab       	std	Y+53, r24	; 0x35
     f5e:	9e ab       	std	Y+54, r25	; 0x36
     f60:	af ab       	std	Y+55, r26	; 0x37
     f62:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f64:	6d a9       	ldd	r22, Y+53	; 0x35
     f66:	7e a9       	ldd	r23, Y+54	; 0x36
     f68:	8f a9       	ldd	r24, Y+55	; 0x37
     f6a:	98 ad       	ldd	r25, Y+56	; 0x38
     f6c:	20 e0       	ldi	r18, 0x00	; 0
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	4a e7       	ldi	r20, 0x7A	; 122
     f72:	55 e4       	ldi	r21, 0x45	; 69
     f74:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f78:	dc 01       	movw	r26, r24
     f7a:	cb 01       	movw	r24, r22
     f7c:	89 ab       	std	Y+49, r24	; 0x31
     f7e:	9a ab       	std	Y+50, r25	; 0x32
     f80:	ab ab       	std	Y+51, r26	; 0x33
     f82:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     f84:	69 a9       	ldd	r22, Y+49	; 0x31
     f86:	7a a9       	ldd	r23, Y+50	; 0x32
     f88:	8b a9       	ldd	r24, Y+51	; 0x33
     f8a:	9c a9       	ldd	r25, Y+52	; 0x34
     f8c:	20 e0       	ldi	r18, 0x00	; 0
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	40 e8       	ldi	r20, 0x80	; 128
     f92:	5f e3       	ldi	r21, 0x3F	; 63
     f94:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     f98:	88 23       	and	r24, r24
     f9a:	2c f4       	brge	.+10     	; 0xfa6 <main+0x2e0>
		__ticks = 1;
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	98 ab       	std	Y+48, r25	; 0x30
     fa2:	8f a7       	std	Y+47, r24	; 0x2f
     fa4:	3f c0       	rjmp	.+126    	; 0x1024 <main+0x35e>
	else if (__tmp > 65535)
     fa6:	69 a9       	ldd	r22, Y+49	; 0x31
     fa8:	7a a9       	ldd	r23, Y+50	; 0x32
     faa:	8b a9       	ldd	r24, Y+51	; 0x33
     fac:	9c a9       	ldd	r25, Y+52	; 0x34
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	3f ef       	ldi	r19, 0xFF	; 255
     fb2:	4f e7       	ldi	r20, 0x7F	; 127
     fb4:	57 e4       	ldi	r21, 0x47	; 71
     fb6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     fba:	18 16       	cp	r1, r24
     fbc:	4c f5       	brge	.+82     	; 0x1010 <main+0x34a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fbe:	6d a9       	ldd	r22, Y+53	; 0x35
     fc0:	7e a9       	ldd	r23, Y+54	; 0x36
     fc2:	8f a9       	ldd	r24, Y+55	; 0x37
     fc4:	98 ad       	ldd	r25, Y+56	; 0x38
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	40 e2       	ldi	r20, 0x20	; 32
     fcc:	51 e4       	ldi	r21, 0x41	; 65
     fce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fd2:	dc 01       	movw	r26, r24
     fd4:	cb 01       	movw	r24, r22
     fd6:	bc 01       	movw	r22, r24
     fd8:	cd 01       	movw	r24, r26
     fda:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fde:	dc 01       	movw	r26, r24
     fe0:	cb 01       	movw	r24, r22
     fe2:	98 ab       	std	Y+48, r25	; 0x30
     fe4:	8f a7       	std	Y+47, r24	; 0x2f
     fe6:	0f c0       	rjmp	.+30     	; 0x1006 <main+0x340>
     fe8:	80 e9       	ldi	r24, 0x90	; 144
     fea:	91 e0       	ldi	r25, 0x01	; 1
     fec:	9e a7       	std	Y+46, r25	; 0x2e
     fee:	8d a7       	std	Y+45, r24	; 0x2d
     ff0:	8d a5       	ldd	r24, Y+45	; 0x2d
     ff2:	9e a5       	ldd	r25, Y+46	; 0x2e
     ff4:	01 97       	sbiw	r24, 0x01	; 1
     ff6:	f1 f7       	brne	.-4      	; 0xff4 <main+0x32e>
     ff8:	9e a7       	std	Y+46, r25	; 0x2e
     ffa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ffc:	8f a5       	ldd	r24, Y+47	; 0x2f
     ffe:	98 a9       	ldd	r25, Y+48	; 0x30
    1000:	01 97       	sbiw	r24, 0x01	; 1
    1002:	98 ab       	std	Y+48, r25	; 0x30
    1004:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1006:	8f a5       	ldd	r24, Y+47	; 0x2f
    1008:	98 a9       	ldd	r25, Y+48	; 0x30
    100a:	00 97       	sbiw	r24, 0x00	; 0
    100c:	69 f7       	brne	.-38     	; 0xfe8 <main+0x322>
    100e:	14 c0       	rjmp	.+40     	; 0x1038 <main+0x372>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1010:	69 a9       	ldd	r22, Y+49	; 0x31
    1012:	7a a9       	ldd	r23, Y+50	; 0x32
    1014:	8b a9       	ldd	r24, Y+51	; 0x33
    1016:	9c a9       	ldd	r25, Y+52	; 0x34
    1018:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    101c:	dc 01       	movw	r26, r24
    101e:	cb 01       	movw	r24, r22
    1020:	98 ab       	std	Y+48, r25	; 0x30
    1022:	8f a7       	std	Y+47, r24	; 0x2f
    1024:	8f a5       	ldd	r24, Y+47	; 0x2f
    1026:	98 a9       	ldd	r25, Y+48	; 0x30
    1028:	9c a7       	std	Y+44, r25	; 0x2c
    102a:	8b a7       	std	Y+43, r24	; 0x2b
    102c:	8b a5       	ldd	r24, Y+43	; 0x2b
    102e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1030:	01 97       	sbiw	r24, 0x01	; 1
    1032:	f1 f7       	brne	.-4      	; 0x1030 <main+0x36a>
    1034:	9c a7       	std	Y+44, r25	; 0x2c
    1036:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(500);
		}

		secondNumber = 0;
    1038:	fe 01       	movw	r30, r28
    103a:	e2 5b       	subi	r30, 0xB2	; 178
    103c:	ff 4f       	sbci	r31, 0xFF	; 255
    103e:	11 82       	std	Z+1, r1	; 0x01
    1040:	10 82       	st	Z, r1
		initialNumber = 0.1;
    1042:	fe 01       	movw	r30, r28
    1044:	e6 5b       	subi	r30, 0xB6	; 182
    1046:	ff 4f       	sbci	r31, 0xFF	; 255
    1048:	8d ec       	ldi	r24, 0xCD	; 205
    104a:	9c ec       	ldi	r25, 0xCC	; 204
    104c:	ac ec       	ldi	r26, 0xCC	; 204
    104e:	bd e3       	ldi	r27, 0x3D	; 61
    1050:	80 83       	st	Z, r24
    1052:	91 83       	std	Z+1, r25	; 0x01
    1054:	a2 83       	std	Z+2, r26	; 0x02
    1056:	b3 83       	std	Z+3, r27	; 0x03
		CharacterPressed = KEYPAD_getPressedKey();
    1058:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <KEYPAD_getPressedKey>
    105c:	fe 01       	movw	r30, r28
    105e:	ee 5a       	subi	r30, 0xAE	; 174
    1060:	ff 4f       	sbci	r31, 0xFF	; 255
    1062:	80 83       	st	Z, r24
    1064:	d0 c0       	rjmp	.+416    	; 0x1206 <main+0x540>
		while((CharacterPressed >= 0) && (CharacterPressed <= 9))
		{
			LCD_intgerToString(CharacterPressed);
    1066:	fe 01       	movw	r30, r28
    1068:	ee 5a       	subi	r30, 0xAE	; 174
    106a:	ff 4f       	sbci	r31, 0xFF	; 255
    106c:	80 81       	ld	r24, Z
    106e:	88 2f       	mov	r24, r24
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	0e 94 30 1a 	call	0x3460	; 0x3460 <LCD_intgerToString>
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	aa ef       	ldi	r26, 0xFA	; 250
    107c:	b3 e4       	ldi	r27, 0x43	; 67
    107e:	8f a3       	std	Y+39, r24	; 0x27
    1080:	98 a7       	std	Y+40, r25	; 0x28
    1082:	a9 a7       	std	Y+41, r26	; 0x29
    1084:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1086:	6f a1       	ldd	r22, Y+39	; 0x27
    1088:	78 a5       	ldd	r23, Y+40	; 0x28
    108a:	89 a5       	ldd	r24, Y+41	; 0x29
    108c:	9a a5       	ldd	r25, Y+42	; 0x2a
    108e:	20 e0       	ldi	r18, 0x00	; 0
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	4a e7       	ldi	r20, 0x7A	; 122
    1094:	55 e4       	ldi	r21, 0x45	; 69
    1096:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    109a:	dc 01       	movw	r26, r24
    109c:	cb 01       	movw	r24, r22
    109e:	8b a3       	std	Y+35, r24	; 0x23
    10a0:	9c a3       	std	Y+36, r25	; 0x24
    10a2:	ad a3       	std	Y+37, r26	; 0x25
    10a4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    10a6:	6b a1       	ldd	r22, Y+35	; 0x23
    10a8:	7c a1       	ldd	r23, Y+36	; 0x24
    10aa:	8d a1       	ldd	r24, Y+37	; 0x25
    10ac:	9e a1       	ldd	r25, Y+38	; 0x26
    10ae:	20 e0       	ldi	r18, 0x00	; 0
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	40 e8       	ldi	r20, 0x80	; 128
    10b4:	5f e3       	ldi	r21, 0x3F	; 63
    10b6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    10ba:	88 23       	and	r24, r24
    10bc:	2c f4       	brge	.+10     	; 0x10c8 <main+0x402>
		__ticks = 1;
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	9a a3       	std	Y+34, r25	; 0x22
    10c4:	89 a3       	std	Y+33, r24	; 0x21
    10c6:	3f c0       	rjmp	.+126    	; 0x1146 <main+0x480>
	else if (__tmp > 65535)
    10c8:	6b a1       	ldd	r22, Y+35	; 0x23
    10ca:	7c a1       	ldd	r23, Y+36	; 0x24
    10cc:	8d a1       	ldd	r24, Y+37	; 0x25
    10ce:	9e a1       	ldd	r25, Y+38	; 0x26
    10d0:	20 e0       	ldi	r18, 0x00	; 0
    10d2:	3f ef       	ldi	r19, 0xFF	; 255
    10d4:	4f e7       	ldi	r20, 0x7F	; 127
    10d6:	57 e4       	ldi	r21, 0x47	; 71
    10d8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    10dc:	18 16       	cp	r1, r24
    10de:	4c f5       	brge	.+82     	; 0x1132 <main+0x46c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10e0:	6f a1       	ldd	r22, Y+39	; 0x27
    10e2:	78 a5       	ldd	r23, Y+40	; 0x28
    10e4:	89 a5       	ldd	r24, Y+41	; 0x29
    10e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    10e8:	20 e0       	ldi	r18, 0x00	; 0
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	40 e2       	ldi	r20, 0x20	; 32
    10ee:	51 e4       	ldi	r21, 0x41	; 65
    10f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10f4:	dc 01       	movw	r26, r24
    10f6:	cb 01       	movw	r24, r22
    10f8:	bc 01       	movw	r22, r24
    10fa:	cd 01       	movw	r24, r26
    10fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1100:	dc 01       	movw	r26, r24
    1102:	cb 01       	movw	r24, r22
    1104:	9a a3       	std	Y+34, r25	; 0x22
    1106:	89 a3       	std	Y+33, r24	; 0x21
    1108:	0f c0       	rjmp	.+30     	; 0x1128 <main+0x462>
    110a:	80 e9       	ldi	r24, 0x90	; 144
    110c:	91 e0       	ldi	r25, 0x01	; 1
    110e:	98 a3       	std	Y+32, r25	; 0x20
    1110:	8f 8f       	std	Y+31, r24	; 0x1f
    1112:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1114:	98 a1       	ldd	r25, Y+32	; 0x20
    1116:	01 97       	sbiw	r24, 0x01	; 1
    1118:	f1 f7       	brne	.-4      	; 0x1116 <main+0x450>
    111a:	98 a3       	std	Y+32, r25	; 0x20
    111c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    111e:	89 a1       	ldd	r24, Y+33	; 0x21
    1120:	9a a1       	ldd	r25, Y+34	; 0x22
    1122:	01 97       	sbiw	r24, 0x01	; 1
    1124:	9a a3       	std	Y+34, r25	; 0x22
    1126:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1128:	89 a1       	ldd	r24, Y+33	; 0x21
    112a:	9a a1       	ldd	r25, Y+34	; 0x22
    112c:	00 97       	sbiw	r24, 0x00	; 0
    112e:	69 f7       	brne	.-38     	; 0x110a <main+0x444>
    1130:	14 c0       	rjmp	.+40     	; 0x115a <main+0x494>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1132:	6b a1       	ldd	r22, Y+35	; 0x23
    1134:	7c a1       	ldd	r23, Y+36	; 0x24
    1136:	8d a1       	ldd	r24, Y+37	; 0x25
    1138:	9e a1       	ldd	r25, Y+38	; 0x26
    113a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	9a a3       	std	Y+34, r25	; 0x22
    1144:	89 a3       	std	Y+33, r24	; 0x21
    1146:	89 a1       	ldd	r24, Y+33	; 0x21
    1148:	9a a1       	ldd	r25, Y+34	; 0x22
    114a:	9e 8f       	std	Y+30, r25	; 0x1e
    114c:	8d 8f       	std	Y+29, r24	; 0x1d
    114e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1150:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1152:	01 97       	sbiw	r24, 0x01	; 1
    1154:	f1 f7       	brne	.-4      	; 0x1152 <main+0x48c>
    1156:	9e 8f       	std	Y+30, r25	; 0x1e
    1158:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(500);
			initialNumber *= 10;
    115a:	8e 01       	movw	r16, r28
    115c:	06 5b       	subi	r16, 0xB6	; 182
    115e:	1f 4f       	sbci	r17, 0xFF	; 255
    1160:	fe 01       	movw	r30, r28
    1162:	e6 5b       	subi	r30, 0xB6	; 182
    1164:	ff 4f       	sbci	r31, 0xFF	; 255
    1166:	60 81       	ld	r22, Z
    1168:	71 81       	ldd	r23, Z+1	; 0x01
    116a:	82 81       	ldd	r24, Z+2	; 0x02
    116c:	93 81       	ldd	r25, Z+3	; 0x03
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	40 e2       	ldi	r20, 0x20	; 32
    1174:	51 e4       	ldi	r21, 0x41	; 65
    1176:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    117a:	dc 01       	movw	r26, r24
    117c:	cb 01       	movw	r24, r22
    117e:	f8 01       	movw	r30, r16
    1180:	80 83       	st	Z, r24
    1182:	91 83       	std	Z+1, r25	; 0x01
    1184:	a2 83       	std	Z+2, r26	; 0x02
    1186:	b3 83       	std	Z+3, r27	; 0x03
			secondNumber *= initialNumber;
    1188:	fe 01       	movw	r30, r28
    118a:	e2 5b       	subi	r30, 0xB2	; 178
    118c:	ff 4f       	sbci	r31, 0xFF	; 255
    118e:	80 81       	ld	r24, Z
    1190:	91 81       	ldd	r25, Z+1	; 0x01
    1192:	cc 01       	movw	r24, r24
    1194:	a0 e0       	ldi	r26, 0x00	; 0
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	bc 01       	movw	r22, r24
    119a:	cd 01       	movw	r24, r26
    119c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    11a0:	dc 01       	movw	r26, r24
    11a2:	cb 01       	movw	r24, r22
    11a4:	fe 01       	movw	r30, r28
    11a6:	e6 5b       	subi	r30, 0xB6	; 182
    11a8:	ff 4f       	sbci	r31, 0xFF	; 255
    11aa:	bc 01       	movw	r22, r24
    11ac:	cd 01       	movw	r24, r26
    11ae:	20 81       	ld	r18, Z
    11b0:	31 81       	ldd	r19, Z+1	; 0x01
    11b2:	42 81       	ldd	r20, Z+2	; 0x02
    11b4:	53 81       	ldd	r21, Z+3	; 0x03
    11b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11ba:	dc 01       	movw	r26, r24
    11bc:	cb 01       	movw	r24, r22
    11be:	8e 01       	movw	r16, r28
    11c0:	02 5b       	subi	r16, 0xB2	; 178
    11c2:	1f 4f       	sbci	r17, 0xFF	; 255
    11c4:	bc 01       	movw	r22, r24
    11c6:	cd 01       	movw	r24, r26
    11c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11cc:	dc 01       	movw	r26, r24
    11ce:	cb 01       	movw	r24, r22
    11d0:	f8 01       	movw	r30, r16
    11d2:	91 83       	std	Z+1, r25	; 0x01
    11d4:	80 83       	st	Z, r24
			secondNumber +=  CharacterPressed;
    11d6:	fe 01       	movw	r30, r28
    11d8:	ee 5a       	subi	r30, 0xAE	; 174
    11da:	ff 4f       	sbci	r31, 0xFF	; 255
    11dc:	80 81       	ld	r24, Z
    11de:	28 2f       	mov	r18, r24
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	de 01       	movw	r26, r28
    11e4:	a2 5b       	subi	r26, 0xB2	; 178
    11e6:	bf 4f       	sbci	r27, 0xFF	; 255
    11e8:	fe 01       	movw	r30, r28
    11ea:	e2 5b       	subi	r30, 0xB2	; 178
    11ec:	ff 4f       	sbci	r31, 0xFF	; 255
    11ee:	80 81       	ld	r24, Z
    11f0:	91 81       	ldd	r25, Z+1	; 0x01
    11f2:	82 0f       	add	r24, r18
    11f4:	93 1f       	adc	r25, r19
    11f6:	8d 93       	st	X+, r24
    11f8:	9c 93       	st	X, r25
			CharacterPressed = KEYPAD_getPressedKey();
    11fa:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <KEYPAD_getPressedKey>
    11fe:	fe 01       	movw	r30, r28
    1200:	ee 5a       	subi	r30, 0xAE	; 174
    1202:	ff 4f       	sbci	r31, 0xFF	; 255
    1204:	80 83       	st	Z, r24
		}

		secondNumber = 0;
		initialNumber = 0.1;
		CharacterPressed = KEYPAD_getPressedKey();
		while((CharacterPressed >= 0) && (CharacterPressed <= 9))
    1206:	fe 01       	movw	r30, r28
    1208:	ee 5a       	subi	r30, 0xAE	; 174
    120a:	ff 4f       	sbci	r31, 0xFF	; 255
    120c:	80 81       	ld	r24, Z
    120e:	8a 30       	cpi	r24, 0x0A	; 10
    1210:	08 f4       	brcc	.+2      	; 0x1214 <main+0x54e>
    1212:	29 cf       	rjmp	.-430    	; 0x1066 <main+0x3a0>
			secondNumber *= initialNumber;
			secondNumber +=  CharacterPressed;
			CharacterPressed = KEYPAD_getPressedKey();
		}

		switch(operator)
    1214:	fe 01       	movw	r30, r28
    1216:	e7 5b       	subi	r30, 0xB7	; 183
    1218:	ff 4f       	sbci	r31, 0xFF	; 255
    121a:	80 81       	ld	r24, Z
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	65 96       	adiw	r28, 0x15	; 21
    1222:	3f af       	std	Y+63, r19	; 0x3f
    1224:	2e af       	std	Y+62, r18	; 0x3e
    1226:	65 97       	sbiw	r28, 0x15	; 21
    1228:	65 96       	adiw	r28, 0x15	; 21
    122a:	6e ad       	ldd	r22, Y+62	; 0x3e
    122c:	7f ad       	ldd	r23, Y+63	; 0x3f
    122e:	65 97       	sbiw	r28, 0x15	; 21
    1230:	6b 32       	cpi	r22, 0x2B	; 43
    1232:	71 05       	cpc	r23, r1
    1234:	f9 f0       	breq	.+62     	; 0x1274 <main+0x5ae>
    1236:	65 96       	adiw	r28, 0x15	; 21
    1238:	8e ad       	ldd	r24, Y+62	; 0x3e
    123a:	9f ad       	ldd	r25, Y+63	; 0x3f
    123c:	65 97       	sbiw	r28, 0x15	; 21
    123e:	8c 32       	cpi	r24, 0x2C	; 44
    1240:	91 05       	cpc	r25, r1
    1242:	44 f4       	brge	.+16     	; 0x1254 <main+0x58e>
    1244:	65 96       	adiw	r28, 0x15	; 21
    1246:	ee ad       	ldd	r30, Y+62	; 0x3e
    1248:	ff ad       	ldd	r31, Y+63	; 0x3f
    124a:	65 97       	sbiw	r28, 0x15	; 21
    124c:	ea 32       	cpi	r30, 0x2A	; 42
    124e:	f1 05       	cpc	r31, r1
    1250:	d9 f1       	breq	.+118    	; 0x12c8 <main+0x602>
    1252:	69 c0       	rjmp	.+210    	; 0x1326 <main+0x660>
    1254:	65 96       	adiw	r28, 0x15	; 21
    1256:	2e ad       	ldd	r18, Y+62	; 0x3e
    1258:	3f ad       	ldd	r19, Y+63	; 0x3f
    125a:	65 97       	sbiw	r28, 0x15	; 21
    125c:	2d 32       	cpi	r18, 0x2D	; 45
    125e:	31 05       	cpc	r19, r1
    1260:	e9 f0       	breq	.+58     	; 0x129c <main+0x5d6>
    1262:	65 96       	adiw	r28, 0x15	; 21
    1264:	6e ad       	ldd	r22, Y+62	; 0x3e
    1266:	7f ad       	ldd	r23, Y+63	; 0x3f
    1268:	65 97       	sbiw	r28, 0x15	; 21
    126a:	6f 32       	cpi	r22, 0x2F	; 47
    126c:	71 05       	cpc	r23, r1
    126e:	09 f4       	brne	.+2      	; 0x1272 <main+0x5ac>
    1270:	45 c0       	rjmp	.+138    	; 0x12fc <main+0x636>
    1272:	59 c0       	rjmp	.+178    	; 0x1326 <main+0x660>
		{
		case '+':
			result = firstNumber + secondNumber;
    1274:	ae 01       	movw	r20, r28
    1276:	49 5b       	subi	r20, 0xB9	; 185
    1278:	5f 4f       	sbci	r21, 0xFF	; 255
    127a:	fe 01       	movw	r30, r28
    127c:	e0 5b       	subi	r30, 0xB0	; 176
    127e:	ff 4f       	sbci	r31, 0xFF	; 255
    1280:	de 01       	movw	r26, r28
    1282:	a2 5b       	subi	r26, 0xB2	; 178
    1284:	bf 4f       	sbci	r27, 0xFF	; 255
    1286:	20 81       	ld	r18, Z
    1288:	31 81       	ldd	r19, Z+1	; 0x01
    128a:	8d 91       	ld	r24, X+
    128c:	9c 91       	ld	r25, X
    128e:	11 97       	sbiw	r26, 0x01	; 1
    1290:	82 0f       	add	r24, r18
    1292:	93 1f       	adc	r25, r19
    1294:	fa 01       	movw	r30, r20
    1296:	91 83       	std	Z+1, r25	; 0x01
    1298:	80 83       	st	Z, r24
    129a:	45 c0       	rjmp	.+138    	; 0x1326 <main+0x660>
			break;

		case '-':
			result = firstNumber - secondNumber;
    129c:	ae 01       	movw	r20, r28
    129e:	49 5b       	subi	r20, 0xB9	; 185
    12a0:	5f 4f       	sbci	r21, 0xFF	; 255
    12a2:	fe 01       	movw	r30, r28
    12a4:	e0 5b       	subi	r30, 0xB0	; 176
    12a6:	ff 4f       	sbci	r31, 0xFF	; 255
    12a8:	de 01       	movw	r26, r28
    12aa:	a2 5b       	subi	r26, 0xB2	; 178
    12ac:	bf 4f       	sbci	r27, 0xFF	; 255
    12ae:	20 81       	ld	r18, Z
    12b0:	31 81       	ldd	r19, Z+1	; 0x01
    12b2:	8d 91       	ld	r24, X+
    12b4:	9c 91       	ld	r25, X
    12b6:	11 97       	sbiw	r26, 0x01	; 1
    12b8:	b9 01       	movw	r22, r18
    12ba:	68 1b       	sub	r22, r24
    12bc:	79 0b       	sbc	r23, r25
    12be:	cb 01       	movw	r24, r22
    12c0:	fa 01       	movw	r30, r20
    12c2:	91 83       	std	Z+1, r25	; 0x01
    12c4:	80 83       	st	Z, r24
    12c6:	2f c0       	rjmp	.+94     	; 0x1326 <main+0x660>
			break;

		case '*':
			result = firstNumber * secondNumber;
    12c8:	ae 01       	movw	r20, r28
    12ca:	49 5b       	subi	r20, 0xB9	; 185
    12cc:	5f 4f       	sbci	r21, 0xFF	; 255
    12ce:	fe 01       	movw	r30, r28
    12d0:	e0 5b       	subi	r30, 0xB0	; 176
    12d2:	ff 4f       	sbci	r31, 0xFF	; 255
    12d4:	de 01       	movw	r26, r28
    12d6:	a2 5b       	subi	r26, 0xB2	; 178
    12d8:	bf 4f       	sbci	r27, 0xFF	; 255
    12da:	20 81       	ld	r18, Z
    12dc:	31 81       	ldd	r19, Z+1	; 0x01
    12de:	8d 91       	ld	r24, X+
    12e0:	9c 91       	ld	r25, X
    12e2:	11 97       	sbiw	r26, 0x01	; 1
    12e4:	bc 01       	movw	r22, r24
    12e6:	26 9f       	mul	r18, r22
    12e8:	c0 01       	movw	r24, r0
    12ea:	27 9f       	mul	r18, r23
    12ec:	90 0d       	add	r25, r0
    12ee:	36 9f       	mul	r19, r22
    12f0:	90 0d       	add	r25, r0
    12f2:	11 24       	eor	r1, r1
    12f4:	fa 01       	movw	r30, r20
    12f6:	91 83       	std	Z+1, r25	; 0x01
    12f8:	80 83       	st	Z, r24
    12fa:	15 c0       	rjmp	.+42     	; 0x1326 <main+0x660>
			break;

		case '/':
			result = firstNumber / secondNumber;
    12fc:	8e 01       	movw	r16, r28
    12fe:	09 5b       	subi	r16, 0xB9	; 185
    1300:	1f 4f       	sbci	r17, 0xFF	; 255
    1302:	fe 01       	movw	r30, r28
    1304:	e0 5b       	subi	r30, 0xB0	; 176
    1306:	ff 4f       	sbci	r31, 0xFF	; 255
    1308:	de 01       	movw	r26, r28
    130a:	a2 5b       	subi	r26, 0xB2	; 178
    130c:	bf 4f       	sbci	r27, 0xFF	; 255
    130e:	80 81       	ld	r24, Z
    1310:	91 81       	ldd	r25, Z+1	; 0x01
    1312:	2d 91       	ld	r18, X+
    1314:	3c 91       	ld	r19, X
    1316:	11 97       	sbiw	r26, 0x01	; 1
    1318:	b9 01       	movw	r22, r18
    131a:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <__udivmodhi4>
    131e:	cb 01       	movw	r24, r22
    1320:	f8 01       	movw	r30, r16
    1322:	91 83       	std	Z+1, r25	; 0x01
    1324:	80 83       	st	Z, r24
			break;

		}

		if(CharacterPressed == '=')
    1326:	fe 01       	movw	r30, r28
    1328:	ee 5a       	subi	r30, 0xAE	; 174
    132a:	ff 4f       	sbci	r31, 0xFF	; 255
    132c:	80 81       	ld	r24, Z
    132e:	8d 33       	cpi	r24, 0x3D	; 61
    1330:	09 f0       	breq	.+2      	; 0x1334 <main+0x66e>
    1332:	82 c0       	rjmp	.+260    	; 0x1438 <main+0x772>
		{

			LCD_clearScreen();
    1334:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <LCD_clearScreen>
			LCD_moveCursor(0, 0);
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	60 e0       	ldi	r22, 0x00	; 0
    133c:	0e 94 d5 19 	call	0x33aa	; 0x33aa <LCD_moveCursor>
			LCD_displayCharacter('=');
    1340:	8d e3       	ldi	r24, 0x3D	; 61
    1342:	0e 94 31 15 	call	0x2a62	; 0x2a62 <LCD_displayCharacter>
			LCD_intgerToString(result);
    1346:	fe 01       	movw	r30, r28
    1348:	e9 5b       	subi	r30, 0xB9	; 185
    134a:	ff 4f       	sbci	r31, 0xFF	; 255
    134c:	80 81       	ld	r24, Z
    134e:	91 81       	ldd	r25, Z+1	; 0x01
    1350:	0e 94 30 1a 	call	0x3460	; 0x3460 <LCD_intgerToString>
    1354:	80 e0       	ldi	r24, 0x00	; 0
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	aa ef       	ldi	r26, 0xFA	; 250
    135a:	b3 e4       	ldi	r27, 0x43	; 67
    135c:	89 8f       	std	Y+25, r24	; 0x19
    135e:	9a 8f       	std	Y+26, r25	; 0x1a
    1360:	ab 8f       	std	Y+27, r26	; 0x1b
    1362:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1364:	69 8d       	ldd	r22, Y+25	; 0x19
    1366:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1368:	8b 8d       	ldd	r24, Y+27	; 0x1b
    136a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	4a e7       	ldi	r20, 0x7A	; 122
    1372:	55 e4       	ldi	r21, 0x45	; 69
    1374:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1378:	dc 01       	movw	r26, r24
    137a:	cb 01       	movw	r24, r22
    137c:	8d 8b       	std	Y+21, r24	; 0x15
    137e:	9e 8b       	std	Y+22, r25	; 0x16
    1380:	af 8b       	std	Y+23, r26	; 0x17
    1382:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1384:	6d 89       	ldd	r22, Y+21	; 0x15
    1386:	7e 89       	ldd	r23, Y+22	; 0x16
    1388:	8f 89       	ldd	r24, Y+23	; 0x17
    138a:	98 8d       	ldd	r25, Y+24	; 0x18
    138c:	20 e0       	ldi	r18, 0x00	; 0
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	40 e8       	ldi	r20, 0x80	; 128
    1392:	5f e3       	ldi	r21, 0x3F	; 63
    1394:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1398:	88 23       	and	r24, r24
    139a:	2c f4       	brge	.+10     	; 0x13a6 <main+0x6e0>
		__ticks = 1;
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	9c 8b       	std	Y+20, r25	; 0x14
    13a2:	8b 8b       	std	Y+19, r24	; 0x13
    13a4:	3f c0       	rjmp	.+126    	; 0x1424 <main+0x75e>
	else if (__tmp > 65535)
    13a6:	6d 89       	ldd	r22, Y+21	; 0x15
    13a8:	7e 89       	ldd	r23, Y+22	; 0x16
    13aa:	8f 89       	ldd	r24, Y+23	; 0x17
    13ac:	98 8d       	ldd	r25, Y+24	; 0x18
    13ae:	20 e0       	ldi	r18, 0x00	; 0
    13b0:	3f ef       	ldi	r19, 0xFF	; 255
    13b2:	4f e7       	ldi	r20, 0x7F	; 127
    13b4:	57 e4       	ldi	r21, 0x47	; 71
    13b6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    13ba:	18 16       	cp	r1, r24
    13bc:	4c f5       	brge	.+82     	; 0x1410 <main+0x74a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13be:	69 8d       	ldd	r22, Y+25	; 0x19
    13c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13c6:	20 e0       	ldi	r18, 0x00	; 0
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	40 e2       	ldi	r20, 0x20	; 32
    13cc:	51 e4       	ldi	r21, 0x41	; 65
    13ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13d2:	dc 01       	movw	r26, r24
    13d4:	cb 01       	movw	r24, r22
    13d6:	bc 01       	movw	r22, r24
    13d8:	cd 01       	movw	r24, r26
    13da:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13de:	dc 01       	movw	r26, r24
    13e0:	cb 01       	movw	r24, r22
    13e2:	9c 8b       	std	Y+20, r25	; 0x14
    13e4:	8b 8b       	std	Y+19, r24	; 0x13
    13e6:	0f c0       	rjmp	.+30     	; 0x1406 <main+0x740>
    13e8:	80 e9       	ldi	r24, 0x90	; 144
    13ea:	91 e0       	ldi	r25, 0x01	; 1
    13ec:	9a 8b       	std	Y+18, r25	; 0x12
    13ee:	89 8b       	std	Y+17, r24	; 0x11
    13f0:	89 89       	ldd	r24, Y+17	; 0x11
    13f2:	9a 89       	ldd	r25, Y+18	; 0x12
    13f4:	01 97       	sbiw	r24, 0x01	; 1
    13f6:	f1 f7       	brne	.-4      	; 0x13f4 <main+0x72e>
    13f8:	9a 8b       	std	Y+18, r25	; 0x12
    13fa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13fc:	8b 89       	ldd	r24, Y+19	; 0x13
    13fe:	9c 89       	ldd	r25, Y+20	; 0x14
    1400:	01 97       	sbiw	r24, 0x01	; 1
    1402:	9c 8b       	std	Y+20, r25	; 0x14
    1404:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1406:	8b 89       	ldd	r24, Y+19	; 0x13
    1408:	9c 89       	ldd	r25, Y+20	; 0x14
    140a:	00 97       	sbiw	r24, 0x00	; 0
    140c:	69 f7       	brne	.-38     	; 0x13e8 <main+0x722>
    140e:	14 c0       	rjmp	.+40     	; 0x1438 <main+0x772>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1410:	6d 89       	ldd	r22, Y+21	; 0x15
    1412:	7e 89       	ldd	r23, Y+22	; 0x16
    1414:	8f 89       	ldd	r24, Y+23	; 0x17
    1416:	98 8d       	ldd	r25, Y+24	; 0x18
    1418:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    141c:	dc 01       	movw	r26, r24
    141e:	cb 01       	movw	r24, r22
    1420:	9c 8b       	std	Y+20, r25	; 0x14
    1422:	8b 8b       	std	Y+19, r24	; 0x13
    1424:	8b 89       	ldd	r24, Y+19	; 0x13
    1426:	9c 89       	ldd	r25, Y+20	; 0x14
    1428:	98 8b       	std	Y+16, r25	; 0x10
    142a:	8f 87       	std	Y+15, r24	; 0x0f
    142c:	8f 85       	ldd	r24, Y+15	; 0x0f
    142e:	98 89       	ldd	r25, Y+16	; 0x10
    1430:	01 97       	sbiw	r24, 0x01	; 1
    1432:	f1 f7       	brne	.-4      	; 0x1430 <main+0x76a>
    1434:	98 8b       	std	Y+16, r25	; 0x10
    1436:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);
		}

		firstNumber = result;
    1438:	de 01       	movw	r26, r28
    143a:	a0 5b       	subi	r26, 0xB0	; 176
    143c:	bf 4f       	sbci	r27, 0xFF	; 255
    143e:	fe 01       	movw	r30, r28
    1440:	e9 5b       	subi	r30, 0xB9	; 185
    1442:	ff 4f       	sbci	r31, 0xFF	; 255
    1444:	80 81       	ld	r24, Z
    1446:	91 81       	ldd	r25, Z+1	; 0x01
    1448:	8d 93       	st	X+, r24
    144a:	9c 93       	st	X, r25

		CharacterPressed = KEYPAD_getPressedKey();
    144c:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <KEYPAD_getPressedKey>
    1450:	fe 01       	movw	r30, r28
    1452:	ee 5a       	subi	r30, 0xAE	; 174
    1454:	ff 4f       	sbci	r31, 0xFF	; 255
    1456:	80 83       	st	Z, r24
		if(CharacterPressed == 13)
    1458:	fe 01       	movw	r30, r28
    145a:	ee 5a       	subi	r30, 0xAE	; 174
    145c:	ff 4f       	sbci	r31, 0xFF	; 255
    145e:	80 81       	ld	r24, Z
    1460:	8d 30       	cpi	r24, 0x0D	; 13
    1462:	09 f0       	breq	.+2      	; 0x1466 <main+0x7a0>
    1464:	50 cd       	rjmp	.-1376   	; 0xf06 <main+0x240>
		{
			LCD_clearScreen();
    1466:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <LCD_clearScreen>
			LCD_moveCursor(0, 0);
    146a:	80 e0       	ldi	r24, 0x00	; 0
    146c:	60 e0       	ldi	r22, 0x00	; 0
    146e:	0e 94 d5 19 	call	0x33aa	; 0x33aa <LCD_moveCursor>
			firstNumber = 0;
    1472:	fe 01       	movw	r30, r28
    1474:	e0 5b       	subi	r30, 0xB0	; 176
    1476:	ff 4f       	sbci	r31, 0xFF	; 255
    1478:	11 82       	std	Z+1, r1	; 0x01
    147a:	10 82       	st	Z, r1
			secondNumber = 0;
    147c:	fe 01       	movw	r30, r28
    147e:	e2 5b       	subi	r30, 0xB2	; 178
    1480:	ff 4f       	sbci	r31, 0xFF	; 255
    1482:	11 82       	std	Z+1, r1	; 0x01
    1484:	10 82       	st	Z, r1
			result = 0;
    1486:	fe 01       	movw	r30, r28
    1488:	e9 5b       	subi	r30, 0xB9	; 185
    148a:	ff 4f       	sbci	r31, 0xFF	; 255
    148c:	11 82       	std	Z+1, r1	; 0x01
    148e:	10 82       	st	Z, r1

			initialNumber = 0.1;
    1490:	fe 01       	movw	r30, r28
    1492:	e6 5b       	subi	r30, 0xB6	; 182
    1494:	ff 4f       	sbci	r31, 0xFF	; 255
    1496:	8d ec       	ldi	r24, 0xCD	; 205
    1498:	9c ec       	ldi	r25, 0xCC	; 204
    149a:	ac ec       	ldi	r26, 0xCC	; 204
    149c:	bd e3       	ldi	r27, 0x3D	; 61
    149e:	80 83       	st	Z, r24
    14a0:	91 83       	std	Z+1, r25	; 0x01
    14a2:	a2 83       	std	Z+2, r26	; 0x02
    14a4:	b3 83       	std	Z+3, r27	; 0x03
			CharacterPressed = KEYPAD_getPressedKey();
    14a6:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <KEYPAD_getPressedKey>
    14aa:	fe 01       	movw	r30, r28
    14ac:	ee 5a       	subi	r30, 0xAE	; 174
    14ae:	ff 4f       	sbci	r31, 0xFF	; 255
    14b0:	80 83       	st	Z, r24
    14b2:	d0 c0       	rjmp	.+416    	; 0x1654 <main+0x98e>
			while((CharacterPressed >= 0) && (CharacterPressed <= 9))
			{
				LCD_intgerToString(CharacterPressed);
    14b4:	fe 01       	movw	r30, r28
    14b6:	ee 5a       	subi	r30, 0xAE	; 174
    14b8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ba:	80 81       	ld	r24, Z
    14bc:	88 2f       	mov	r24, r24
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	0e 94 30 1a 	call	0x3460	; 0x3460 <LCD_intgerToString>
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	aa ef       	ldi	r26, 0xFA	; 250
    14ca:	b3 e4       	ldi	r27, 0x43	; 67
    14cc:	8b 87       	std	Y+11, r24	; 0x0b
    14ce:	9c 87       	std	Y+12, r25	; 0x0c
    14d0:	ad 87       	std	Y+13, r26	; 0x0d
    14d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    14d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    14d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    14da:	9e 85       	ldd	r25, Y+14	; 0x0e
    14dc:	20 e0       	ldi	r18, 0x00	; 0
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	4a e7       	ldi	r20, 0x7A	; 122
    14e2:	55 e4       	ldi	r21, 0x45	; 69
    14e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14e8:	dc 01       	movw	r26, r24
    14ea:	cb 01       	movw	r24, r22
    14ec:	8f 83       	std	Y+7, r24	; 0x07
    14ee:	98 87       	std	Y+8, r25	; 0x08
    14f0:	a9 87       	std	Y+9, r26	; 0x09
    14f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14f4:	6f 81       	ldd	r22, Y+7	; 0x07
    14f6:	78 85       	ldd	r23, Y+8	; 0x08
    14f8:	89 85       	ldd	r24, Y+9	; 0x09
    14fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    14fc:	20 e0       	ldi	r18, 0x00	; 0
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	40 e8       	ldi	r20, 0x80	; 128
    1502:	5f e3       	ldi	r21, 0x3F	; 63
    1504:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1508:	88 23       	and	r24, r24
    150a:	2c f4       	brge	.+10     	; 0x1516 <main+0x850>
		__ticks = 1;
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	9e 83       	std	Y+6, r25	; 0x06
    1512:	8d 83       	std	Y+5, r24	; 0x05
    1514:	3f c0       	rjmp	.+126    	; 0x1594 <main+0x8ce>
	else if (__tmp > 65535)
    1516:	6f 81       	ldd	r22, Y+7	; 0x07
    1518:	78 85       	ldd	r23, Y+8	; 0x08
    151a:	89 85       	ldd	r24, Y+9	; 0x09
    151c:	9a 85       	ldd	r25, Y+10	; 0x0a
    151e:	20 e0       	ldi	r18, 0x00	; 0
    1520:	3f ef       	ldi	r19, 0xFF	; 255
    1522:	4f e7       	ldi	r20, 0x7F	; 127
    1524:	57 e4       	ldi	r21, 0x47	; 71
    1526:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    152a:	18 16       	cp	r1, r24
    152c:	4c f5       	brge	.+82     	; 0x1580 <main+0x8ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    152e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1530:	7c 85       	ldd	r23, Y+12	; 0x0c
    1532:	8d 85       	ldd	r24, Y+13	; 0x0d
    1534:	9e 85       	ldd	r25, Y+14	; 0x0e
    1536:	20 e0       	ldi	r18, 0x00	; 0
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	40 e2       	ldi	r20, 0x20	; 32
    153c:	51 e4       	ldi	r21, 0x41	; 65
    153e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1542:	dc 01       	movw	r26, r24
    1544:	cb 01       	movw	r24, r22
    1546:	bc 01       	movw	r22, r24
    1548:	cd 01       	movw	r24, r26
    154a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    154e:	dc 01       	movw	r26, r24
    1550:	cb 01       	movw	r24, r22
    1552:	9e 83       	std	Y+6, r25	; 0x06
    1554:	8d 83       	std	Y+5, r24	; 0x05
    1556:	0f c0       	rjmp	.+30     	; 0x1576 <main+0x8b0>
    1558:	80 e9       	ldi	r24, 0x90	; 144
    155a:	91 e0       	ldi	r25, 0x01	; 1
    155c:	9c 83       	std	Y+4, r25	; 0x04
    155e:	8b 83       	std	Y+3, r24	; 0x03
    1560:	8b 81       	ldd	r24, Y+3	; 0x03
    1562:	9c 81       	ldd	r25, Y+4	; 0x04
    1564:	01 97       	sbiw	r24, 0x01	; 1
    1566:	f1 f7       	brne	.-4      	; 0x1564 <main+0x89e>
    1568:	9c 83       	std	Y+4, r25	; 0x04
    156a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    156c:	8d 81       	ldd	r24, Y+5	; 0x05
    156e:	9e 81       	ldd	r25, Y+6	; 0x06
    1570:	01 97       	sbiw	r24, 0x01	; 1
    1572:	9e 83       	std	Y+6, r25	; 0x06
    1574:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1576:	8d 81       	ldd	r24, Y+5	; 0x05
    1578:	9e 81       	ldd	r25, Y+6	; 0x06
    157a:	00 97       	sbiw	r24, 0x00	; 0
    157c:	69 f7       	brne	.-38     	; 0x1558 <main+0x892>
    157e:	14 c0       	rjmp	.+40     	; 0x15a8 <main+0x8e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1580:	6f 81       	ldd	r22, Y+7	; 0x07
    1582:	78 85       	ldd	r23, Y+8	; 0x08
    1584:	89 85       	ldd	r24, Y+9	; 0x09
    1586:	9a 85       	ldd	r25, Y+10	; 0x0a
    1588:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    158c:	dc 01       	movw	r26, r24
    158e:	cb 01       	movw	r24, r22
    1590:	9e 83       	std	Y+6, r25	; 0x06
    1592:	8d 83       	std	Y+5, r24	; 0x05
    1594:	8d 81       	ldd	r24, Y+5	; 0x05
    1596:	9e 81       	ldd	r25, Y+6	; 0x06
    1598:	9a 83       	std	Y+2, r25	; 0x02
    159a:	89 83       	std	Y+1, r24	; 0x01
    159c:	89 81       	ldd	r24, Y+1	; 0x01
    159e:	9a 81       	ldd	r25, Y+2	; 0x02
    15a0:	01 97       	sbiw	r24, 0x01	; 1
    15a2:	f1 f7       	brne	.-4      	; 0x15a0 <main+0x8da>
    15a4:	9a 83       	std	Y+2, r25	; 0x02
    15a6:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(500);
				initialNumber *= 10;
    15a8:	8e 01       	movw	r16, r28
    15aa:	06 5b       	subi	r16, 0xB6	; 182
    15ac:	1f 4f       	sbci	r17, 0xFF	; 255
    15ae:	fe 01       	movw	r30, r28
    15b0:	e6 5b       	subi	r30, 0xB6	; 182
    15b2:	ff 4f       	sbci	r31, 0xFF	; 255
    15b4:	60 81       	ld	r22, Z
    15b6:	71 81       	ldd	r23, Z+1	; 0x01
    15b8:	82 81       	ldd	r24, Z+2	; 0x02
    15ba:	93 81       	ldd	r25, Z+3	; 0x03
    15bc:	20 e0       	ldi	r18, 0x00	; 0
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	40 e2       	ldi	r20, 0x20	; 32
    15c2:	51 e4       	ldi	r21, 0x41	; 65
    15c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15c8:	dc 01       	movw	r26, r24
    15ca:	cb 01       	movw	r24, r22
    15cc:	f8 01       	movw	r30, r16
    15ce:	80 83       	st	Z, r24
    15d0:	91 83       	std	Z+1, r25	; 0x01
    15d2:	a2 83       	std	Z+2, r26	; 0x02
    15d4:	b3 83       	std	Z+3, r27	; 0x03
				firstNumber *= initialNumber;
    15d6:	fe 01       	movw	r30, r28
    15d8:	e0 5b       	subi	r30, 0xB0	; 176
    15da:	ff 4f       	sbci	r31, 0xFF	; 255
    15dc:	80 81       	ld	r24, Z
    15de:	91 81       	ldd	r25, Z+1	; 0x01
    15e0:	cc 01       	movw	r24, r24
    15e2:	a0 e0       	ldi	r26, 0x00	; 0
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	bc 01       	movw	r22, r24
    15e8:	cd 01       	movw	r24, r26
    15ea:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    15ee:	dc 01       	movw	r26, r24
    15f0:	cb 01       	movw	r24, r22
    15f2:	fe 01       	movw	r30, r28
    15f4:	e6 5b       	subi	r30, 0xB6	; 182
    15f6:	ff 4f       	sbci	r31, 0xFF	; 255
    15f8:	bc 01       	movw	r22, r24
    15fa:	cd 01       	movw	r24, r26
    15fc:	20 81       	ld	r18, Z
    15fe:	31 81       	ldd	r19, Z+1	; 0x01
    1600:	42 81       	ldd	r20, Z+2	; 0x02
    1602:	53 81       	ldd	r21, Z+3	; 0x03
    1604:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1608:	dc 01       	movw	r26, r24
    160a:	cb 01       	movw	r24, r22
    160c:	8e 01       	movw	r16, r28
    160e:	00 5b       	subi	r16, 0xB0	; 176
    1610:	1f 4f       	sbci	r17, 0xFF	; 255
    1612:	bc 01       	movw	r22, r24
    1614:	cd 01       	movw	r24, r26
    1616:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    161a:	dc 01       	movw	r26, r24
    161c:	cb 01       	movw	r24, r22
    161e:	f8 01       	movw	r30, r16
    1620:	91 83       	std	Z+1, r25	; 0x01
    1622:	80 83       	st	Z, r24
				firstNumber +=  CharacterPressed;
    1624:	fe 01       	movw	r30, r28
    1626:	ee 5a       	subi	r30, 0xAE	; 174
    1628:	ff 4f       	sbci	r31, 0xFF	; 255
    162a:	80 81       	ld	r24, Z
    162c:	28 2f       	mov	r18, r24
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	de 01       	movw	r26, r28
    1632:	a0 5b       	subi	r26, 0xB0	; 176
    1634:	bf 4f       	sbci	r27, 0xFF	; 255
    1636:	fe 01       	movw	r30, r28
    1638:	e0 5b       	subi	r30, 0xB0	; 176
    163a:	ff 4f       	sbci	r31, 0xFF	; 255
    163c:	80 81       	ld	r24, Z
    163e:	91 81       	ldd	r25, Z+1	; 0x01
    1640:	82 0f       	add	r24, r18
    1642:	93 1f       	adc	r25, r19
    1644:	8d 93       	st	X+, r24
    1646:	9c 93       	st	X, r25
				CharacterPressed = KEYPAD_getPressedKey();
    1648:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <KEYPAD_getPressedKey>
    164c:	fe 01       	movw	r30, r28
    164e:	ee 5a       	subi	r30, 0xAE	; 174
    1650:	ff 4f       	sbci	r31, 0xFF	; 255
    1652:	80 83       	st	Z, r24
			secondNumber = 0;
			result = 0;

			initialNumber = 0.1;
			CharacterPressed = KEYPAD_getPressedKey();
			while((CharacterPressed >= 0) && (CharacterPressed <= 9))
    1654:	fe 01       	movw	r30, r28
    1656:	ee 5a       	subi	r30, 0xAE	; 174
    1658:	ff 4f       	sbci	r31, 0xFF	; 255
    165a:	80 81       	ld	r24, Z
    165c:	8a 30       	cpi	r24, 0x0A	; 10
    165e:	08 f4       	brcc	.+2      	; 0x1662 <main+0x99c>
    1660:	29 cf       	rjmp	.-430    	; 0x14b4 <main+0x7ee>
    1662:	51 cc       	rjmp	.-1886   	; 0xf06 <main+0x240>

00001664 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1664:	df 93       	push	r29
    1666:	cf 93       	push	r28
    1668:	00 d0       	rcall	.+0      	; 0x166a <GPIO_setupPinDirection+0x6>
    166a:	00 d0       	rcall	.+0      	; 0x166c <GPIO_setupPinDirection+0x8>
    166c:	0f 92       	push	r0
    166e:	cd b7       	in	r28, 0x3d	; 61
    1670:	de b7       	in	r29, 0x3e	; 62
    1672:	89 83       	std	Y+1, r24	; 0x01
    1674:	6a 83       	std	Y+2, r22	; 0x02
    1676:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1678:	8a 81       	ldd	r24, Y+2	; 0x02
    167a:	88 30       	cpi	r24, 0x08	; 8
    167c:	08 f0       	brcs	.+2      	; 0x1680 <GPIO_setupPinDirection+0x1c>
    167e:	d5 c0       	rjmp	.+426    	; 0x182a <GPIO_setupPinDirection+0x1c6>
    1680:	89 81       	ldd	r24, Y+1	; 0x01
    1682:	84 30       	cpi	r24, 0x04	; 4
    1684:	08 f0       	brcs	.+2      	; 0x1688 <GPIO_setupPinDirection+0x24>
    1686:	d1 c0       	rjmp	.+418    	; 0x182a <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1688:	89 81       	ldd	r24, Y+1	; 0x01
    168a:	28 2f       	mov	r18, r24
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	3d 83       	std	Y+5, r19	; 0x05
    1690:	2c 83       	std	Y+4, r18	; 0x04
    1692:	8c 81       	ldd	r24, Y+4	; 0x04
    1694:	9d 81       	ldd	r25, Y+5	; 0x05
    1696:	81 30       	cpi	r24, 0x01	; 1
    1698:	91 05       	cpc	r25, r1
    169a:	09 f4       	brne	.+2      	; 0x169e <GPIO_setupPinDirection+0x3a>
    169c:	43 c0       	rjmp	.+134    	; 0x1724 <GPIO_setupPinDirection+0xc0>
    169e:	2c 81       	ldd	r18, Y+4	; 0x04
    16a0:	3d 81       	ldd	r19, Y+5	; 0x05
    16a2:	22 30       	cpi	r18, 0x02	; 2
    16a4:	31 05       	cpc	r19, r1
    16a6:	2c f4       	brge	.+10     	; 0x16b2 <GPIO_setupPinDirection+0x4e>
    16a8:	8c 81       	ldd	r24, Y+4	; 0x04
    16aa:	9d 81       	ldd	r25, Y+5	; 0x05
    16ac:	00 97       	sbiw	r24, 0x00	; 0
    16ae:	71 f0       	breq	.+28     	; 0x16cc <GPIO_setupPinDirection+0x68>
    16b0:	bc c0       	rjmp	.+376    	; 0x182a <GPIO_setupPinDirection+0x1c6>
    16b2:	2c 81       	ldd	r18, Y+4	; 0x04
    16b4:	3d 81       	ldd	r19, Y+5	; 0x05
    16b6:	22 30       	cpi	r18, 0x02	; 2
    16b8:	31 05       	cpc	r19, r1
    16ba:	09 f4       	brne	.+2      	; 0x16be <GPIO_setupPinDirection+0x5a>
    16bc:	5f c0       	rjmp	.+190    	; 0x177c <GPIO_setupPinDirection+0x118>
    16be:	8c 81       	ldd	r24, Y+4	; 0x04
    16c0:	9d 81       	ldd	r25, Y+5	; 0x05
    16c2:	83 30       	cpi	r24, 0x03	; 3
    16c4:	91 05       	cpc	r25, r1
    16c6:	09 f4       	brne	.+2      	; 0x16ca <GPIO_setupPinDirection+0x66>
    16c8:	85 c0       	rjmp	.+266    	; 0x17d4 <GPIO_setupPinDirection+0x170>
    16ca:	af c0       	rjmp	.+350    	; 0x182a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    16cc:	8b 81       	ldd	r24, Y+3	; 0x03
    16ce:	81 30       	cpi	r24, 0x01	; 1
    16d0:	a1 f4       	brne	.+40     	; 0x16fa <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    16d2:	aa e3       	ldi	r26, 0x3A	; 58
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	ea e3       	ldi	r30, 0x3A	; 58
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	48 2f       	mov	r20, r24
    16de:	8a 81       	ldd	r24, Y+2	; 0x02
    16e0:	28 2f       	mov	r18, r24
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	02 2e       	mov	r0, r18
    16ea:	02 c0       	rjmp	.+4      	; 0x16f0 <GPIO_setupPinDirection+0x8c>
    16ec:	88 0f       	add	r24, r24
    16ee:	99 1f       	adc	r25, r25
    16f0:	0a 94       	dec	r0
    16f2:	e2 f7       	brpl	.-8      	; 0x16ec <GPIO_setupPinDirection+0x88>
    16f4:	84 2b       	or	r24, r20
    16f6:	8c 93       	st	X, r24
    16f8:	98 c0       	rjmp	.+304    	; 0x182a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    16fa:	aa e3       	ldi	r26, 0x3A	; 58
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	ea e3       	ldi	r30, 0x3A	; 58
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	48 2f       	mov	r20, r24
    1706:	8a 81       	ldd	r24, Y+2	; 0x02
    1708:	28 2f       	mov	r18, r24
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	02 2e       	mov	r0, r18
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <GPIO_setupPinDirection+0xb4>
    1714:	88 0f       	add	r24, r24
    1716:	99 1f       	adc	r25, r25
    1718:	0a 94       	dec	r0
    171a:	e2 f7       	brpl	.-8      	; 0x1714 <GPIO_setupPinDirection+0xb0>
    171c:	80 95       	com	r24
    171e:	84 23       	and	r24, r20
    1720:	8c 93       	st	X, r24
    1722:	83 c0       	rjmp	.+262    	; 0x182a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1724:	8b 81       	ldd	r24, Y+3	; 0x03
    1726:	81 30       	cpi	r24, 0x01	; 1
    1728:	a1 f4       	brne	.+40     	; 0x1752 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    172a:	a7 e3       	ldi	r26, 0x37	; 55
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	e7 e3       	ldi	r30, 0x37	; 55
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	48 2f       	mov	r20, r24
    1736:	8a 81       	ldd	r24, Y+2	; 0x02
    1738:	28 2f       	mov	r18, r24
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	02 2e       	mov	r0, r18
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <GPIO_setupPinDirection+0xe4>
    1744:	88 0f       	add	r24, r24
    1746:	99 1f       	adc	r25, r25
    1748:	0a 94       	dec	r0
    174a:	e2 f7       	brpl	.-8      	; 0x1744 <GPIO_setupPinDirection+0xe0>
    174c:	84 2b       	or	r24, r20
    174e:	8c 93       	st	X, r24
    1750:	6c c0       	rjmp	.+216    	; 0x182a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1752:	a7 e3       	ldi	r26, 0x37	; 55
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	e7 e3       	ldi	r30, 0x37	; 55
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	48 2f       	mov	r20, r24
    175e:	8a 81       	ldd	r24, Y+2	; 0x02
    1760:	28 2f       	mov	r18, r24
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	02 2e       	mov	r0, r18
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <GPIO_setupPinDirection+0x10c>
    176c:	88 0f       	add	r24, r24
    176e:	99 1f       	adc	r25, r25
    1770:	0a 94       	dec	r0
    1772:	e2 f7       	brpl	.-8      	; 0x176c <GPIO_setupPinDirection+0x108>
    1774:	80 95       	com	r24
    1776:	84 23       	and	r24, r20
    1778:	8c 93       	st	X, r24
    177a:	57 c0       	rjmp	.+174    	; 0x182a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    177c:	8b 81       	ldd	r24, Y+3	; 0x03
    177e:	81 30       	cpi	r24, 0x01	; 1
    1780:	a1 f4       	brne	.+40     	; 0x17aa <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1782:	a4 e3       	ldi	r26, 0x34	; 52
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	e4 e3       	ldi	r30, 0x34	; 52
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	48 2f       	mov	r20, r24
    178e:	8a 81       	ldd	r24, Y+2	; 0x02
    1790:	28 2f       	mov	r18, r24
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	02 2e       	mov	r0, r18
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <GPIO_setupPinDirection+0x13c>
    179c:	88 0f       	add	r24, r24
    179e:	99 1f       	adc	r25, r25
    17a0:	0a 94       	dec	r0
    17a2:	e2 f7       	brpl	.-8      	; 0x179c <GPIO_setupPinDirection+0x138>
    17a4:	84 2b       	or	r24, r20
    17a6:	8c 93       	st	X, r24
    17a8:	40 c0       	rjmp	.+128    	; 0x182a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    17aa:	a4 e3       	ldi	r26, 0x34	; 52
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	e4 e3       	ldi	r30, 0x34	; 52
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	48 2f       	mov	r20, r24
    17b6:	8a 81       	ldd	r24, Y+2	; 0x02
    17b8:	28 2f       	mov	r18, r24
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	02 2e       	mov	r0, r18
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <GPIO_setupPinDirection+0x164>
    17c4:	88 0f       	add	r24, r24
    17c6:	99 1f       	adc	r25, r25
    17c8:	0a 94       	dec	r0
    17ca:	e2 f7       	brpl	.-8      	; 0x17c4 <GPIO_setupPinDirection+0x160>
    17cc:	80 95       	com	r24
    17ce:	84 23       	and	r24, r20
    17d0:	8c 93       	st	X, r24
    17d2:	2b c0       	rjmp	.+86     	; 0x182a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    17d4:	8b 81       	ldd	r24, Y+3	; 0x03
    17d6:	81 30       	cpi	r24, 0x01	; 1
    17d8:	a1 f4       	brne	.+40     	; 0x1802 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    17da:	a1 e3       	ldi	r26, 0x31	; 49
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	e1 e3       	ldi	r30, 0x31	; 49
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	48 2f       	mov	r20, r24
    17e6:	8a 81       	ldd	r24, Y+2	; 0x02
    17e8:	28 2f       	mov	r18, r24
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	02 2e       	mov	r0, r18
    17f2:	02 c0       	rjmp	.+4      	; 0x17f8 <GPIO_setupPinDirection+0x194>
    17f4:	88 0f       	add	r24, r24
    17f6:	99 1f       	adc	r25, r25
    17f8:	0a 94       	dec	r0
    17fa:	e2 f7       	brpl	.-8      	; 0x17f4 <GPIO_setupPinDirection+0x190>
    17fc:	84 2b       	or	r24, r20
    17fe:	8c 93       	st	X, r24
    1800:	14 c0       	rjmp	.+40     	; 0x182a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1802:	a1 e3       	ldi	r26, 0x31	; 49
    1804:	b0 e0       	ldi	r27, 0x00	; 0
    1806:	e1 e3       	ldi	r30, 0x31	; 49
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	48 2f       	mov	r20, r24
    180e:	8a 81       	ldd	r24, Y+2	; 0x02
    1810:	28 2f       	mov	r18, r24
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	02 2e       	mov	r0, r18
    181a:	02 c0       	rjmp	.+4      	; 0x1820 <GPIO_setupPinDirection+0x1bc>
    181c:	88 0f       	add	r24, r24
    181e:	99 1f       	adc	r25, r25
    1820:	0a 94       	dec	r0
    1822:	e2 f7       	brpl	.-8      	; 0x181c <GPIO_setupPinDirection+0x1b8>
    1824:	80 95       	com	r24
    1826:	84 23       	and	r24, r20
    1828:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    182a:	0f 90       	pop	r0
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	0f 90       	pop	r0
    1832:	0f 90       	pop	r0
    1834:	cf 91       	pop	r28
    1836:	df 91       	pop	r29
    1838:	08 95       	ret

0000183a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    183a:	df 93       	push	r29
    183c:	cf 93       	push	r28
    183e:	00 d0       	rcall	.+0      	; 0x1840 <GPIO_writePin+0x6>
    1840:	00 d0       	rcall	.+0      	; 0x1842 <GPIO_writePin+0x8>
    1842:	0f 92       	push	r0
    1844:	cd b7       	in	r28, 0x3d	; 61
    1846:	de b7       	in	r29, 0x3e	; 62
    1848:	89 83       	std	Y+1, r24	; 0x01
    184a:	6a 83       	std	Y+2, r22	; 0x02
    184c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    184e:	8a 81       	ldd	r24, Y+2	; 0x02
    1850:	88 30       	cpi	r24, 0x08	; 8
    1852:	08 f0       	brcs	.+2      	; 0x1856 <GPIO_writePin+0x1c>
    1854:	d5 c0       	rjmp	.+426    	; 0x1a00 <GPIO_writePin+0x1c6>
    1856:	89 81       	ldd	r24, Y+1	; 0x01
    1858:	84 30       	cpi	r24, 0x04	; 4
    185a:	08 f0       	brcs	.+2      	; 0x185e <GPIO_writePin+0x24>
    185c:	d1 c0       	rjmp	.+418    	; 0x1a00 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    185e:	89 81       	ldd	r24, Y+1	; 0x01
    1860:	28 2f       	mov	r18, r24
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	3d 83       	std	Y+5, r19	; 0x05
    1866:	2c 83       	std	Y+4, r18	; 0x04
    1868:	8c 81       	ldd	r24, Y+4	; 0x04
    186a:	9d 81       	ldd	r25, Y+5	; 0x05
    186c:	81 30       	cpi	r24, 0x01	; 1
    186e:	91 05       	cpc	r25, r1
    1870:	09 f4       	brne	.+2      	; 0x1874 <GPIO_writePin+0x3a>
    1872:	43 c0       	rjmp	.+134    	; 0x18fa <GPIO_writePin+0xc0>
    1874:	2c 81       	ldd	r18, Y+4	; 0x04
    1876:	3d 81       	ldd	r19, Y+5	; 0x05
    1878:	22 30       	cpi	r18, 0x02	; 2
    187a:	31 05       	cpc	r19, r1
    187c:	2c f4       	brge	.+10     	; 0x1888 <GPIO_writePin+0x4e>
    187e:	8c 81       	ldd	r24, Y+4	; 0x04
    1880:	9d 81       	ldd	r25, Y+5	; 0x05
    1882:	00 97       	sbiw	r24, 0x00	; 0
    1884:	71 f0       	breq	.+28     	; 0x18a2 <GPIO_writePin+0x68>
    1886:	bc c0       	rjmp	.+376    	; 0x1a00 <GPIO_writePin+0x1c6>
    1888:	2c 81       	ldd	r18, Y+4	; 0x04
    188a:	3d 81       	ldd	r19, Y+5	; 0x05
    188c:	22 30       	cpi	r18, 0x02	; 2
    188e:	31 05       	cpc	r19, r1
    1890:	09 f4       	brne	.+2      	; 0x1894 <GPIO_writePin+0x5a>
    1892:	5f c0       	rjmp	.+190    	; 0x1952 <GPIO_writePin+0x118>
    1894:	8c 81       	ldd	r24, Y+4	; 0x04
    1896:	9d 81       	ldd	r25, Y+5	; 0x05
    1898:	83 30       	cpi	r24, 0x03	; 3
    189a:	91 05       	cpc	r25, r1
    189c:	09 f4       	brne	.+2      	; 0x18a0 <GPIO_writePin+0x66>
    189e:	85 c0       	rjmp	.+266    	; 0x19aa <GPIO_writePin+0x170>
    18a0:	af c0       	rjmp	.+350    	; 0x1a00 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    18a2:	8b 81       	ldd	r24, Y+3	; 0x03
    18a4:	81 30       	cpi	r24, 0x01	; 1
    18a6:	a1 f4       	brne	.+40     	; 0x18d0 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    18a8:	ab e3       	ldi	r26, 0x3B	; 59
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	eb e3       	ldi	r30, 0x3B	; 59
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	48 2f       	mov	r20, r24
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	28 2f       	mov	r18, r24
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	02 2e       	mov	r0, r18
    18c0:	02 c0       	rjmp	.+4      	; 0x18c6 <GPIO_writePin+0x8c>
    18c2:	88 0f       	add	r24, r24
    18c4:	99 1f       	adc	r25, r25
    18c6:	0a 94       	dec	r0
    18c8:	e2 f7       	brpl	.-8      	; 0x18c2 <GPIO_writePin+0x88>
    18ca:	84 2b       	or	r24, r20
    18cc:	8c 93       	st	X, r24
    18ce:	98 c0       	rjmp	.+304    	; 0x1a00 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    18d0:	ab e3       	ldi	r26, 0x3B	; 59
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	eb e3       	ldi	r30, 0x3B	; 59
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	48 2f       	mov	r20, r24
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	28 2f       	mov	r18, r24
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	02 2e       	mov	r0, r18
    18e8:	02 c0       	rjmp	.+4      	; 0x18ee <GPIO_writePin+0xb4>
    18ea:	88 0f       	add	r24, r24
    18ec:	99 1f       	adc	r25, r25
    18ee:	0a 94       	dec	r0
    18f0:	e2 f7       	brpl	.-8      	; 0x18ea <GPIO_writePin+0xb0>
    18f2:	80 95       	com	r24
    18f4:	84 23       	and	r24, r20
    18f6:	8c 93       	st	X, r24
    18f8:	83 c0       	rjmp	.+262    	; 0x1a00 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    18fa:	8b 81       	ldd	r24, Y+3	; 0x03
    18fc:	81 30       	cpi	r24, 0x01	; 1
    18fe:	a1 f4       	brne	.+40     	; 0x1928 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1900:	a8 e3       	ldi	r26, 0x38	; 56
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	e8 e3       	ldi	r30, 0x38	; 56
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	48 2f       	mov	r20, r24
    190c:	8a 81       	ldd	r24, Y+2	; 0x02
    190e:	28 2f       	mov	r18, r24
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	02 2e       	mov	r0, r18
    1918:	02 c0       	rjmp	.+4      	; 0x191e <GPIO_writePin+0xe4>
    191a:	88 0f       	add	r24, r24
    191c:	99 1f       	adc	r25, r25
    191e:	0a 94       	dec	r0
    1920:	e2 f7       	brpl	.-8      	; 0x191a <GPIO_writePin+0xe0>
    1922:	84 2b       	or	r24, r20
    1924:	8c 93       	st	X, r24
    1926:	6c c0       	rjmp	.+216    	; 0x1a00 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1928:	a8 e3       	ldi	r26, 0x38	; 56
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	e8 e3       	ldi	r30, 0x38	; 56
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	48 2f       	mov	r20, r24
    1934:	8a 81       	ldd	r24, Y+2	; 0x02
    1936:	28 2f       	mov	r18, r24
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	02 2e       	mov	r0, r18
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <GPIO_writePin+0x10c>
    1942:	88 0f       	add	r24, r24
    1944:	99 1f       	adc	r25, r25
    1946:	0a 94       	dec	r0
    1948:	e2 f7       	brpl	.-8      	; 0x1942 <GPIO_writePin+0x108>
    194a:	80 95       	com	r24
    194c:	84 23       	and	r24, r20
    194e:	8c 93       	st	X, r24
    1950:	57 c0       	rjmp	.+174    	; 0x1a00 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1952:	8b 81       	ldd	r24, Y+3	; 0x03
    1954:	81 30       	cpi	r24, 0x01	; 1
    1956:	a1 f4       	brne	.+40     	; 0x1980 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1958:	a5 e3       	ldi	r26, 0x35	; 53
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	e5 e3       	ldi	r30, 0x35	; 53
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	48 2f       	mov	r20, r24
    1964:	8a 81       	ldd	r24, Y+2	; 0x02
    1966:	28 2f       	mov	r18, r24
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	02 2e       	mov	r0, r18
    1970:	02 c0       	rjmp	.+4      	; 0x1976 <GPIO_writePin+0x13c>
    1972:	88 0f       	add	r24, r24
    1974:	99 1f       	adc	r25, r25
    1976:	0a 94       	dec	r0
    1978:	e2 f7       	brpl	.-8      	; 0x1972 <GPIO_writePin+0x138>
    197a:	84 2b       	or	r24, r20
    197c:	8c 93       	st	X, r24
    197e:	40 c0       	rjmp	.+128    	; 0x1a00 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1980:	a5 e3       	ldi	r26, 0x35	; 53
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	e5 e3       	ldi	r30, 0x35	; 53
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	48 2f       	mov	r20, r24
    198c:	8a 81       	ldd	r24, Y+2	; 0x02
    198e:	28 2f       	mov	r18, r24
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	02 2e       	mov	r0, r18
    1998:	02 c0       	rjmp	.+4      	; 0x199e <GPIO_writePin+0x164>
    199a:	88 0f       	add	r24, r24
    199c:	99 1f       	adc	r25, r25
    199e:	0a 94       	dec	r0
    19a0:	e2 f7       	brpl	.-8      	; 0x199a <GPIO_writePin+0x160>
    19a2:	80 95       	com	r24
    19a4:	84 23       	and	r24, r20
    19a6:	8c 93       	st	X, r24
    19a8:	2b c0       	rjmp	.+86     	; 0x1a00 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    19aa:	8b 81       	ldd	r24, Y+3	; 0x03
    19ac:	81 30       	cpi	r24, 0x01	; 1
    19ae:	a1 f4       	brne	.+40     	; 0x19d8 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    19b0:	a2 e3       	ldi	r26, 0x32	; 50
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	e2 e3       	ldi	r30, 0x32	; 50
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	48 2f       	mov	r20, r24
    19bc:	8a 81       	ldd	r24, Y+2	; 0x02
    19be:	28 2f       	mov	r18, r24
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	02 2e       	mov	r0, r18
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <GPIO_writePin+0x194>
    19ca:	88 0f       	add	r24, r24
    19cc:	99 1f       	adc	r25, r25
    19ce:	0a 94       	dec	r0
    19d0:	e2 f7       	brpl	.-8      	; 0x19ca <GPIO_writePin+0x190>
    19d2:	84 2b       	or	r24, r20
    19d4:	8c 93       	st	X, r24
    19d6:	14 c0       	rjmp	.+40     	; 0x1a00 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    19d8:	a2 e3       	ldi	r26, 0x32	; 50
    19da:	b0 e0       	ldi	r27, 0x00	; 0
    19dc:	e2 e3       	ldi	r30, 0x32	; 50
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	48 2f       	mov	r20, r24
    19e4:	8a 81       	ldd	r24, Y+2	; 0x02
    19e6:	28 2f       	mov	r18, r24
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	02 2e       	mov	r0, r18
    19f0:	02 c0       	rjmp	.+4      	; 0x19f6 <GPIO_writePin+0x1bc>
    19f2:	88 0f       	add	r24, r24
    19f4:	99 1f       	adc	r25, r25
    19f6:	0a 94       	dec	r0
    19f8:	e2 f7       	brpl	.-8      	; 0x19f2 <GPIO_writePin+0x1b8>
    19fa:	80 95       	com	r24
    19fc:	84 23       	and	r24, r20
    19fe:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1a00:	0f 90       	pop	r0
    1a02:	0f 90       	pop	r0
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
    1a08:	0f 90       	pop	r0
    1a0a:	cf 91       	pop	r28
    1a0c:	df 91       	pop	r29
    1a0e:	08 95       	ret

00001a10 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1a10:	df 93       	push	r29
    1a12:	cf 93       	push	r28
    1a14:	00 d0       	rcall	.+0      	; 0x1a16 <GPIO_readPin+0x6>
    1a16:	00 d0       	rcall	.+0      	; 0x1a18 <GPIO_readPin+0x8>
    1a18:	0f 92       	push	r0
    1a1a:	cd b7       	in	r28, 0x3d	; 61
    1a1c:	de b7       	in	r29, 0x3e	; 62
    1a1e:	8a 83       	std	Y+2, r24	; 0x02
    1a20:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1a22:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1a24:	8b 81       	ldd	r24, Y+3	; 0x03
    1a26:	88 30       	cpi	r24, 0x08	; 8
    1a28:	08 f0       	brcs	.+2      	; 0x1a2c <GPIO_readPin+0x1c>
    1a2a:	84 c0       	rjmp	.+264    	; 0x1b34 <GPIO_readPin+0x124>
    1a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2e:	84 30       	cpi	r24, 0x04	; 4
    1a30:	08 f0       	brcs	.+2      	; 0x1a34 <GPIO_readPin+0x24>
    1a32:	80 c0       	rjmp	.+256    	; 0x1b34 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1a34:	8a 81       	ldd	r24, Y+2	; 0x02
    1a36:	28 2f       	mov	r18, r24
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	3d 83       	std	Y+5, r19	; 0x05
    1a3c:	2c 83       	std	Y+4, r18	; 0x04
    1a3e:	4c 81       	ldd	r20, Y+4	; 0x04
    1a40:	5d 81       	ldd	r21, Y+5	; 0x05
    1a42:	41 30       	cpi	r20, 0x01	; 1
    1a44:	51 05       	cpc	r21, r1
    1a46:	79 f1       	breq	.+94     	; 0x1aa6 <GPIO_readPin+0x96>
    1a48:	8c 81       	ldd	r24, Y+4	; 0x04
    1a4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a4c:	82 30       	cpi	r24, 0x02	; 2
    1a4e:	91 05       	cpc	r25, r1
    1a50:	34 f4       	brge	.+12     	; 0x1a5e <GPIO_readPin+0x4e>
    1a52:	2c 81       	ldd	r18, Y+4	; 0x04
    1a54:	3d 81       	ldd	r19, Y+5	; 0x05
    1a56:	21 15       	cp	r18, r1
    1a58:	31 05       	cpc	r19, r1
    1a5a:	69 f0       	breq	.+26     	; 0x1a76 <GPIO_readPin+0x66>
    1a5c:	6b c0       	rjmp	.+214    	; 0x1b34 <GPIO_readPin+0x124>
    1a5e:	4c 81       	ldd	r20, Y+4	; 0x04
    1a60:	5d 81       	ldd	r21, Y+5	; 0x05
    1a62:	42 30       	cpi	r20, 0x02	; 2
    1a64:	51 05       	cpc	r21, r1
    1a66:	b9 f1       	breq	.+110    	; 0x1ad6 <GPIO_readPin+0xc6>
    1a68:	8c 81       	ldd	r24, Y+4	; 0x04
    1a6a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a6c:	83 30       	cpi	r24, 0x03	; 3
    1a6e:	91 05       	cpc	r25, r1
    1a70:	09 f4       	brne	.+2      	; 0x1a74 <GPIO_readPin+0x64>
    1a72:	49 c0       	rjmp	.+146    	; 0x1b06 <GPIO_readPin+0xf6>
    1a74:	5f c0       	rjmp	.+190    	; 0x1b34 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1a76:	e9 e3       	ldi	r30, 0x39	; 57
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	28 2f       	mov	r18, r24
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	8b 81       	ldd	r24, Y+3	; 0x03
    1a82:	88 2f       	mov	r24, r24
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	a9 01       	movw	r20, r18
    1a88:	02 c0       	rjmp	.+4      	; 0x1a8e <GPIO_readPin+0x7e>
    1a8a:	55 95       	asr	r21
    1a8c:	47 95       	ror	r20
    1a8e:	8a 95       	dec	r24
    1a90:	e2 f7       	brpl	.-8      	; 0x1a8a <GPIO_readPin+0x7a>
    1a92:	ca 01       	movw	r24, r20
    1a94:	81 70       	andi	r24, 0x01	; 1
    1a96:	90 70       	andi	r25, 0x00	; 0
    1a98:	88 23       	and	r24, r24
    1a9a:	19 f0       	breq	.+6      	; 0x1aa2 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1a9c:	81 e0       	ldi	r24, 0x01	; 1
    1a9e:	89 83       	std	Y+1, r24	; 0x01
    1aa0:	49 c0       	rjmp	.+146    	; 0x1b34 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1aa2:	19 82       	std	Y+1, r1	; 0x01
    1aa4:	47 c0       	rjmp	.+142    	; 0x1b34 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1aa6:	e6 e3       	ldi	r30, 0x36	; 54
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	28 2f       	mov	r18, r24
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab2:	88 2f       	mov	r24, r24
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	a9 01       	movw	r20, r18
    1ab8:	02 c0       	rjmp	.+4      	; 0x1abe <GPIO_readPin+0xae>
    1aba:	55 95       	asr	r21
    1abc:	47 95       	ror	r20
    1abe:	8a 95       	dec	r24
    1ac0:	e2 f7       	brpl	.-8      	; 0x1aba <GPIO_readPin+0xaa>
    1ac2:	ca 01       	movw	r24, r20
    1ac4:	81 70       	andi	r24, 0x01	; 1
    1ac6:	90 70       	andi	r25, 0x00	; 0
    1ac8:	88 23       	and	r24, r24
    1aca:	19 f0       	breq	.+6      	; 0x1ad2 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	89 83       	std	Y+1, r24	; 0x01
    1ad0:	31 c0       	rjmp	.+98     	; 0x1b34 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ad2:	19 82       	std	Y+1, r1	; 0x01
    1ad4:	2f c0       	rjmp	.+94     	; 0x1b34 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1ad6:	e3 e3       	ldi	r30, 0x33	; 51
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	28 2f       	mov	r18, r24
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae2:	88 2f       	mov	r24, r24
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	a9 01       	movw	r20, r18
    1ae8:	02 c0       	rjmp	.+4      	; 0x1aee <GPIO_readPin+0xde>
    1aea:	55 95       	asr	r21
    1aec:	47 95       	ror	r20
    1aee:	8a 95       	dec	r24
    1af0:	e2 f7       	brpl	.-8      	; 0x1aea <GPIO_readPin+0xda>
    1af2:	ca 01       	movw	r24, r20
    1af4:	81 70       	andi	r24, 0x01	; 1
    1af6:	90 70       	andi	r25, 0x00	; 0
    1af8:	88 23       	and	r24, r24
    1afa:	19 f0       	breq	.+6      	; 0x1b02 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	89 83       	std	Y+1, r24	; 0x01
    1b00:	19 c0       	rjmp	.+50     	; 0x1b34 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b02:	19 82       	std	Y+1, r1	; 0x01
    1b04:	17 c0       	rjmp	.+46     	; 0x1b34 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1b06:	e0 e3       	ldi	r30, 0x30	; 48
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	80 81       	ld	r24, Z
    1b0c:	28 2f       	mov	r18, r24
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	8b 81       	ldd	r24, Y+3	; 0x03
    1b12:	88 2f       	mov	r24, r24
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	a9 01       	movw	r20, r18
    1b18:	02 c0       	rjmp	.+4      	; 0x1b1e <GPIO_readPin+0x10e>
    1b1a:	55 95       	asr	r21
    1b1c:	47 95       	ror	r20
    1b1e:	8a 95       	dec	r24
    1b20:	e2 f7       	brpl	.-8      	; 0x1b1a <GPIO_readPin+0x10a>
    1b22:	ca 01       	movw	r24, r20
    1b24:	81 70       	andi	r24, 0x01	; 1
    1b26:	90 70       	andi	r25, 0x00	; 0
    1b28:	88 23       	and	r24, r24
    1b2a:	19 f0       	breq	.+6      	; 0x1b32 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	89 83       	std	Y+1, r24	; 0x01
    1b30:	01 c0       	rjmp	.+2      	; 0x1b34 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b32:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b36:	0f 90       	pop	r0
    1b38:	0f 90       	pop	r0
    1b3a:	0f 90       	pop	r0
    1b3c:	0f 90       	pop	r0
    1b3e:	0f 90       	pop	r0
    1b40:	cf 91       	pop	r28
    1b42:	df 91       	pop	r29
    1b44:	08 95       	ret

00001b46 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1b46:	df 93       	push	r29
    1b48:	cf 93       	push	r28
    1b4a:	00 d0       	rcall	.+0      	; 0x1b4c <GPIO_setupPortDirection+0x6>
    1b4c:	00 d0       	rcall	.+0      	; 0x1b4e <GPIO_setupPortDirection+0x8>
    1b4e:	cd b7       	in	r28, 0x3d	; 61
    1b50:	de b7       	in	r29, 0x3e	; 62
    1b52:	89 83       	std	Y+1, r24	; 0x01
    1b54:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b56:	89 81       	ldd	r24, Y+1	; 0x01
    1b58:	84 30       	cpi	r24, 0x04	; 4
    1b5a:	90 f5       	brcc	.+100    	; 0x1bc0 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1b5c:	89 81       	ldd	r24, Y+1	; 0x01
    1b5e:	28 2f       	mov	r18, r24
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	3c 83       	std	Y+4, r19	; 0x04
    1b64:	2b 83       	std	Y+3, r18	; 0x03
    1b66:	8b 81       	ldd	r24, Y+3	; 0x03
    1b68:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6a:	81 30       	cpi	r24, 0x01	; 1
    1b6c:	91 05       	cpc	r25, r1
    1b6e:	d1 f0       	breq	.+52     	; 0x1ba4 <GPIO_setupPortDirection+0x5e>
    1b70:	2b 81       	ldd	r18, Y+3	; 0x03
    1b72:	3c 81       	ldd	r19, Y+4	; 0x04
    1b74:	22 30       	cpi	r18, 0x02	; 2
    1b76:	31 05       	cpc	r19, r1
    1b78:	2c f4       	brge	.+10     	; 0x1b84 <GPIO_setupPortDirection+0x3e>
    1b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b7e:	00 97       	sbiw	r24, 0x00	; 0
    1b80:	61 f0       	breq	.+24     	; 0x1b9a <GPIO_setupPortDirection+0x54>
    1b82:	1e c0       	rjmp	.+60     	; 0x1bc0 <GPIO_setupPortDirection+0x7a>
    1b84:	2b 81       	ldd	r18, Y+3	; 0x03
    1b86:	3c 81       	ldd	r19, Y+4	; 0x04
    1b88:	22 30       	cpi	r18, 0x02	; 2
    1b8a:	31 05       	cpc	r19, r1
    1b8c:	81 f0       	breq	.+32     	; 0x1bae <GPIO_setupPortDirection+0x68>
    1b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b90:	9c 81       	ldd	r25, Y+4	; 0x04
    1b92:	83 30       	cpi	r24, 0x03	; 3
    1b94:	91 05       	cpc	r25, r1
    1b96:	81 f0       	breq	.+32     	; 0x1bb8 <GPIO_setupPortDirection+0x72>
    1b98:	13 c0       	rjmp	.+38     	; 0x1bc0 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1b9a:	ea e3       	ldi	r30, 0x3A	; 58
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba0:	80 83       	st	Z, r24
    1ba2:	0e c0       	rjmp	.+28     	; 0x1bc0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1ba4:	e7 e3       	ldi	r30, 0x37	; 55
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    1baa:	80 83       	st	Z, r24
    1bac:	09 c0       	rjmp	.+18     	; 0x1bc0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1bae:	e4 e3       	ldi	r30, 0x34	; 52
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb4:	80 83       	st	Z, r24
    1bb6:	04 c0       	rjmp	.+8      	; 0x1bc0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1bb8:	e1 e3       	ldi	r30, 0x31	; 49
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbe:	80 83       	st	Z, r24
			break;
		}
	}
}
    1bc0:	0f 90       	pop	r0
    1bc2:	0f 90       	pop	r0
    1bc4:	0f 90       	pop	r0
    1bc6:	0f 90       	pop	r0
    1bc8:	cf 91       	pop	r28
    1bca:	df 91       	pop	r29
    1bcc:	08 95       	ret

00001bce <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1bce:	df 93       	push	r29
    1bd0:	cf 93       	push	r28
    1bd2:	00 d0       	rcall	.+0      	; 0x1bd4 <GPIO_writePort+0x6>
    1bd4:	00 d0       	rcall	.+0      	; 0x1bd6 <GPIO_writePort+0x8>
    1bd6:	cd b7       	in	r28, 0x3d	; 61
    1bd8:	de b7       	in	r29, 0x3e	; 62
    1bda:	89 83       	std	Y+1, r24	; 0x01
    1bdc:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1bde:	89 81       	ldd	r24, Y+1	; 0x01
    1be0:	84 30       	cpi	r24, 0x04	; 4
    1be2:	90 f5       	brcc	.+100    	; 0x1c48 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1be4:	89 81       	ldd	r24, Y+1	; 0x01
    1be6:	28 2f       	mov	r18, r24
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	3c 83       	std	Y+4, r19	; 0x04
    1bec:	2b 83       	std	Y+3, r18	; 0x03
    1bee:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf2:	81 30       	cpi	r24, 0x01	; 1
    1bf4:	91 05       	cpc	r25, r1
    1bf6:	d1 f0       	breq	.+52     	; 0x1c2c <GPIO_writePort+0x5e>
    1bf8:	2b 81       	ldd	r18, Y+3	; 0x03
    1bfa:	3c 81       	ldd	r19, Y+4	; 0x04
    1bfc:	22 30       	cpi	r18, 0x02	; 2
    1bfe:	31 05       	cpc	r19, r1
    1c00:	2c f4       	brge	.+10     	; 0x1c0c <GPIO_writePort+0x3e>
    1c02:	8b 81       	ldd	r24, Y+3	; 0x03
    1c04:	9c 81       	ldd	r25, Y+4	; 0x04
    1c06:	00 97       	sbiw	r24, 0x00	; 0
    1c08:	61 f0       	breq	.+24     	; 0x1c22 <GPIO_writePort+0x54>
    1c0a:	1e c0       	rjmp	.+60     	; 0x1c48 <GPIO_writePort+0x7a>
    1c0c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c0e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c10:	22 30       	cpi	r18, 0x02	; 2
    1c12:	31 05       	cpc	r19, r1
    1c14:	81 f0       	breq	.+32     	; 0x1c36 <GPIO_writePort+0x68>
    1c16:	8b 81       	ldd	r24, Y+3	; 0x03
    1c18:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1a:	83 30       	cpi	r24, 0x03	; 3
    1c1c:	91 05       	cpc	r25, r1
    1c1e:	81 f0       	breq	.+32     	; 0x1c40 <GPIO_writePort+0x72>
    1c20:	13 c0       	rjmp	.+38     	; 0x1c48 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1c22:	eb e3       	ldi	r30, 0x3B	; 59
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	8a 81       	ldd	r24, Y+2	; 0x02
    1c28:	80 83       	st	Z, r24
    1c2a:	0e c0       	rjmp	.+28     	; 0x1c48 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1c2c:	e8 e3       	ldi	r30, 0x38	; 56
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	8a 81       	ldd	r24, Y+2	; 0x02
    1c32:	80 83       	st	Z, r24
    1c34:	09 c0       	rjmp	.+18     	; 0x1c48 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1c36:	e5 e3       	ldi	r30, 0x35	; 53
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3c:	80 83       	st	Z, r24
    1c3e:	04 c0       	rjmp	.+8      	; 0x1c48 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1c40:	e2 e3       	ldi	r30, 0x32	; 50
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	8a 81       	ldd	r24, Y+2	; 0x02
    1c46:	80 83       	st	Z, r24
			break;
		}
	}
}
    1c48:	0f 90       	pop	r0
    1c4a:	0f 90       	pop	r0
    1c4c:	0f 90       	pop	r0
    1c4e:	0f 90       	pop	r0
    1c50:	cf 91       	pop	r28
    1c52:	df 91       	pop	r29
    1c54:	08 95       	ret

00001c56 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1c56:	df 93       	push	r29
    1c58:	cf 93       	push	r28
    1c5a:	00 d0       	rcall	.+0      	; 0x1c5c <GPIO_readPort+0x6>
    1c5c:	00 d0       	rcall	.+0      	; 0x1c5e <GPIO_readPort+0x8>
    1c5e:	cd b7       	in	r28, 0x3d	; 61
    1c60:	de b7       	in	r29, 0x3e	; 62
    1c62:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1c64:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1c66:	8a 81       	ldd	r24, Y+2	; 0x02
    1c68:	84 30       	cpi	r24, 0x04	; 4
    1c6a:	90 f5       	brcc	.+100    	; 0x1cd0 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6e:	28 2f       	mov	r18, r24
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	3c 83       	std	Y+4, r19	; 0x04
    1c74:	2b 83       	std	Y+3, r18	; 0x03
    1c76:	8b 81       	ldd	r24, Y+3	; 0x03
    1c78:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7a:	81 30       	cpi	r24, 0x01	; 1
    1c7c:	91 05       	cpc	r25, r1
    1c7e:	d1 f0       	breq	.+52     	; 0x1cb4 <GPIO_readPort+0x5e>
    1c80:	2b 81       	ldd	r18, Y+3	; 0x03
    1c82:	3c 81       	ldd	r19, Y+4	; 0x04
    1c84:	22 30       	cpi	r18, 0x02	; 2
    1c86:	31 05       	cpc	r19, r1
    1c88:	2c f4       	brge	.+10     	; 0x1c94 <GPIO_readPort+0x3e>
    1c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c8e:	00 97       	sbiw	r24, 0x00	; 0
    1c90:	61 f0       	breq	.+24     	; 0x1caa <GPIO_readPort+0x54>
    1c92:	1e c0       	rjmp	.+60     	; 0x1cd0 <GPIO_readPort+0x7a>
    1c94:	2b 81       	ldd	r18, Y+3	; 0x03
    1c96:	3c 81       	ldd	r19, Y+4	; 0x04
    1c98:	22 30       	cpi	r18, 0x02	; 2
    1c9a:	31 05       	cpc	r19, r1
    1c9c:	81 f0       	breq	.+32     	; 0x1cbe <GPIO_readPort+0x68>
    1c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca2:	83 30       	cpi	r24, 0x03	; 3
    1ca4:	91 05       	cpc	r25, r1
    1ca6:	81 f0       	breq	.+32     	; 0x1cc8 <GPIO_readPort+0x72>
    1ca8:	13 c0       	rjmp	.+38     	; 0x1cd0 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1caa:	e9 e3       	ldi	r30, 0x39	; 57
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	89 83       	std	Y+1, r24	; 0x01
    1cb2:	0e c0       	rjmp	.+28     	; 0x1cd0 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1cb4:	e6 e3       	ldi	r30, 0x36	; 54
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z
    1cba:	89 83       	std	Y+1, r24	; 0x01
    1cbc:	09 c0       	rjmp	.+18     	; 0x1cd0 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1cbe:	e3 e3       	ldi	r30, 0x33	; 51
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	80 81       	ld	r24, Z
    1cc4:	89 83       	std	Y+1, r24	; 0x01
    1cc6:	04 c0       	rjmp	.+8      	; 0x1cd0 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1cc8:	e0 e3       	ldi	r30, 0x30	; 48
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	80 81       	ld	r24, Z
    1cce:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1cd0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cd2:	0f 90       	pop	r0
    1cd4:	0f 90       	pop	r0
    1cd6:	0f 90       	pop	r0
    1cd8:	0f 90       	pop	r0
    1cda:	cf 91       	pop	r28
    1cdc:	df 91       	pop	r29
    1cde:	08 95       	ret

00001ce0 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1ce0:	df 93       	push	r29
    1ce2:	cf 93       	push	r28
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62
    1ce8:	60 97       	sbiw	r28, 0x10	; 16
    1cea:	0f b6       	in	r0, 0x3f	; 63
    1cec:	f8 94       	cli
    1cee:	de bf       	out	0x3e, r29	; 62
    1cf0:	0f be       	out	0x3f, r0	; 63
    1cf2:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	64 e0       	ldi	r22, 0x04	; 4
    1cf8:	40 e0       	ldi	r20, 0x00	; 0
    1cfa:	0e 94 32 0b 	call	0x1664	; 0x1664 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	65 e0       	ldi	r22, 0x05	; 5
    1d02:	40 e0       	ldi	r20, 0x00	; 0
    1d04:	0e 94 32 0b 	call	0x1664	; 0x1664 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	66 e0       	ldi	r22, 0x06	; 6
    1d0c:	40 e0       	ldi	r20, 0x00	; 0
    1d0e:	0e 94 32 0b 	call	0x1664	; 0x1664 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	67 e0       	ldi	r22, 0x07	; 7
    1d16:	40 e0       	ldi	r20, 0x00	; 0
    1d18:	0e 94 32 0b 	call	0x1664	; 0x1664 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1d1c:	83 e0       	ldi	r24, 0x03	; 3
    1d1e:	62 e0       	ldi	r22, 0x02	; 2
    1d20:	40 e0       	ldi	r20, 0x00	; 0
    1d22:	0e 94 32 0b 	call	0x1664	; 0x1664 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1d26:	83 e0       	ldi	r24, 0x03	; 3
    1d28:	63 e0       	ldi	r22, 0x03	; 3
    1d2a:	40 e0       	ldi	r20, 0x00	; 0
    1d2c:	0e 94 32 0b 	call	0x1664	; 0x1664 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1d30:	83 e0       	ldi	r24, 0x03	; 3
    1d32:	64 e0       	ldi	r22, 0x04	; 4
    1d34:	40 e0       	ldi	r20, 0x00	; 0
    1d36:	0e 94 32 0b 	call	0x1664	; 0x1664 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1d3a:	83 e0       	ldi	r24, 0x03	; 3
    1d3c:	65 e0       	ldi	r22, 0x05	; 5
    1d3e:	40 e0       	ldi	r20, 0x00	; 0
    1d40:	0e 94 32 0b 	call	0x1664	; 0x1664 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1d44:	1f 86       	std	Y+15, r1	; 0x0f
    1d46:	b4 c0       	rjmp	.+360    	; 0x1eb0 <KEYPAD_getPressedKey+0x1d0>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1d48:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d4a:	98 2f       	mov	r25, r24
    1d4c:	9c 5f       	subi	r25, 0xFC	; 252
    1d4e:	81 e0       	ldi	r24, 0x01	; 1
    1d50:	69 2f       	mov	r22, r25
    1d52:	41 e0       	ldi	r20, 0x01	; 1
    1d54:	0e 94 32 0b 	call	0x1664	; 0x1664 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1d58:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d5a:	98 2f       	mov	r25, r24
    1d5c:	9c 5f       	subi	r25, 0xFC	; 252
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	69 2f       	mov	r22, r25
    1d62:	40 e0       	ldi	r20, 0x00	; 0
    1d64:	0e 94 1d 0c 	call	0x183a	; 0x183a <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1d68:	18 8a       	std	Y+16, r1	; 0x10
    1d6a:	22 c0       	rjmp	.+68     	; 0x1db0 <KEYPAD_getPressedKey+0xd0>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1d6c:	88 89       	ldd	r24, Y+16	; 0x10
    1d6e:	98 2f       	mov	r25, r24
    1d70:	9e 5f       	subi	r25, 0xFE	; 254
    1d72:	83 e0       	ldi	r24, 0x03	; 3
    1d74:	69 2f       	mov	r22, r25
    1d76:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <GPIO_readPin>
    1d7a:	88 23       	and	r24, r24
    1d7c:	b1 f4       	brne	.+44     	; 0x1daa <KEYPAD_getPressedKey+0xca>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1d7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d80:	88 2f       	mov	r24, r24
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	88 0f       	add	r24, r24
    1d86:	99 1f       	adc	r25, r25
    1d88:	88 0f       	add	r24, r24
    1d8a:	99 1f       	adc	r25, r25
    1d8c:	98 2f       	mov	r25, r24
    1d8e:	88 89       	ldd	r24, Y+16	; 0x10
    1d90:	89 0f       	add	r24, r25
    1d92:	8f 5f       	subi	r24, 0xFF	; 255
    1d94:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    1d98:	60 96       	adiw	r28, 0x10	; 16
    1d9a:	0f b6       	in	r0, 0x3f	; 63
    1d9c:	f8 94       	cli
    1d9e:	de bf       	out	0x3e, r29	; 62
    1da0:	0f be       	out	0x3f, r0	; 63
    1da2:	cd bf       	out	0x3d, r28	; 61
    1da4:	cf 91       	pop	r28
    1da6:	df 91       	pop	r29
    1da8:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1daa:	88 89       	ldd	r24, Y+16	; 0x10
    1dac:	8f 5f       	subi	r24, 0xFF	; 255
    1dae:	88 8b       	std	Y+16, r24	; 0x10
    1db0:	88 89       	ldd	r24, Y+16	; 0x10
    1db2:	84 30       	cpi	r24, 0x04	; 4
    1db4:	d8 f2       	brcs	.-74     	; 0x1d6c <KEYPAD_getPressedKey+0x8c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1db6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1db8:	98 2f       	mov	r25, r24
    1dba:	9c 5f       	subi	r25, 0xFC	; 252
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	69 2f       	mov	r22, r25
    1dc0:	40 e0       	ldi	r20, 0x00	; 0
    1dc2:	0e 94 32 0b 	call	0x1664	; 0x1664 <GPIO_setupPinDirection>
    1dc6:	80 e0       	ldi	r24, 0x00	; 0
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	a0 ea       	ldi	r26, 0xA0	; 160
    1dcc:	b0 e4       	ldi	r27, 0x40	; 64
    1dce:	8b 87       	std	Y+11, r24	; 0x0b
    1dd0:	9c 87       	std	Y+12, r25	; 0x0c
    1dd2:	ad 87       	std	Y+13, r26	; 0x0d
    1dd4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dda:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ddc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	4a e7       	ldi	r20, 0x7A	; 122
    1de4:	55 e4       	ldi	r21, 0x45	; 69
    1de6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	8f 83       	std	Y+7, r24	; 0x07
    1df0:	98 87       	std	Y+8, r25	; 0x08
    1df2:	a9 87       	std	Y+9, r26	; 0x09
    1df4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1df6:	6f 81       	ldd	r22, Y+7	; 0x07
    1df8:	78 85       	ldd	r23, Y+8	; 0x08
    1dfa:	89 85       	ldd	r24, Y+9	; 0x09
    1dfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	40 e8       	ldi	r20, 0x80	; 128
    1e04:	5f e3       	ldi	r21, 0x3F	; 63
    1e06:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e0a:	88 23       	and	r24, r24
    1e0c:	2c f4       	brge	.+10     	; 0x1e18 <KEYPAD_getPressedKey+0x138>
		__ticks = 1;
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	9e 83       	std	Y+6, r25	; 0x06
    1e14:	8d 83       	std	Y+5, r24	; 0x05
    1e16:	3f c0       	rjmp	.+126    	; 0x1e96 <KEYPAD_getPressedKey+0x1b6>
	else if (__tmp > 65535)
    1e18:	6f 81       	ldd	r22, Y+7	; 0x07
    1e1a:	78 85       	ldd	r23, Y+8	; 0x08
    1e1c:	89 85       	ldd	r24, Y+9	; 0x09
    1e1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e20:	20 e0       	ldi	r18, 0x00	; 0
    1e22:	3f ef       	ldi	r19, 0xFF	; 255
    1e24:	4f e7       	ldi	r20, 0x7F	; 127
    1e26:	57 e4       	ldi	r21, 0x47	; 71
    1e28:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e2c:	18 16       	cp	r1, r24
    1e2e:	4c f5       	brge	.+82     	; 0x1e82 <KEYPAD_getPressedKey+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e30:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e32:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e34:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e36:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	40 e2       	ldi	r20, 0x20	; 32
    1e3e:	51 e4       	ldi	r21, 0x41	; 65
    1e40:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	bc 01       	movw	r22, r24
    1e4a:	cd 01       	movw	r24, r26
    1e4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	9e 83       	std	Y+6, r25	; 0x06
    1e56:	8d 83       	std	Y+5, r24	; 0x05
    1e58:	0f c0       	rjmp	.+30     	; 0x1e78 <KEYPAD_getPressedKey+0x198>
    1e5a:	80 e9       	ldi	r24, 0x90	; 144
    1e5c:	91 e0       	ldi	r25, 0x01	; 1
    1e5e:	9c 83       	std	Y+4, r25	; 0x04
    1e60:	8b 83       	std	Y+3, r24	; 0x03
    1e62:	8b 81       	ldd	r24, Y+3	; 0x03
    1e64:	9c 81       	ldd	r25, Y+4	; 0x04
    1e66:	01 97       	sbiw	r24, 0x01	; 1
    1e68:	f1 f7       	brne	.-4      	; 0x1e66 <KEYPAD_getPressedKey+0x186>
    1e6a:	9c 83       	std	Y+4, r25	; 0x04
    1e6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e70:	9e 81       	ldd	r25, Y+6	; 0x06
    1e72:	01 97       	sbiw	r24, 0x01	; 1
    1e74:	9e 83       	std	Y+6, r25	; 0x06
    1e76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e78:	8d 81       	ldd	r24, Y+5	; 0x05
    1e7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e7c:	00 97       	sbiw	r24, 0x00	; 0
    1e7e:	69 f7       	brne	.-38     	; 0x1e5a <KEYPAD_getPressedKey+0x17a>
    1e80:	14 c0       	rjmp	.+40     	; 0x1eaa <KEYPAD_getPressedKey+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e82:	6f 81       	ldd	r22, Y+7	; 0x07
    1e84:	78 85       	ldd	r23, Y+8	; 0x08
    1e86:	89 85       	ldd	r24, Y+9	; 0x09
    1e88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e8a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	9e 83       	std	Y+6, r25	; 0x06
    1e94:	8d 83       	std	Y+5, r24	; 0x05
    1e96:	8d 81       	ldd	r24, Y+5	; 0x05
    1e98:	9e 81       	ldd	r25, Y+6	; 0x06
    1e9a:	9a 83       	std	Y+2, r25	; 0x02
    1e9c:	89 83       	std	Y+1, r24	; 0x01
    1e9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ea0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ea2:	01 97       	sbiw	r24, 0x01	; 1
    1ea4:	f1 f7       	brne	.-4      	; 0x1ea2 <KEYPAD_getPressedKey+0x1c2>
    1ea6:	9a 83       	std	Y+2, r25	; 0x02
    1ea8:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1eaa:	8f 85       	ldd	r24, Y+15	; 0x0f
    1eac:	8f 5f       	subi	r24, 0xFF	; 255
    1eae:	8f 87       	std	Y+15, r24	; 0x0f
    1eb0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1eb2:	84 30       	cpi	r24, 0x04	; 4
    1eb4:	08 f4       	brcc	.+2      	; 0x1eb8 <KEYPAD_getPressedKey+0x1d8>
    1eb6:	48 cf       	rjmp	.-368    	; 0x1d48 <KEYPAD_getPressedKey+0x68>
    1eb8:	45 cf       	rjmp	.-374    	; 0x1d44 <KEYPAD_getPressedKey+0x64>

00001eba <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1eba:	df 93       	push	r29
    1ebc:	cf 93       	push	r28
    1ebe:	00 d0       	rcall	.+0      	; 0x1ec0 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1ec0:	00 d0       	rcall	.+0      	; 0x1ec2 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1ec2:	cd b7       	in	r28, 0x3d	; 61
    1ec4:	de b7       	in	r29, 0x3e	; 62
    1ec6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1ec8:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1eca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ecc:	28 2f       	mov	r18, r24
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	3c 83       	std	Y+4, r19	; 0x04
    1ed2:	2b 83       	std	Y+3, r18	; 0x03
    1ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed8:	88 30       	cpi	r24, 0x08	; 8
    1eda:	91 05       	cpc	r25, r1
    1edc:	09 f4       	brne	.+2      	; 0x1ee0 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1ede:	70 c0       	rjmp	.+224    	; 0x1fc0 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1ee0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ee2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ee4:	29 30       	cpi	r18, 0x09	; 9
    1ee6:	31 05       	cpc	r19, r1
    1ee8:	5c f5       	brge	.+86     	; 0x1f40 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1eea:	8b 81       	ldd	r24, Y+3	; 0x03
    1eec:	9c 81       	ldd	r25, Y+4	; 0x04
    1eee:	84 30       	cpi	r24, 0x04	; 4
    1ef0:	91 05       	cpc	r25, r1
    1ef2:	09 f4       	brne	.+2      	; 0x1ef6 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1ef4:	59 c0       	rjmp	.+178    	; 0x1fa8 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1ef6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ef8:	3c 81       	ldd	r19, Y+4	; 0x04
    1efa:	25 30       	cpi	r18, 0x05	; 5
    1efc:	31 05       	cpc	r19, r1
    1efe:	9c f4       	brge	.+38     	; 0x1f26 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1f00:	8b 81       	ldd	r24, Y+3	; 0x03
    1f02:	9c 81       	ldd	r25, Y+4	; 0x04
    1f04:	82 30       	cpi	r24, 0x02	; 2
    1f06:	91 05       	cpc	r25, r1
    1f08:	09 f4       	brne	.+2      	; 0x1f0c <KEYPAD_4x4_adjustKeyNumber+0x52>
    1f0a:	48 c0       	rjmp	.+144    	; 0x1f9c <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1f0c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f0e:	3c 81       	ldd	r19, Y+4	; 0x04
    1f10:	23 30       	cpi	r18, 0x03	; 3
    1f12:	31 05       	cpc	r19, r1
    1f14:	0c f0       	brlt	.+2      	; 0x1f18 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1f16:	45 c0       	rjmp	.+138    	; 0x1fa2 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1f18:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1c:	81 30       	cpi	r24, 0x01	; 1
    1f1e:	91 05       	cpc	r25, r1
    1f20:	09 f4       	brne	.+2      	; 0x1f24 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1f22:	39 c0       	rjmp	.+114    	; 0x1f96 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1f24:	67 c0       	rjmp	.+206    	; 0x1ff4 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1f26:	2b 81       	ldd	r18, Y+3	; 0x03
    1f28:	3c 81       	ldd	r19, Y+4	; 0x04
    1f2a:	26 30       	cpi	r18, 0x06	; 6
    1f2c:	31 05       	cpc	r19, r1
    1f2e:	09 f4       	brne	.+2      	; 0x1f32 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1f30:	41 c0       	rjmp	.+130    	; 0x1fb4 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1f32:	8b 81       	ldd	r24, Y+3	; 0x03
    1f34:	9c 81       	ldd	r25, Y+4	; 0x04
    1f36:	87 30       	cpi	r24, 0x07	; 7
    1f38:	91 05       	cpc	r25, r1
    1f3a:	0c f0       	brlt	.+2      	; 0x1f3e <KEYPAD_4x4_adjustKeyNumber+0x84>
    1f3c:	3e c0       	rjmp	.+124    	; 0x1fba <KEYPAD_4x4_adjustKeyNumber+0x100>
    1f3e:	37 c0       	rjmp	.+110    	; 0x1fae <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1f40:	2b 81       	ldd	r18, Y+3	; 0x03
    1f42:	3c 81       	ldd	r19, Y+4	; 0x04
    1f44:	2c 30       	cpi	r18, 0x0C	; 12
    1f46:	31 05       	cpc	r19, r1
    1f48:	09 f4       	brne	.+2      	; 0x1f4c <KEYPAD_4x4_adjustKeyNumber+0x92>
    1f4a:	46 c0       	rjmp	.+140    	; 0x1fd8 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f50:	8d 30       	cpi	r24, 0x0D	; 13
    1f52:	91 05       	cpc	r25, r1
    1f54:	5c f4       	brge	.+22     	; 0x1f6c <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1f56:	2b 81       	ldd	r18, Y+3	; 0x03
    1f58:	3c 81       	ldd	r19, Y+4	; 0x04
    1f5a:	2a 30       	cpi	r18, 0x0A	; 10
    1f5c:	31 05       	cpc	r19, r1
    1f5e:	b1 f1       	breq	.+108    	; 0x1fcc <KEYPAD_4x4_adjustKeyNumber+0x112>
    1f60:	8b 81       	ldd	r24, Y+3	; 0x03
    1f62:	9c 81       	ldd	r25, Y+4	; 0x04
    1f64:	8b 30       	cpi	r24, 0x0B	; 11
    1f66:	91 05       	cpc	r25, r1
    1f68:	a4 f5       	brge	.+104    	; 0x1fd2 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1f6a:	2d c0       	rjmp	.+90     	; 0x1fc6 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1f6c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f6e:	3c 81       	ldd	r19, Y+4	; 0x04
    1f70:	2e 30       	cpi	r18, 0x0E	; 14
    1f72:	31 05       	cpc	r19, r1
    1f74:	b9 f1       	breq	.+110    	; 0x1fe4 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1f76:	8b 81       	ldd	r24, Y+3	; 0x03
    1f78:	9c 81       	ldd	r25, Y+4	; 0x04
    1f7a:	8e 30       	cpi	r24, 0x0E	; 14
    1f7c:	91 05       	cpc	r25, r1
    1f7e:	7c f1       	brlt	.+94     	; 0x1fde <KEYPAD_4x4_adjustKeyNumber+0x124>
    1f80:	2b 81       	ldd	r18, Y+3	; 0x03
    1f82:	3c 81       	ldd	r19, Y+4	; 0x04
    1f84:	2f 30       	cpi	r18, 0x0F	; 15
    1f86:	31 05       	cpc	r19, r1
    1f88:	79 f1       	breq	.+94     	; 0x1fe8 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1f8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8e:	80 31       	cpi	r24, 0x10	; 16
    1f90:	91 05       	cpc	r25, r1
    1f92:	69 f1       	breq	.+90     	; 0x1fee <KEYPAD_4x4_adjustKeyNumber+0x134>
    1f94:	2f c0       	rjmp	.+94     	; 0x1ff4 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1f96:	87 e0       	ldi	r24, 0x07	; 7
    1f98:	89 83       	std	Y+1, r24	; 0x01
    1f9a:	2e c0       	rjmp	.+92     	; 0x1ff8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1f9c:	88 e0       	ldi	r24, 0x08	; 8
    1f9e:	89 83       	std	Y+1, r24	; 0x01
    1fa0:	2b c0       	rjmp	.+86     	; 0x1ff8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1fa2:	89 e0       	ldi	r24, 0x09	; 9
    1fa4:	89 83       	std	Y+1, r24	; 0x01
    1fa6:	28 c0       	rjmp	.+80     	; 0x1ff8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '/'; // ASCII Code of %
    1fa8:	8f e2       	ldi	r24, 0x2F	; 47
    1faa:	89 83       	std	Y+1, r24	; 0x01
    1fac:	25 c0       	rjmp	.+74     	; 0x1ff8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1fae:	84 e0       	ldi	r24, 0x04	; 4
    1fb0:	89 83       	std	Y+1, r24	; 0x01
    1fb2:	22 c0       	rjmp	.+68     	; 0x1ff8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1fb4:	85 e0       	ldi	r24, 0x05	; 5
    1fb6:	89 83       	std	Y+1, r24	; 0x01
    1fb8:	1f c0       	rjmp	.+62     	; 0x1ff8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1fba:	86 e0       	ldi	r24, 0x06	; 6
    1fbc:	89 83       	std	Y+1, r24	; 0x01
    1fbe:	1c c0       	rjmp	.+56     	; 0x1ff8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1fc0:	8a e2       	ldi	r24, 0x2A	; 42
    1fc2:	89 83       	std	Y+1, r24	; 0x01
    1fc4:	19 c0       	rjmp	.+50     	; 0x1ff8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
    1fc8:	89 83       	std	Y+1, r24	; 0x01
    1fca:	16 c0       	rjmp	.+44     	; 0x1ff8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1fcc:	82 e0       	ldi	r24, 0x02	; 2
    1fce:	89 83       	std	Y+1, r24	; 0x01
    1fd0:	13 c0       	rjmp	.+38     	; 0x1ff8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1fd2:	83 e0       	ldi	r24, 0x03	; 3
    1fd4:	89 83       	std	Y+1, r24	; 0x01
    1fd6:	10 c0       	rjmp	.+32     	; 0x1ff8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1fd8:	8d e2       	ldi	r24, 0x2D	; 45
    1fda:	89 83       	std	Y+1, r24	; 0x01
    1fdc:	0d c0       	rjmp	.+26     	; 0x1ff8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1fde:	8d e0       	ldi	r24, 0x0D	; 13
    1fe0:	89 83       	std	Y+1, r24	; 0x01
    1fe2:	0a c0       	rjmp	.+20     	; 0x1ff8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1fe4:	19 82       	std	Y+1, r1	; 0x01
    1fe6:	08 c0       	rjmp	.+16     	; 0x1ff8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1fe8:	8d e3       	ldi	r24, 0x3D	; 61
    1fea:	89 83       	std	Y+1, r24	; 0x01
    1fec:	05 c0       	rjmp	.+10     	; 0x1ff8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1fee:	8b e2       	ldi	r24, 0x2B	; 43
    1ff0:	89 83       	std	Y+1, r24	; 0x01
    1ff2:	02 c0       	rjmp	.+4      	; 0x1ff8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff6:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1ff8:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1ffa:	0f 90       	pop	r0
    1ffc:	0f 90       	pop	r0
    1ffe:	0f 90       	pop	r0
    2000:	0f 90       	pop	r0
    2002:	cf 91       	pop	r28
    2004:	df 91       	pop	r29
    2006:	08 95       	ret

00002008 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2008:	df 93       	push	r29
    200a:	cf 93       	push	r28
    200c:	cd b7       	in	r28, 0x3d	; 61
    200e:	de b7       	in	r29, 0x3e	; 62
    2010:	2e 97       	sbiw	r28, 0x0e	; 14
    2012:	0f b6       	in	r0, 0x3f	; 63
    2014:	f8 94       	cli
    2016:	de bf       	out	0x3e, r29	; 62
    2018:	0f be       	out	0x3f, r0	; 63
    201a:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    201c:	80 e0       	ldi	r24, 0x00	; 0
    201e:	61 e0       	ldi	r22, 0x01	; 1
    2020:	41 e0       	ldi	r20, 0x01	; 1
    2022:	0e 94 32 0b 	call	0x1664	; 0x1664 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2026:	80 e0       	ldi	r24, 0x00	; 0
    2028:	62 e0       	ldi	r22, 0x02	; 2
    202a:	41 e0       	ldi	r20, 0x01	; 1
    202c:	0e 94 32 0b 	call	0x1664	; 0x1664 <GPIO_setupPinDirection>
    2030:	80 e0       	ldi	r24, 0x00	; 0
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	a0 ea       	ldi	r26, 0xA0	; 160
    2036:	b1 e4       	ldi	r27, 0x41	; 65
    2038:	8b 87       	std	Y+11, r24	; 0x0b
    203a:	9c 87       	std	Y+12, r25	; 0x0c
    203c:	ad 87       	std	Y+13, r26	; 0x0d
    203e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2040:	6b 85       	ldd	r22, Y+11	; 0x0b
    2042:	7c 85       	ldd	r23, Y+12	; 0x0c
    2044:	8d 85       	ldd	r24, Y+13	; 0x0d
    2046:	9e 85       	ldd	r25, Y+14	; 0x0e
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	4a e7       	ldi	r20, 0x7A	; 122
    204e:	55 e4       	ldi	r21, 0x45	; 69
    2050:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2054:	dc 01       	movw	r26, r24
    2056:	cb 01       	movw	r24, r22
    2058:	8f 83       	std	Y+7, r24	; 0x07
    205a:	98 87       	std	Y+8, r25	; 0x08
    205c:	a9 87       	std	Y+9, r26	; 0x09
    205e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2060:	6f 81       	ldd	r22, Y+7	; 0x07
    2062:	78 85       	ldd	r23, Y+8	; 0x08
    2064:	89 85       	ldd	r24, Y+9	; 0x09
    2066:	9a 85       	ldd	r25, Y+10	; 0x0a
    2068:	20 e0       	ldi	r18, 0x00	; 0
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	40 e8       	ldi	r20, 0x80	; 128
    206e:	5f e3       	ldi	r21, 0x3F	; 63
    2070:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2074:	88 23       	and	r24, r24
    2076:	2c f4       	brge	.+10     	; 0x2082 <LCD_init+0x7a>
		__ticks = 1;
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	9e 83       	std	Y+6, r25	; 0x06
    207e:	8d 83       	std	Y+5, r24	; 0x05
    2080:	3f c0       	rjmp	.+126    	; 0x2100 <LCD_init+0xf8>
	else if (__tmp > 65535)
    2082:	6f 81       	ldd	r22, Y+7	; 0x07
    2084:	78 85       	ldd	r23, Y+8	; 0x08
    2086:	89 85       	ldd	r24, Y+9	; 0x09
    2088:	9a 85       	ldd	r25, Y+10	; 0x0a
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	3f ef       	ldi	r19, 0xFF	; 255
    208e:	4f e7       	ldi	r20, 0x7F	; 127
    2090:	57 e4       	ldi	r21, 0x47	; 71
    2092:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2096:	18 16       	cp	r1, r24
    2098:	4c f5       	brge	.+82     	; 0x20ec <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    209a:	6b 85       	ldd	r22, Y+11	; 0x0b
    209c:	7c 85       	ldd	r23, Y+12	; 0x0c
    209e:	8d 85       	ldd	r24, Y+13	; 0x0d
    20a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    20a2:	20 e0       	ldi	r18, 0x00	; 0
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	40 e2       	ldi	r20, 0x20	; 32
    20a8:	51 e4       	ldi	r21, 0x41	; 65
    20aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20ae:	dc 01       	movw	r26, r24
    20b0:	cb 01       	movw	r24, r22
    20b2:	bc 01       	movw	r22, r24
    20b4:	cd 01       	movw	r24, r26
    20b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20ba:	dc 01       	movw	r26, r24
    20bc:	cb 01       	movw	r24, r22
    20be:	9e 83       	std	Y+6, r25	; 0x06
    20c0:	8d 83       	std	Y+5, r24	; 0x05
    20c2:	0f c0       	rjmp	.+30     	; 0x20e2 <LCD_init+0xda>
    20c4:	80 e9       	ldi	r24, 0x90	; 144
    20c6:	91 e0       	ldi	r25, 0x01	; 1
    20c8:	9c 83       	std	Y+4, r25	; 0x04
    20ca:	8b 83       	std	Y+3, r24	; 0x03
    20cc:	8b 81       	ldd	r24, Y+3	; 0x03
    20ce:	9c 81       	ldd	r25, Y+4	; 0x04
    20d0:	01 97       	sbiw	r24, 0x01	; 1
    20d2:	f1 f7       	brne	.-4      	; 0x20d0 <LCD_init+0xc8>
    20d4:	9c 83       	std	Y+4, r25	; 0x04
    20d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d8:	8d 81       	ldd	r24, Y+5	; 0x05
    20da:	9e 81       	ldd	r25, Y+6	; 0x06
    20dc:	01 97       	sbiw	r24, 0x01	; 1
    20de:	9e 83       	std	Y+6, r25	; 0x06
    20e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20e2:	8d 81       	ldd	r24, Y+5	; 0x05
    20e4:	9e 81       	ldd	r25, Y+6	; 0x06
    20e6:	00 97       	sbiw	r24, 0x00	; 0
    20e8:	69 f7       	brne	.-38     	; 0x20c4 <LCD_init+0xbc>
    20ea:	14 c0       	rjmp	.+40     	; 0x2114 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ec:	6f 81       	ldd	r22, Y+7	; 0x07
    20ee:	78 85       	ldd	r23, Y+8	; 0x08
    20f0:	89 85       	ldd	r24, Y+9	; 0x09
    20f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	9e 83       	std	Y+6, r25	; 0x06
    20fe:	8d 83       	std	Y+5, r24	; 0x05
    2100:	8d 81       	ldd	r24, Y+5	; 0x05
    2102:	9e 81       	ldd	r25, Y+6	; 0x06
    2104:	9a 83       	std	Y+2, r25	; 0x02
    2106:	89 83       	std	Y+1, r24	; 0x01
    2108:	89 81       	ldd	r24, Y+1	; 0x01
    210a:	9a 81       	ldd	r25, Y+2	; 0x02
    210c:	01 97       	sbiw	r24, 0x01	; 1
    210e:	f1 f7       	brne	.-4      	; 0x210c <LCD_init+0x104>
    2110:	9a 83       	std	Y+2, r25	; 0x02
    2112:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    2114:	80 e0       	ldi	r24, 0x00	; 0
    2116:	63 e0       	ldi	r22, 0x03	; 3
    2118:	41 e0       	ldi	r20, 0x01	; 1
    211a:	0e 94 32 0b 	call	0x1664	; 0x1664 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    211e:	80 e0       	ldi	r24, 0x00	; 0
    2120:	64 e0       	ldi	r22, 0x04	; 4
    2122:	41 e0       	ldi	r20, 0x01	; 1
    2124:	0e 94 32 0b 	call	0x1664	; 0x1664 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    2128:	80 e0       	ldi	r24, 0x00	; 0
    212a:	65 e0       	ldi	r22, 0x05	; 5
    212c:	41 e0       	ldi	r20, 0x01	; 1
    212e:	0e 94 32 0b 	call	0x1664	; 0x1664 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    2132:	80 e0       	ldi	r24, 0x00	; 0
    2134:	66 e0       	ldi	r22, 0x06	; 6
    2136:	41 e0       	ldi	r20, 0x01	; 1
    2138:	0e 94 32 0b 	call	0x1664	; 0x1664 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    213c:	83 e3       	ldi	r24, 0x33	; 51
    213e:	0e 94 b6 10 	call	0x216c	; 0x216c <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    2142:	82 e3       	ldi	r24, 0x32	; 50
    2144:	0e 94 b6 10 	call	0x216c	; 0x216c <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    2148:	88 e2       	ldi	r24, 0x28	; 40
    214a:	0e 94 b6 10 	call	0x216c	; 0x216c <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    214e:	8c e0       	ldi	r24, 0x0C	; 12
    2150:	0e 94 b6 10 	call	0x216c	; 0x216c <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2154:	81 e0       	ldi	r24, 0x01	; 1
    2156:	0e 94 b6 10 	call	0x216c	; 0x216c <LCD_sendCommand>
}
    215a:	2e 96       	adiw	r28, 0x0e	; 14
    215c:	0f b6       	in	r0, 0x3f	; 63
    215e:	f8 94       	cli
    2160:	de bf       	out	0x3e, r29	; 62
    2162:	0f be       	out	0x3f, r0	; 63
    2164:	cd bf       	out	0x3d, r28	; 61
    2166:	cf 91       	pop	r28
    2168:	df 91       	pop	r29
    216a:	08 95       	ret

0000216c <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    216c:	0f 93       	push	r16
    216e:	1f 93       	push	r17
    2170:	df 93       	push	r29
    2172:	cf 93       	push	r28
    2174:	cd b7       	in	r28, 0x3d	; 61
    2176:	de b7       	in	r29, 0x3e	; 62
    2178:	c3 56       	subi	r28, 0x63	; 99
    217a:	d0 40       	sbci	r29, 0x00	; 0
    217c:	0f b6       	in	r0, 0x3f	; 63
    217e:	f8 94       	cli
    2180:	de bf       	out	0x3e, r29	; 62
    2182:	0f be       	out	0x3f, r0	; 63
    2184:	cd bf       	out	0x3d, r28	; 61
    2186:	fe 01       	movw	r30, r28
    2188:	ed 59       	subi	r30, 0x9D	; 157
    218a:	ff 4f       	sbci	r31, 0xFF	; 255
    218c:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    218e:	80 e0       	ldi	r24, 0x00	; 0
    2190:	61 e0       	ldi	r22, 0x01	; 1
    2192:	40 e0       	ldi	r20, 0x00	; 0
    2194:	0e 94 1d 0c 	call	0x183a	; 0x183a <GPIO_writePin>
    2198:	fe 01       	movw	r30, r28
    219a:	e1 5a       	subi	r30, 0xA1	; 161
    219c:	ff 4f       	sbci	r31, 0xFF	; 255
    219e:	80 e0       	ldi	r24, 0x00	; 0
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	a0 e8       	ldi	r26, 0x80	; 128
    21a4:	bf e3       	ldi	r27, 0x3F	; 63
    21a6:	80 83       	st	Z, r24
    21a8:	91 83       	std	Z+1, r25	; 0x01
    21aa:	a2 83       	std	Z+2, r26	; 0x02
    21ac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ae:	8e 01       	movw	r16, r28
    21b0:	05 5a       	subi	r16, 0xA5	; 165
    21b2:	1f 4f       	sbci	r17, 0xFF	; 255
    21b4:	fe 01       	movw	r30, r28
    21b6:	e1 5a       	subi	r30, 0xA1	; 161
    21b8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ba:	60 81       	ld	r22, Z
    21bc:	71 81       	ldd	r23, Z+1	; 0x01
    21be:	82 81       	ldd	r24, Z+2	; 0x02
    21c0:	93 81       	ldd	r25, Z+3	; 0x03
    21c2:	20 e0       	ldi	r18, 0x00	; 0
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	4a e7       	ldi	r20, 0x7A	; 122
    21c8:	55 e4       	ldi	r21, 0x45	; 69
    21ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	f8 01       	movw	r30, r16
    21d4:	80 83       	st	Z, r24
    21d6:	91 83       	std	Z+1, r25	; 0x01
    21d8:	a2 83       	std	Z+2, r26	; 0x02
    21da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21dc:	fe 01       	movw	r30, r28
    21de:	e5 5a       	subi	r30, 0xA5	; 165
    21e0:	ff 4f       	sbci	r31, 0xFF	; 255
    21e2:	60 81       	ld	r22, Z
    21e4:	71 81       	ldd	r23, Z+1	; 0x01
    21e6:	82 81       	ldd	r24, Z+2	; 0x02
    21e8:	93 81       	ldd	r25, Z+3	; 0x03
    21ea:	20 e0       	ldi	r18, 0x00	; 0
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	40 e8       	ldi	r20, 0x80	; 128
    21f0:	5f e3       	ldi	r21, 0x3F	; 63
    21f2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21f6:	88 23       	and	r24, r24
    21f8:	44 f4       	brge	.+16     	; 0x220a <LCD_sendCommand+0x9e>
		__ticks = 1;
    21fa:	fe 01       	movw	r30, r28
    21fc:	e7 5a       	subi	r30, 0xA7	; 167
    21fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2200:	81 e0       	ldi	r24, 0x01	; 1
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	91 83       	std	Z+1, r25	; 0x01
    2206:	80 83       	st	Z, r24
    2208:	64 c0       	rjmp	.+200    	; 0x22d2 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    220a:	fe 01       	movw	r30, r28
    220c:	e5 5a       	subi	r30, 0xA5	; 165
    220e:	ff 4f       	sbci	r31, 0xFF	; 255
    2210:	60 81       	ld	r22, Z
    2212:	71 81       	ldd	r23, Z+1	; 0x01
    2214:	82 81       	ldd	r24, Z+2	; 0x02
    2216:	93 81       	ldd	r25, Z+3	; 0x03
    2218:	20 e0       	ldi	r18, 0x00	; 0
    221a:	3f ef       	ldi	r19, 0xFF	; 255
    221c:	4f e7       	ldi	r20, 0x7F	; 127
    221e:	57 e4       	ldi	r21, 0x47	; 71
    2220:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2224:	18 16       	cp	r1, r24
    2226:	0c f0       	brlt	.+2      	; 0x222a <LCD_sendCommand+0xbe>
    2228:	43 c0       	rjmp	.+134    	; 0x22b0 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    222a:	fe 01       	movw	r30, r28
    222c:	e1 5a       	subi	r30, 0xA1	; 161
    222e:	ff 4f       	sbci	r31, 0xFF	; 255
    2230:	60 81       	ld	r22, Z
    2232:	71 81       	ldd	r23, Z+1	; 0x01
    2234:	82 81       	ldd	r24, Z+2	; 0x02
    2236:	93 81       	ldd	r25, Z+3	; 0x03
    2238:	20 e0       	ldi	r18, 0x00	; 0
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	40 e2       	ldi	r20, 0x20	; 32
    223e:	51 e4       	ldi	r21, 0x41	; 65
    2240:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	8e 01       	movw	r16, r28
    224a:	07 5a       	subi	r16, 0xA7	; 167
    224c:	1f 4f       	sbci	r17, 0xFF	; 255
    224e:	bc 01       	movw	r22, r24
    2250:	cd 01       	movw	r24, r26
    2252:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2256:	dc 01       	movw	r26, r24
    2258:	cb 01       	movw	r24, r22
    225a:	f8 01       	movw	r30, r16
    225c:	91 83       	std	Z+1, r25	; 0x01
    225e:	80 83       	st	Z, r24
    2260:	1f c0       	rjmp	.+62     	; 0x22a0 <LCD_sendCommand+0x134>
    2262:	fe 01       	movw	r30, r28
    2264:	e9 5a       	subi	r30, 0xA9	; 169
    2266:	ff 4f       	sbci	r31, 0xFF	; 255
    2268:	80 e9       	ldi	r24, 0x90	; 144
    226a:	91 e0       	ldi	r25, 0x01	; 1
    226c:	91 83       	std	Z+1, r25	; 0x01
    226e:	80 83       	st	Z, r24
    2270:	fe 01       	movw	r30, r28
    2272:	e9 5a       	subi	r30, 0xA9	; 169
    2274:	ff 4f       	sbci	r31, 0xFF	; 255
    2276:	80 81       	ld	r24, Z
    2278:	91 81       	ldd	r25, Z+1	; 0x01
    227a:	01 97       	sbiw	r24, 0x01	; 1
    227c:	f1 f7       	brne	.-4      	; 0x227a <LCD_sendCommand+0x10e>
    227e:	fe 01       	movw	r30, r28
    2280:	e9 5a       	subi	r30, 0xA9	; 169
    2282:	ff 4f       	sbci	r31, 0xFF	; 255
    2284:	91 83       	std	Z+1, r25	; 0x01
    2286:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2288:	de 01       	movw	r26, r28
    228a:	a7 5a       	subi	r26, 0xA7	; 167
    228c:	bf 4f       	sbci	r27, 0xFF	; 255
    228e:	fe 01       	movw	r30, r28
    2290:	e7 5a       	subi	r30, 0xA7	; 167
    2292:	ff 4f       	sbci	r31, 0xFF	; 255
    2294:	80 81       	ld	r24, Z
    2296:	91 81       	ldd	r25, Z+1	; 0x01
    2298:	01 97       	sbiw	r24, 0x01	; 1
    229a:	11 96       	adiw	r26, 0x01	; 1
    229c:	9c 93       	st	X, r25
    229e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22a0:	fe 01       	movw	r30, r28
    22a2:	e7 5a       	subi	r30, 0xA7	; 167
    22a4:	ff 4f       	sbci	r31, 0xFF	; 255
    22a6:	80 81       	ld	r24, Z
    22a8:	91 81       	ldd	r25, Z+1	; 0x01
    22aa:	00 97       	sbiw	r24, 0x00	; 0
    22ac:	d1 f6       	brne	.-76     	; 0x2262 <LCD_sendCommand+0xf6>
    22ae:	27 c0       	rjmp	.+78     	; 0x22fe <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22b0:	8e 01       	movw	r16, r28
    22b2:	07 5a       	subi	r16, 0xA7	; 167
    22b4:	1f 4f       	sbci	r17, 0xFF	; 255
    22b6:	fe 01       	movw	r30, r28
    22b8:	e5 5a       	subi	r30, 0xA5	; 165
    22ba:	ff 4f       	sbci	r31, 0xFF	; 255
    22bc:	60 81       	ld	r22, Z
    22be:	71 81       	ldd	r23, Z+1	; 0x01
    22c0:	82 81       	ldd	r24, Z+2	; 0x02
    22c2:	93 81       	ldd	r25, Z+3	; 0x03
    22c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22c8:	dc 01       	movw	r26, r24
    22ca:	cb 01       	movw	r24, r22
    22cc:	f8 01       	movw	r30, r16
    22ce:	91 83       	std	Z+1, r25	; 0x01
    22d0:	80 83       	st	Z, r24
    22d2:	de 01       	movw	r26, r28
    22d4:	ab 5a       	subi	r26, 0xAB	; 171
    22d6:	bf 4f       	sbci	r27, 0xFF	; 255
    22d8:	fe 01       	movw	r30, r28
    22da:	e7 5a       	subi	r30, 0xA7	; 167
    22dc:	ff 4f       	sbci	r31, 0xFF	; 255
    22de:	80 81       	ld	r24, Z
    22e0:	91 81       	ldd	r25, Z+1	; 0x01
    22e2:	8d 93       	st	X+, r24
    22e4:	9c 93       	st	X, r25
    22e6:	fe 01       	movw	r30, r28
    22e8:	eb 5a       	subi	r30, 0xAB	; 171
    22ea:	ff 4f       	sbci	r31, 0xFF	; 255
    22ec:	80 81       	ld	r24, Z
    22ee:	91 81       	ldd	r25, Z+1	; 0x01
    22f0:	01 97       	sbiw	r24, 0x01	; 1
    22f2:	f1 f7       	brne	.-4      	; 0x22f0 <LCD_sendCommand+0x184>
    22f4:	fe 01       	movw	r30, r28
    22f6:	eb 5a       	subi	r30, 0xAB	; 171
    22f8:	ff 4f       	sbci	r31, 0xFF	; 255
    22fa:	91 83       	std	Z+1, r25	; 0x01
    22fc:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    22fe:	80 e0       	ldi	r24, 0x00	; 0
    2300:	62 e0       	ldi	r22, 0x02	; 2
    2302:	41 e0       	ldi	r20, 0x01	; 1
    2304:	0e 94 1d 0c 	call	0x183a	; 0x183a <GPIO_writePin>
    2308:	fe 01       	movw	r30, r28
    230a:	ef 5a       	subi	r30, 0xAF	; 175
    230c:	ff 4f       	sbci	r31, 0xFF	; 255
    230e:	80 e0       	ldi	r24, 0x00	; 0
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	a0 e8       	ldi	r26, 0x80	; 128
    2314:	bf e3       	ldi	r27, 0x3F	; 63
    2316:	80 83       	st	Z, r24
    2318:	91 83       	std	Z+1, r25	; 0x01
    231a:	a2 83       	std	Z+2, r26	; 0x02
    231c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    231e:	8e 01       	movw	r16, r28
    2320:	03 5b       	subi	r16, 0xB3	; 179
    2322:	1f 4f       	sbci	r17, 0xFF	; 255
    2324:	fe 01       	movw	r30, r28
    2326:	ef 5a       	subi	r30, 0xAF	; 175
    2328:	ff 4f       	sbci	r31, 0xFF	; 255
    232a:	60 81       	ld	r22, Z
    232c:	71 81       	ldd	r23, Z+1	; 0x01
    232e:	82 81       	ldd	r24, Z+2	; 0x02
    2330:	93 81       	ldd	r25, Z+3	; 0x03
    2332:	20 e0       	ldi	r18, 0x00	; 0
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	4a e7       	ldi	r20, 0x7A	; 122
    2338:	55 e4       	ldi	r21, 0x45	; 69
    233a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    233e:	dc 01       	movw	r26, r24
    2340:	cb 01       	movw	r24, r22
    2342:	f8 01       	movw	r30, r16
    2344:	80 83       	st	Z, r24
    2346:	91 83       	std	Z+1, r25	; 0x01
    2348:	a2 83       	std	Z+2, r26	; 0x02
    234a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    234c:	fe 01       	movw	r30, r28
    234e:	e3 5b       	subi	r30, 0xB3	; 179
    2350:	ff 4f       	sbci	r31, 0xFF	; 255
    2352:	60 81       	ld	r22, Z
    2354:	71 81       	ldd	r23, Z+1	; 0x01
    2356:	82 81       	ldd	r24, Z+2	; 0x02
    2358:	93 81       	ldd	r25, Z+3	; 0x03
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	40 e8       	ldi	r20, 0x80	; 128
    2360:	5f e3       	ldi	r21, 0x3F	; 63
    2362:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2366:	88 23       	and	r24, r24
    2368:	44 f4       	brge	.+16     	; 0x237a <LCD_sendCommand+0x20e>
		__ticks = 1;
    236a:	fe 01       	movw	r30, r28
    236c:	e5 5b       	subi	r30, 0xB5	; 181
    236e:	ff 4f       	sbci	r31, 0xFF	; 255
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	91 83       	std	Z+1, r25	; 0x01
    2376:	80 83       	st	Z, r24
    2378:	64 c0       	rjmp	.+200    	; 0x2442 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    237a:	fe 01       	movw	r30, r28
    237c:	e3 5b       	subi	r30, 0xB3	; 179
    237e:	ff 4f       	sbci	r31, 0xFF	; 255
    2380:	60 81       	ld	r22, Z
    2382:	71 81       	ldd	r23, Z+1	; 0x01
    2384:	82 81       	ldd	r24, Z+2	; 0x02
    2386:	93 81       	ldd	r25, Z+3	; 0x03
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	3f ef       	ldi	r19, 0xFF	; 255
    238c:	4f e7       	ldi	r20, 0x7F	; 127
    238e:	57 e4       	ldi	r21, 0x47	; 71
    2390:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2394:	18 16       	cp	r1, r24
    2396:	0c f0       	brlt	.+2      	; 0x239a <LCD_sendCommand+0x22e>
    2398:	43 c0       	rjmp	.+134    	; 0x2420 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    239a:	fe 01       	movw	r30, r28
    239c:	ef 5a       	subi	r30, 0xAF	; 175
    239e:	ff 4f       	sbci	r31, 0xFF	; 255
    23a0:	60 81       	ld	r22, Z
    23a2:	71 81       	ldd	r23, Z+1	; 0x01
    23a4:	82 81       	ldd	r24, Z+2	; 0x02
    23a6:	93 81       	ldd	r25, Z+3	; 0x03
    23a8:	20 e0       	ldi	r18, 0x00	; 0
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	40 e2       	ldi	r20, 0x20	; 32
    23ae:	51 e4       	ldi	r21, 0x41	; 65
    23b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23b4:	dc 01       	movw	r26, r24
    23b6:	cb 01       	movw	r24, r22
    23b8:	8e 01       	movw	r16, r28
    23ba:	05 5b       	subi	r16, 0xB5	; 181
    23bc:	1f 4f       	sbci	r17, 0xFF	; 255
    23be:	bc 01       	movw	r22, r24
    23c0:	cd 01       	movw	r24, r26
    23c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23c6:	dc 01       	movw	r26, r24
    23c8:	cb 01       	movw	r24, r22
    23ca:	f8 01       	movw	r30, r16
    23cc:	91 83       	std	Z+1, r25	; 0x01
    23ce:	80 83       	st	Z, r24
    23d0:	1f c0       	rjmp	.+62     	; 0x2410 <LCD_sendCommand+0x2a4>
    23d2:	fe 01       	movw	r30, r28
    23d4:	e7 5b       	subi	r30, 0xB7	; 183
    23d6:	ff 4f       	sbci	r31, 0xFF	; 255
    23d8:	80 e9       	ldi	r24, 0x90	; 144
    23da:	91 e0       	ldi	r25, 0x01	; 1
    23dc:	91 83       	std	Z+1, r25	; 0x01
    23de:	80 83       	st	Z, r24
    23e0:	fe 01       	movw	r30, r28
    23e2:	e7 5b       	subi	r30, 0xB7	; 183
    23e4:	ff 4f       	sbci	r31, 0xFF	; 255
    23e6:	80 81       	ld	r24, Z
    23e8:	91 81       	ldd	r25, Z+1	; 0x01
    23ea:	01 97       	sbiw	r24, 0x01	; 1
    23ec:	f1 f7       	brne	.-4      	; 0x23ea <LCD_sendCommand+0x27e>
    23ee:	fe 01       	movw	r30, r28
    23f0:	e7 5b       	subi	r30, 0xB7	; 183
    23f2:	ff 4f       	sbci	r31, 0xFF	; 255
    23f4:	91 83       	std	Z+1, r25	; 0x01
    23f6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f8:	de 01       	movw	r26, r28
    23fa:	a5 5b       	subi	r26, 0xB5	; 181
    23fc:	bf 4f       	sbci	r27, 0xFF	; 255
    23fe:	fe 01       	movw	r30, r28
    2400:	e5 5b       	subi	r30, 0xB5	; 181
    2402:	ff 4f       	sbci	r31, 0xFF	; 255
    2404:	80 81       	ld	r24, Z
    2406:	91 81       	ldd	r25, Z+1	; 0x01
    2408:	01 97       	sbiw	r24, 0x01	; 1
    240a:	11 96       	adiw	r26, 0x01	; 1
    240c:	9c 93       	st	X, r25
    240e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2410:	fe 01       	movw	r30, r28
    2412:	e5 5b       	subi	r30, 0xB5	; 181
    2414:	ff 4f       	sbci	r31, 0xFF	; 255
    2416:	80 81       	ld	r24, Z
    2418:	91 81       	ldd	r25, Z+1	; 0x01
    241a:	00 97       	sbiw	r24, 0x00	; 0
    241c:	d1 f6       	brne	.-76     	; 0x23d2 <LCD_sendCommand+0x266>
    241e:	27 c0       	rjmp	.+78     	; 0x246e <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2420:	8e 01       	movw	r16, r28
    2422:	05 5b       	subi	r16, 0xB5	; 181
    2424:	1f 4f       	sbci	r17, 0xFF	; 255
    2426:	fe 01       	movw	r30, r28
    2428:	e3 5b       	subi	r30, 0xB3	; 179
    242a:	ff 4f       	sbci	r31, 0xFF	; 255
    242c:	60 81       	ld	r22, Z
    242e:	71 81       	ldd	r23, Z+1	; 0x01
    2430:	82 81       	ldd	r24, Z+2	; 0x02
    2432:	93 81       	ldd	r25, Z+3	; 0x03
    2434:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2438:	dc 01       	movw	r26, r24
    243a:	cb 01       	movw	r24, r22
    243c:	f8 01       	movw	r30, r16
    243e:	91 83       	std	Z+1, r25	; 0x01
    2440:	80 83       	st	Z, r24
    2442:	de 01       	movw	r26, r28
    2444:	a9 5b       	subi	r26, 0xB9	; 185
    2446:	bf 4f       	sbci	r27, 0xFF	; 255
    2448:	fe 01       	movw	r30, r28
    244a:	e5 5b       	subi	r30, 0xB5	; 181
    244c:	ff 4f       	sbci	r31, 0xFF	; 255
    244e:	80 81       	ld	r24, Z
    2450:	91 81       	ldd	r25, Z+1	; 0x01
    2452:	8d 93       	st	X+, r24
    2454:	9c 93       	st	X, r25
    2456:	fe 01       	movw	r30, r28
    2458:	e9 5b       	subi	r30, 0xB9	; 185
    245a:	ff 4f       	sbci	r31, 0xFF	; 255
    245c:	80 81       	ld	r24, Z
    245e:	91 81       	ldd	r25, Z+1	; 0x01
    2460:	01 97       	sbiw	r24, 0x01	; 1
    2462:	f1 f7       	brne	.-4      	; 0x2460 <LCD_sendCommand+0x2f4>
    2464:	fe 01       	movw	r30, r28
    2466:	e9 5b       	subi	r30, 0xB9	; 185
    2468:	ff 4f       	sbci	r31, 0xFF	; 255
    246a:	91 83       	std	Z+1, r25	; 0x01
    246c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    246e:	fe 01       	movw	r30, r28
    2470:	ed 59       	subi	r30, 0x9D	; 157
    2472:	ff 4f       	sbci	r31, 0xFF	; 255
    2474:	80 81       	ld	r24, Z
    2476:	88 2f       	mov	r24, r24
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	80 71       	andi	r24, 0x10	; 16
    247c:	90 70       	andi	r25, 0x00	; 0
    247e:	95 95       	asr	r25
    2480:	87 95       	ror	r24
    2482:	95 95       	asr	r25
    2484:	87 95       	ror	r24
    2486:	95 95       	asr	r25
    2488:	87 95       	ror	r24
    248a:	95 95       	asr	r25
    248c:	87 95       	ror	r24
    248e:	98 2f       	mov	r25, r24
    2490:	80 e0       	ldi	r24, 0x00	; 0
    2492:	63 e0       	ldi	r22, 0x03	; 3
    2494:	49 2f       	mov	r20, r25
    2496:	0e 94 1d 0c 	call	0x183a	; 0x183a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    249a:	fe 01       	movw	r30, r28
    249c:	ed 59       	subi	r30, 0x9D	; 157
    249e:	ff 4f       	sbci	r31, 0xFF	; 255
    24a0:	80 81       	ld	r24, Z
    24a2:	88 2f       	mov	r24, r24
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	80 72       	andi	r24, 0x20	; 32
    24a8:	90 70       	andi	r25, 0x00	; 0
    24aa:	95 95       	asr	r25
    24ac:	87 95       	ror	r24
    24ae:	95 95       	asr	r25
    24b0:	87 95       	ror	r24
    24b2:	95 95       	asr	r25
    24b4:	87 95       	ror	r24
    24b6:	95 95       	asr	r25
    24b8:	87 95       	ror	r24
    24ba:	95 95       	asr	r25
    24bc:	87 95       	ror	r24
    24be:	98 2f       	mov	r25, r24
    24c0:	80 e0       	ldi	r24, 0x00	; 0
    24c2:	64 e0       	ldi	r22, 0x04	; 4
    24c4:	49 2f       	mov	r20, r25
    24c6:	0e 94 1d 0c 	call	0x183a	; 0x183a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    24ca:	fe 01       	movw	r30, r28
    24cc:	ed 59       	subi	r30, 0x9D	; 157
    24ce:	ff 4f       	sbci	r31, 0xFF	; 255
    24d0:	80 81       	ld	r24, Z
    24d2:	88 2f       	mov	r24, r24
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	80 74       	andi	r24, 0x40	; 64
    24d8:	90 70       	andi	r25, 0x00	; 0
    24da:	08 2e       	mov	r0, r24
    24dc:	89 2f       	mov	r24, r25
    24de:	00 0c       	add	r0, r0
    24e0:	88 1f       	adc	r24, r24
    24e2:	99 0b       	sbc	r25, r25
    24e4:	00 0c       	add	r0, r0
    24e6:	88 1f       	adc	r24, r24
    24e8:	99 1f       	adc	r25, r25
    24ea:	98 2f       	mov	r25, r24
    24ec:	80 e0       	ldi	r24, 0x00	; 0
    24ee:	65 e0       	ldi	r22, 0x05	; 5
    24f0:	49 2f       	mov	r20, r25
    24f2:	0e 94 1d 0c 	call	0x183a	; 0x183a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    24f6:	fe 01       	movw	r30, r28
    24f8:	ed 59       	subi	r30, 0x9D	; 157
    24fa:	ff 4f       	sbci	r31, 0xFF	; 255
    24fc:	80 81       	ld	r24, Z
    24fe:	98 2f       	mov	r25, r24
    2500:	99 1f       	adc	r25, r25
    2502:	99 27       	eor	r25, r25
    2504:	99 1f       	adc	r25, r25
    2506:	80 e0       	ldi	r24, 0x00	; 0
    2508:	66 e0       	ldi	r22, 0x06	; 6
    250a:	49 2f       	mov	r20, r25
    250c:	0e 94 1d 0c 	call	0x183a	; 0x183a <GPIO_writePin>
    2510:	fe 01       	movw	r30, r28
    2512:	ed 5b       	subi	r30, 0xBD	; 189
    2514:	ff 4f       	sbci	r31, 0xFF	; 255
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	a0 e8       	ldi	r26, 0x80	; 128
    251c:	bf e3       	ldi	r27, 0x3F	; 63
    251e:	80 83       	st	Z, r24
    2520:	91 83       	std	Z+1, r25	; 0x01
    2522:	a2 83       	std	Z+2, r26	; 0x02
    2524:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2526:	8e 01       	movw	r16, r28
    2528:	01 5c       	subi	r16, 0xC1	; 193
    252a:	1f 4f       	sbci	r17, 0xFF	; 255
    252c:	fe 01       	movw	r30, r28
    252e:	ed 5b       	subi	r30, 0xBD	; 189
    2530:	ff 4f       	sbci	r31, 0xFF	; 255
    2532:	60 81       	ld	r22, Z
    2534:	71 81       	ldd	r23, Z+1	; 0x01
    2536:	82 81       	ldd	r24, Z+2	; 0x02
    2538:	93 81       	ldd	r25, Z+3	; 0x03
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	4a e7       	ldi	r20, 0x7A	; 122
    2540:	55 e4       	ldi	r21, 0x45	; 69
    2542:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2546:	dc 01       	movw	r26, r24
    2548:	cb 01       	movw	r24, r22
    254a:	f8 01       	movw	r30, r16
    254c:	80 83       	st	Z, r24
    254e:	91 83       	std	Z+1, r25	; 0x01
    2550:	a2 83       	std	Z+2, r26	; 0x02
    2552:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2554:	fe 01       	movw	r30, r28
    2556:	ff 96       	adiw	r30, 0x3f	; 63
    2558:	60 81       	ld	r22, Z
    255a:	71 81       	ldd	r23, Z+1	; 0x01
    255c:	82 81       	ldd	r24, Z+2	; 0x02
    255e:	93 81       	ldd	r25, Z+3	; 0x03
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	40 e8       	ldi	r20, 0x80	; 128
    2566:	5f e3       	ldi	r21, 0x3F	; 63
    2568:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    256c:	88 23       	and	r24, r24
    256e:	2c f4       	brge	.+10     	; 0x257a <LCD_sendCommand+0x40e>
		__ticks = 1;
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	9e af       	std	Y+62, r25	; 0x3e
    2576:	8d af       	std	Y+61, r24	; 0x3d
    2578:	46 c0       	rjmp	.+140    	; 0x2606 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    257a:	fe 01       	movw	r30, r28
    257c:	ff 96       	adiw	r30, 0x3f	; 63
    257e:	60 81       	ld	r22, Z
    2580:	71 81       	ldd	r23, Z+1	; 0x01
    2582:	82 81       	ldd	r24, Z+2	; 0x02
    2584:	93 81       	ldd	r25, Z+3	; 0x03
    2586:	20 e0       	ldi	r18, 0x00	; 0
    2588:	3f ef       	ldi	r19, 0xFF	; 255
    258a:	4f e7       	ldi	r20, 0x7F	; 127
    258c:	57 e4       	ldi	r21, 0x47	; 71
    258e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2592:	18 16       	cp	r1, r24
    2594:	64 f5       	brge	.+88     	; 0x25ee <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2596:	fe 01       	movw	r30, r28
    2598:	ed 5b       	subi	r30, 0xBD	; 189
    259a:	ff 4f       	sbci	r31, 0xFF	; 255
    259c:	60 81       	ld	r22, Z
    259e:	71 81       	ldd	r23, Z+1	; 0x01
    25a0:	82 81       	ldd	r24, Z+2	; 0x02
    25a2:	93 81       	ldd	r25, Z+3	; 0x03
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	40 e2       	ldi	r20, 0x20	; 32
    25aa:	51 e4       	ldi	r21, 0x41	; 65
    25ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25b0:	dc 01       	movw	r26, r24
    25b2:	cb 01       	movw	r24, r22
    25b4:	bc 01       	movw	r22, r24
    25b6:	cd 01       	movw	r24, r26
    25b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25bc:	dc 01       	movw	r26, r24
    25be:	cb 01       	movw	r24, r22
    25c0:	9e af       	std	Y+62, r25	; 0x3e
    25c2:	8d af       	std	Y+61, r24	; 0x3d
    25c4:	0f c0       	rjmp	.+30     	; 0x25e4 <LCD_sendCommand+0x478>
    25c6:	80 e9       	ldi	r24, 0x90	; 144
    25c8:	91 e0       	ldi	r25, 0x01	; 1
    25ca:	9c af       	std	Y+60, r25	; 0x3c
    25cc:	8b af       	std	Y+59, r24	; 0x3b
    25ce:	8b ad       	ldd	r24, Y+59	; 0x3b
    25d0:	9c ad       	ldd	r25, Y+60	; 0x3c
    25d2:	01 97       	sbiw	r24, 0x01	; 1
    25d4:	f1 f7       	brne	.-4      	; 0x25d2 <LCD_sendCommand+0x466>
    25d6:	9c af       	std	Y+60, r25	; 0x3c
    25d8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25da:	8d ad       	ldd	r24, Y+61	; 0x3d
    25dc:	9e ad       	ldd	r25, Y+62	; 0x3e
    25de:	01 97       	sbiw	r24, 0x01	; 1
    25e0:	9e af       	std	Y+62, r25	; 0x3e
    25e2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25e4:	8d ad       	ldd	r24, Y+61	; 0x3d
    25e6:	9e ad       	ldd	r25, Y+62	; 0x3e
    25e8:	00 97       	sbiw	r24, 0x00	; 0
    25ea:	69 f7       	brne	.-38     	; 0x25c6 <LCD_sendCommand+0x45a>
    25ec:	16 c0       	rjmp	.+44     	; 0x261a <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ee:	fe 01       	movw	r30, r28
    25f0:	ff 96       	adiw	r30, 0x3f	; 63
    25f2:	60 81       	ld	r22, Z
    25f4:	71 81       	ldd	r23, Z+1	; 0x01
    25f6:	82 81       	ldd	r24, Z+2	; 0x02
    25f8:	93 81       	ldd	r25, Z+3	; 0x03
    25fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25fe:	dc 01       	movw	r26, r24
    2600:	cb 01       	movw	r24, r22
    2602:	9e af       	std	Y+62, r25	; 0x3e
    2604:	8d af       	std	Y+61, r24	; 0x3d
    2606:	8d ad       	ldd	r24, Y+61	; 0x3d
    2608:	9e ad       	ldd	r25, Y+62	; 0x3e
    260a:	9a af       	std	Y+58, r25	; 0x3a
    260c:	89 af       	std	Y+57, r24	; 0x39
    260e:	89 ad       	ldd	r24, Y+57	; 0x39
    2610:	9a ad       	ldd	r25, Y+58	; 0x3a
    2612:	01 97       	sbiw	r24, 0x01	; 1
    2614:	f1 f7       	brne	.-4      	; 0x2612 <LCD_sendCommand+0x4a6>
    2616:	9a af       	std	Y+58, r25	; 0x3a
    2618:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    261a:	80 e0       	ldi	r24, 0x00	; 0
    261c:	62 e0       	ldi	r22, 0x02	; 2
    261e:	40 e0       	ldi	r20, 0x00	; 0
    2620:	0e 94 1d 0c 	call	0x183a	; 0x183a <GPIO_writePin>
    2624:	80 e0       	ldi	r24, 0x00	; 0
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	a0 e8       	ldi	r26, 0x80	; 128
    262a:	bf e3       	ldi	r27, 0x3F	; 63
    262c:	8d ab       	std	Y+53, r24	; 0x35
    262e:	9e ab       	std	Y+54, r25	; 0x36
    2630:	af ab       	std	Y+55, r26	; 0x37
    2632:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2634:	6d a9       	ldd	r22, Y+53	; 0x35
    2636:	7e a9       	ldd	r23, Y+54	; 0x36
    2638:	8f a9       	ldd	r24, Y+55	; 0x37
    263a:	98 ad       	ldd	r25, Y+56	; 0x38
    263c:	20 e0       	ldi	r18, 0x00	; 0
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	4a e7       	ldi	r20, 0x7A	; 122
    2642:	55 e4       	ldi	r21, 0x45	; 69
    2644:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2648:	dc 01       	movw	r26, r24
    264a:	cb 01       	movw	r24, r22
    264c:	89 ab       	std	Y+49, r24	; 0x31
    264e:	9a ab       	std	Y+50, r25	; 0x32
    2650:	ab ab       	std	Y+51, r26	; 0x33
    2652:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2654:	69 a9       	ldd	r22, Y+49	; 0x31
    2656:	7a a9       	ldd	r23, Y+50	; 0x32
    2658:	8b a9       	ldd	r24, Y+51	; 0x33
    265a:	9c a9       	ldd	r25, Y+52	; 0x34
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	40 e8       	ldi	r20, 0x80	; 128
    2662:	5f e3       	ldi	r21, 0x3F	; 63
    2664:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2668:	88 23       	and	r24, r24
    266a:	2c f4       	brge	.+10     	; 0x2676 <LCD_sendCommand+0x50a>
		__ticks = 1;
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	98 ab       	std	Y+48, r25	; 0x30
    2672:	8f a7       	std	Y+47, r24	; 0x2f
    2674:	3f c0       	rjmp	.+126    	; 0x26f4 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    2676:	69 a9       	ldd	r22, Y+49	; 0x31
    2678:	7a a9       	ldd	r23, Y+50	; 0x32
    267a:	8b a9       	ldd	r24, Y+51	; 0x33
    267c:	9c a9       	ldd	r25, Y+52	; 0x34
    267e:	20 e0       	ldi	r18, 0x00	; 0
    2680:	3f ef       	ldi	r19, 0xFF	; 255
    2682:	4f e7       	ldi	r20, 0x7F	; 127
    2684:	57 e4       	ldi	r21, 0x47	; 71
    2686:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    268a:	18 16       	cp	r1, r24
    268c:	4c f5       	brge	.+82     	; 0x26e0 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    268e:	6d a9       	ldd	r22, Y+53	; 0x35
    2690:	7e a9       	ldd	r23, Y+54	; 0x36
    2692:	8f a9       	ldd	r24, Y+55	; 0x37
    2694:	98 ad       	ldd	r25, Y+56	; 0x38
    2696:	20 e0       	ldi	r18, 0x00	; 0
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	40 e2       	ldi	r20, 0x20	; 32
    269c:	51 e4       	ldi	r21, 0x41	; 65
    269e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26a2:	dc 01       	movw	r26, r24
    26a4:	cb 01       	movw	r24, r22
    26a6:	bc 01       	movw	r22, r24
    26a8:	cd 01       	movw	r24, r26
    26aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26ae:	dc 01       	movw	r26, r24
    26b0:	cb 01       	movw	r24, r22
    26b2:	98 ab       	std	Y+48, r25	; 0x30
    26b4:	8f a7       	std	Y+47, r24	; 0x2f
    26b6:	0f c0       	rjmp	.+30     	; 0x26d6 <LCD_sendCommand+0x56a>
    26b8:	80 e9       	ldi	r24, 0x90	; 144
    26ba:	91 e0       	ldi	r25, 0x01	; 1
    26bc:	9e a7       	std	Y+46, r25	; 0x2e
    26be:	8d a7       	std	Y+45, r24	; 0x2d
    26c0:	8d a5       	ldd	r24, Y+45	; 0x2d
    26c2:	9e a5       	ldd	r25, Y+46	; 0x2e
    26c4:	01 97       	sbiw	r24, 0x01	; 1
    26c6:	f1 f7       	brne	.-4      	; 0x26c4 <LCD_sendCommand+0x558>
    26c8:	9e a7       	std	Y+46, r25	; 0x2e
    26ca:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    26ce:	98 a9       	ldd	r25, Y+48	; 0x30
    26d0:	01 97       	sbiw	r24, 0x01	; 1
    26d2:	98 ab       	std	Y+48, r25	; 0x30
    26d4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    26d8:	98 a9       	ldd	r25, Y+48	; 0x30
    26da:	00 97       	sbiw	r24, 0x00	; 0
    26dc:	69 f7       	brne	.-38     	; 0x26b8 <LCD_sendCommand+0x54c>
    26de:	14 c0       	rjmp	.+40     	; 0x2708 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26e0:	69 a9       	ldd	r22, Y+49	; 0x31
    26e2:	7a a9       	ldd	r23, Y+50	; 0x32
    26e4:	8b a9       	ldd	r24, Y+51	; 0x33
    26e6:	9c a9       	ldd	r25, Y+52	; 0x34
    26e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26ec:	dc 01       	movw	r26, r24
    26ee:	cb 01       	movw	r24, r22
    26f0:	98 ab       	std	Y+48, r25	; 0x30
    26f2:	8f a7       	std	Y+47, r24	; 0x2f
    26f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    26f6:	98 a9       	ldd	r25, Y+48	; 0x30
    26f8:	9c a7       	std	Y+44, r25	; 0x2c
    26fa:	8b a7       	std	Y+43, r24	; 0x2b
    26fc:	8b a5       	ldd	r24, Y+43	; 0x2b
    26fe:	9c a5       	ldd	r25, Y+44	; 0x2c
    2700:	01 97       	sbiw	r24, 0x01	; 1
    2702:	f1 f7       	brne	.-4      	; 0x2700 <LCD_sendCommand+0x594>
    2704:	9c a7       	std	Y+44, r25	; 0x2c
    2706:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2708:	80 e0       	ldi	r24, 0x00	; 0
    270a:	62 e0       	ldi	r22, 0x02	; 2
    270c:	41 e0       	ldi	r20, 0x01	; 1
    270e:	0e 94 1d 0c 	call	0x183a	; 0x183a <GPIO_writePin>
    2712:	80 e0       	ldi	r24, 0x00	; 0
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	a0 e8       	ldi	r26, 0x80	; 128
    2718:	bf e3       	ldi	r27, 0x3F	; 63
    271a:	8f a3       	std	Y+39, r24	; 0x27
    271c:	98 a7       	std	Y+40, r25	; 0x28
    271e:	a9 a7       	std	Y+41, r26	; 0x29
    2720:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2722:	6f a1       	ldd	r22, Y+39	; 0x27
    2724:	78 a5       	ldd	r23, Y+40	; 0x28
    2726:	89 a5       	ldd	r24, Y+41	; 0x29
    2728:	9a a5       	ldd	r25, Y+42	; 0x2a
    272a:	20 e0       	ldi	r18, 0x00	; 0
    272c:	30 e0       	ldi	r19, 0x00	; 0
    272e:	4a e7       	ldi	r20, 0x7A	; 122
    2730:	55 e4       	ldi	r21, 0x45	; 69
    2732:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2736:	dc 01       	movw	r26, r24
    2738:	cb 01       	movw	r24, r22
    273a:	8b a3       	std	Y+35, r24	; 0x23
    273c:	9c a3       	std	Y+36, r25	; 0x24
    273e:	ad a3       	std	Y+37, r26	; 0x25
    2740:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2742:	6b a1       	ldd	r22, Y+35	; 0x23
    2744:	7c a1       	ldd	r23, Y+36	; 0x24
    2746:	8d a1       	ldd	r24, Y+37	; 0x25
    2748:	9e a1       	ldd	r25, Y+38	; 0x26
    274a:	20 e0       	ldi	r18, 0x00	; 0
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	40 e8       	ldi	r20, 0x80	; 128
    2750:	5f e3       	ldi	r21, 0x3F	; 63
    2752:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2756:	88 23       	and	r24, r24
    2758:	2c f4       	brge	.+10     	; 0x2764 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	9a a3       	std	Y+34, r25	; 0x22
    2760:	89 a3       	std	Y+33, r24	; 0x21
    2762:	3f c0       	rjmp	.+126    	; 0x27e2 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    2764:	6b a1       	ldd	r22, Y+35	; 0x23
    2766:	7c a1       	ldd	r23, Y+36	; 0x24
    2768:	8d a1       	ldd	r24, Y+37	; 0x25
    276a:	9e a1       	ldd	r25, Y+38	; 0x26
    276c:	20 e0       	ldi	r18, 0x00	; 0
    276e:	3f ef       	ldi	r19, 0xFF	; 255
    2770:	4f e7       	ldi	r20, 0x7F	; 127
    2772:	57 e4       	ldi	r21, 0x47	; 71
    2774:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2778:	18 16       	cp	r1, r24
    277a:	4c f5       	brge	.+82     	; 0x27ce <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    277c:	6f a1       	ldd	r22, Y+39	; 0x27
    277e:	78 a5       	ldd	r23, Y+40	; 0x28
    2780:	89 a5       	ldd	r24, Y+41	; 0x29
    2782:	9a a5       	ldd	r25, Y+42	; 0x2a
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	40 e2       	ldi	r20, 0x20	; 32
    278a:	51 e4       	ldi	r21, 0x41	; 65
    278c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2790:	dc 01       	movw	r26, r24
    2792:	cb 01       	movw	r24, r22
    2794:	bc 01       	movw	r22, r24
    2796:	cd 01       	movw	r24, r26
    2798:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    279c:	dc 01       	movw	r26, r24
    279e:	cb 01       	movw	r24, r22
    27a0:	9a a3       	std	Y+34, r25	; 0x22
    27a2:	89 a3       	std	Y+33, r24	; 0x21
    27a4:	0f c0       	rjmp	.+30     	; 0x27c4 <LCD_sendCommand+0x658>
    27a6:	80 e9       	ldi	r24, 0x90	; 144
    27a8:	91 e0       	ldi	r25, 0x01	; 1
    27aa:	98 a3       	std	Y+32, r25	; 0x20
    27ac:	8f 8f       	std	Y+31, r24	; 0x1f
    27ae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27b0:	98 a1       	ldd	r25, Y+32	; 0x20
    27b2:	01 97       	sbiw	r24, 0x01	; 1
    27b4:	f1 f7       	brne	.-4      	; 0x27b2 <LCD_sendCommand+0x646>
    27b6:	98 a3       	std	Y+32, r25	; 0x20
    27b8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ba:	89 a1       	ldd	r24, Y+33	; 0x21
    27bc:	9a a1       	ldd	r25, Y+34	; 0x22
    27be:	01 97       	sbiw	r24, 0x01	; 1
    27c0:	9a a3       	std	Y+34, r25	; 0x22
    27c2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27c4:	89 a1       	ldd	r24, Y+33	; 0x21
    27c6:	9a a1       	ldd	r25, Y+34	; 0x22
    27c8:	00 97       	sbiw	r24, 0x00	; 0
    27ca:	69 f7       	brne	.-38     	; 0x27a6 <LCD_sendCommand+0x63a>
    27cc:	14 c0       	rjmp	.+40     	; 0x27f6 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ce:	6b a1       	ldd	r22, Y+35	; 0x23
    27d0:	7c a1       	ldd	r23, Y+36	; 0x24
    27d2:	8d a1       	ldd	r24, Y+37	; 0x25
    27d4:	9e a1       	ldd	r25, Y+38	; 0x26
    27d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27da:	dc 01       	movw	r26, r24
    27dc:	cb 01       	movw	r24, r22
    27de:	9a a3       	std	Y+34, r25	; 0x22
    27e0:	89 a3       	std	Y+33, r24	; 0x21
    27e2:	89 a1       	ldd	r24, Y+33	; 0x21
    27e4:	9a a1       	ldd	r25, Y+34	; 0x22
    27e6:	9e 8f       	std	Y+30, r25	; 0x1e
    27e8:	8d 8f       	std	Y+29, r24	; 0x1d
    27ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27ec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27ee:	01 97       	sbiw	r24, 0x01	; 1
    27f0:	f1 f7       	brne	.-4      	; 0x27ee <LCD_sendCommand+0x682>
    27f2:	9e 8f       	std	Y+30, r25	; 0x1e
    27f4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    27f6:	fe 01       	movw	r30, r28
    27f8:	ed 59       	subi	r30, 0x9D	; 157
    27fa:	ff 4f       	sbci	r31, 0xFF	; 255
    27fc:	80 81       	ld	r24, Z
    27fe:	98 2f       	mov	r25, r24
    2800:	91 70       	andi	r25, 0x01	; 1
    2802:	80 e0       	ldi	r24, 0x00	; 0
    2804:	63 e0       	ldi	r22, 0x03	; 3
    2806:	49 2f       	mov	r20, r25
    2808:	0e 94 1d 0c 	call	0x183a	; 0x183a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    280c:	fe 01       	movw	r30, r28
    280e:	ed 59       	subi	r30, 0x9D	; 157
    2810:	ff 4f       	sbci	r31, 0xFF	; 255
    2812:	80 81       	ld	r24, Z
    2814:	88 2f       	mov	r24, r24
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	82 70       	andi	r24, 0x02	; 2
    281a:	90 70       	andi	r25, 0x00	; 0
    281c:	95 95       	asr	r25
    281e:	87 95       	ror	r24
    2820:	98 2f       	mov	r25, r24
    2822:	80 e0       	ldi	r24, 0x00	; 0
    2824:	64 e0       	ldi	r22, 0x04	; 4
    2826:	49 2f       	mov	r20, r25
    2828:	0e 94 1d 0c 	call	0x183a	; 0x183a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    282c:	fe 01       	movw	r30, r28
    282e:	ed 59       	subi	r30, 0x9D	; 157
    2830:	ff 4f       	sbci	r31, 0xFF	; 255
    2832:	80 81       	ld	r24, Z
    2834:	88 2f       	mov	r24, r24
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	84 70       	andi	r24, 0x04	; 4
    283a:	90 70       	andi	r25, 0x00	; 0
    283c:	95 95       	asr	r25
    283e:	87 95       	ror	r24
    2840:	95 95       	asr	r25
    2842:	87 95       	ror	r24
    2844:	98 2f       	mov	r25, r24
    2846:	80 e0       	ldi	r24, 0x00	; 0
    2848:	65 e0       	ldi	r22, 0x05	; 5
    284a:	49 2f       	mov	r20, r25
    284c:	0e 94 1d 0c 	call	0x183a	; 0x183a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    2850:	fe 01       	movw	r30, r28
    2852:	ed 59       	subi	r30, 0x9D	; 157
    2854:	ff 4f       	sbci	r31, 0xFF	; 255
    2856:	80 81       	ld	r24, Z
    2858:	88 2f       	mov	r24, r24
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	88 70       	andi	r24, 0x08	; 8
    285e:	90 70       	andi	r25, 0x00	; 0
    2860:	95 95       	asr	r25
    2862:	87 95       	ror	r24
    2864:	95 95       	asr	r25
    2866:	87 95       	ror	r24
    2868:	95 95       	asr	r25
    286a:	87 95       	ror	r24
    286c:	98 2f       	mov	r25, r24
    286e:	80 e0       	ldi	r24, 0x00	; 0
    2870:	66 e0       	ldi	r22, 0x06	; 6
    2872:	49 2f       	mov	r20, r25
    2874:	0e 94 1d 0c 	call	0x183a	; 0x183a <GPIO_writePin>
    2878:	80 e0       	ldi	r24, 0x00	; 0
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	a0 e8       	ldi	r26, 0x80	; 128
    287e:	bf e3       	ldi	r27, 0x3F	; 63
    2880:	89 8f       	std	Y+25, r24	; 0x19
    2882:	9a 8f       	std	Y+26, r25	; 0x1a
    2884:	ab 8f       	std	Y+27, r26	; 0x1b
    2886:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2888:	69 8d       	ldd	r22, Y+25	; 0x19
    288a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    288c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    288e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	4a e7       	ldi	r20, 0x7A	; 122
    2896:	55 e4       	ldi	r21, 0x45	; 69
    2898:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    289c:	dc 01       	movw	r26, r24
    289e:	cb 01       	movw	r24, r22
    28a0:	8d 8b       	std	Y+21, r24	; 0x15
    28a2:	9e 8b       	std	Y+22, r25	; 0x16
    28a4:	af 8b       	std	Y+23, r26	; 0x17
    28a6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28a8:	6d 89       	ldd	r22, Y+21	; 0x15
    28aa:	7e 89       	ldd	r23, Y+22	; 0x16
    28ac:	8f 89       	ldd	r24, Y+23	; 0x17
    28ae:	98 8d       	ldd	r25, Y+24	; 0x18
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	40 e8       	ldi	r20, 0x80	; 128
    28b6:	5f e3       	ldi	r21, 0x3F	; 63
    28b8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    28bc:	88 23       	and	r24, r24
    28be:	2c f4       	brge	.+10     	; 0x28ca <LCD_sendCommand+0x75e>
		__ticks = 1;
    28c0:	81 e0       	ldi	r24, 0x01	; 1
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	9c 8b       	std	Y+20, r25	; 0x14
    28c6:	8b 8b       	std	Y+19, r24	; 0x13
    28c8:	3f c0       	rjmp	.+126    	; 0x2948 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    28ca:	6d 89       	ldd	r22, Y+21	; 0x15
    28cc:	7e 89       	ldd	r23, Y+22	; 0x16
    28ce:	8f 89       	ldd	r24, Y+23	; 0x17
    28d0:	98 8d       	ldd	r25, Y+24	; 0x18
    28d2:	20 e0       	ldi	r18, 0x00	; 0
    28d4:	3f ef       	ldi	r19, 0xFF	; 255
    28d6:	4f e7       	ldi	r20, 0x7F	; 127
    28d8:	57 e4       	ldi	r21, 0x47	; 71
    28da:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    28de:	18 16       	cp	r1, r24
    28e0:	4c f5       	brge	.+82     	; 0x2934 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28e2:	69 8d       	ldd	r22, Y+25	; 0x19
    28e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28ea:	20 e0       	ldi	r18, 0x00	; 0
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	40 e2       	ldi	r20, 0x20	; 32
    28f0:	51 e4       	ldi	r21, 0x41	; 65
    28f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28f6:	dc 01       	movw	r26, r24
    28f8:	cb 01       	movw	r24, r22
    28fa:	bc 01       	movw	r22, r24
    28fc:	cd 01       	movw	r24, r26
    28fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2902:	dc 01       	movw	r26, r24
    2904:	cb 01       	movw	r24, r22
    2906:	9c 8b       	std	Y+20, r25	; 0x14
    2908:	8b 8b       	std	Y+19, r24	; 0x13
    290a:	0f c0       	rjmp	.+30     	; 0x292a <LCD_sendCommand+0x7be>
    290c:	80 e9       	ldi	r24, 0x90	; 144
    290e:	91 e0       	ldi	r25, 0x01	; 1
    2910:	9a 8b       	std	Y+18, r25	; 0x12
    2912:	89 8b       	std	Y+17, r24	; 0x11
    2914:	89 89       	ldd	r24, Y+17	; 0x11
    2916:	9a 89       	ldd	r25, Y+18	; 0x12
    2918:	01 97       	sbiw	r24, 0x01	; 1
    291a:	f1 f7       	brne	.-4      	; 0x2918 <LCD_sendCommand+0x7ac>
    291c:	9a 8b       	std	Y+18, r25	; 0x12
    291e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2920:	8b 89       	ldd	r24, Y+19	; 0x13
    2922:	9c 89       	ldd	r25, Y+20	; 0x14
    2924:	01 97       	sbiw	r24, 0x01	; 1
    2926:	9c 8b       	std	Y+20, r25	; 0x14
    2928:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    292a:	8b 89       	ldd	r24, Y+19	; 0x13
    292c:	9c 89       	ldd	r25, Y+20	; 0x14
    292e:	00 97       	sbiw	r24, 0x00	; 0
    2930:	69 f7       	brne	.-38     	; 0x290c <LCD_sendCommand+0x7a0>
    2932:	14 c0       	rjmp	.+40     	; 0x295c <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2934:	6d 89       	ldd	r22, Y+21	; 0x15
    2936:	7e 89       	ldd	r23, Y+22	; 0x16
    2938:	8f 89       	ldd	r24, Y+23	; 0x17
    293a:	98 8d       	ldd	r25, Y+24	; 0x18
    293c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2940:	dc 01       	movw	r26, r24
    2942:	cb 01       	movw	r24, r22
    2944:	9c 8b       	std	Y+20, r25	; 0x14
    2946:	8b 8b       	std	Y+19, r24	; 0x13
    2948:	8b 89       	ldd	r24, Y+19	; 0x13
    294a:	9c 89       	ldd	r25, Y+20	; 0x14
    294c:	98 8b       	std	Y+16, r25	; 0x10
    294e:	8f 87       	std	Y+15, r24	; 0x0f
    2950:	8f 85       	ldd	r24, Y+15	; 0x0f
    2952:	98 89       	ldd	r25, Y+16	; 0x10
    2954:	01 97       	sbiw	r24, 0x01	; 1
    2956:	f1 f7       	brne	.-4      	; 0x2954 <LCD_sendCommand+0x7e8>
    2958:	98 8b       	std	Y+16, r25	; 0x10
    295a:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    295c:	80 e0       	ldi	r24, 0x00	; 0
    295e:	62 e0       	ldi	r22, 0x02	; 2
    2960:	40 e0       	ldi	r20, 0x00	; 0
    2962:	0e 94 1d 0c 	call	0x183a	; 0x183a <GPIO_writePin>
    2966:	80 e0       	ldi	r24, 0x00	; 0
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	a0 e8       	ldi	r26, 0x80	; 128
    296c:	bf e3       	ldi	r27, 0x3F	; 63
    296e:	8b 87       	std	Y+11, r24	; 0x0b
    2970:	9c 87       	std	Y+12, r25	; 0x0c
    2972:	ad 87       	std	Y+13, r26	; 0x0d
    2974:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2976:	6b 85       	ldd	r22, Y+11	; 0x0b
    2978:	7c 85       	ldd	r23, Y+12	; 0x0c
    297a:	8d 85       	ldd	r24, Y+13	; 0x0d
    297c:	9e 85       	ldd	r25, Y+14	; 0x0e
    297e:	20 e0       	ldi	r18, 0x00	; 0
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	4a e7       	ldi	r20, 0x7A	; 122
    2984:	55 e4       	ldi	r21, 0x45	; 69
    2986:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    298a:	dc 01       	movw	r26, r24
    298c:	cb 01       	movw	r24, r22
    298e:	8f 83       	std	Y+7, r24	; 0x07
    2990:	98 87       	std	Y+8, r25	; 0x08
    2992:	a9 87       	std	Y+9, r26	; 0x09
    2994:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2996:	6f 81       	ldd	r22, Y+7	; 0x07
    2998:	78 85       	ldd	r23, Y+8	; 0x08
    299a:	89 85       	ldd	r24, Y+9	; 0x09
    299c:	9a 85       	ldd	r25, Y+10	; 0x0a
    299e:	20 e0       	ldi	r18, 0x00	; 0
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	40 e8       	ldi	r20, 0x80	; 128
    29a4:	5f e3       	ldi	r21, 0x3F	; 63
    29a6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    29aa:	88 23       	and	r24, r24
    29ac:	2c f4       	brge	.+10     	; 0x29b8 <LCD_sendCommand+0x84c>
		__ticks = 1;
    29ae:	81 e0       	ldi	r24, 0x01	; 1
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	9e 83       	std	Y+6, r25	; 0x06
    29b4:	8d 83       	std	Y+5, r24	; 0x05
    29b6:	3f c0       	rjmp	.+126    	; 0x2a36 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    29b8:	6f 81       	ldd	r22, Y+7	; 0x07
    29ba:	78 85       	ldd	r23, Y+8	; 0x08
    29bc:	89 85       	ldd	r24, Y+9	; 0x09
    29be:	9a 85       	ldd	r25, Y+10	; 0x0a
    29c0:	20 e0       	ldi	r18, 0x00	; 0
    29c2:	3f ef       	ldi	r19, 0xFF	; 255
    29c4:	4f e7       	ldi	r20, 0x7F	; 127
    29c6:	57 e4       	ldi	r21, 0x47	; 71
    29c8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    29cc:	18 16       	cp	r1, r24
    29ce:	4c f5       	brge	.+82     	; 0x2a22 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    29d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    29d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    29d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    29d8:	20 e0       	ldi	r18, 0x00	; 0
    29da:	30 e0       	ldi	r19, 0x00	; 0
    29dc:	40 e2       	ldi	r20, 0x20	; 32
    29de:	51 e4       	ldi	r21, 0x41	; 65
    29e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29e4:	dc 01       	movw	r26, r24
    29e6:	cb 01       	movw	r24, r22
    29e8:	bc 01       	movw	r22, r24
    29ea:	cd 01       	movw	r24, r26
    29ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29f0:	dc 01       	movw	r26, r24
    29f2:	cb 01       	movw	r24, r22
    29f4:	9e 83       	std	Y+6, r25	; 0x06
    29f6:	8d 83       	std	Y+5, r24	; 0x05
    29f8:	0f c0       	rjmp	.+30     	; 0x2a18 <LCD_sendCommand+0x8ac>
    29fa:	80 e9       	ldi	r24, 0x90	; 144
    29fc:	91 e0       	ldi	r25, 0x01	; 1
    29fe:	9c 83       	std	Y+4, r25	; 0x04
    2a00:	8b 83       	std	Y+3, r24	; 0x03
    2a02:	8b 81       	ldd	r24, Y+3	; 0x03
    2a04:	9c 81       	ldd	r25, Y+4	; 0x04
    2a06:	01 97       	sbiw	r24, 0x01	; 1
    2a08:	f1 f7       	brne	.-4      	; 0x2a06 <LCD_sendCommand+0x89a>
    2a0a:	9c 83       	std	Y+4, r25	; 0x04
    2a0c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a10:	9e 81       	ldd	r25, Y+6	; 0x06
    2a12:	01 97       	sbiw	r24, 0x01	; 1
    2a14:	9e 83       	std	Y+6, r25	; 0x06
    2a16:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a18:	8d 81       	ldd	r24, Y+5	; 0x05
    2a1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a1c:	00 97       	sbiw	r24, 0x00	; 0
    2a1e:	69 f7       	brne	.-38     	; 0x29fa <LCD_sendCommand+0x88e>
    2a20:	14 c0       	rjmp	.+40     	; 0x2a4a <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a22:	6f 81       	ldd	r22, Y+7	; 0x07
    2a24:	78 85       	ldd	r23, Y+8	; 0x08
    2a26:	89 85       	ldd	r24, Y+9	; 0x09
    2a28:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a2a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a2e:	dc 01       	movw	r26, r24
    2a30:	cb 01       	movw	r24, r22
    2a32:	9e 83       	std	Y+6, r25	; 0x06
    2a34:	8d 83       	std	Y+5, r24	; 0x05
    2a36:	8d 81       	ldd	r24, Y+5	; 0x05
    2a38:	9e 81       	ldd	r25, Y+6	; 0x06
    2a3a:	9a 83       	std	Y+2, r25	; 0x02
    2a3c:	89 83       	std	Y+1, r24	; 0x01
    2a3e:	89 81       	ldd	r24, Y+1	; 0x01
    2a40:	9a 81       	ldd	r25, Y+2	; 0x02
    2a42:	01 97       	sbiw	r24, 0x01	; 1
    2a44:	f1 f7       	brne	.-4      	; 0x2a42 <LCD_sendCommand+0x8d6>
    2a46:	9a 83       	std	Y+2, r25	; 0x02
    2a48:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2a4a:	cd 59       	subi	r28, 0x9D	; 157
    2a4c:	df 4f       	sbci	r29, 0xFF	; 255
    2a4e:	0f b6       	in	r0, 0x3f	; 63
    2a50:	f8 94       	cli
    2a52:	de bf       	out	0x3e, r29	; 62
    2a54:	0f be       	out	0x3f, r0	; 63
    2a56:	cd bf       	out	0x3d, r28	; 61
    2a58:	cf 91       	pop	r28
    2a5a:	df 91       	pop	r29
    2a5c:	1f 91       	pop	r17
    2a5e:	0f 91       	pop	r16
    2a60:	08 95       	ret

00002a62 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2a62:	0f 93       	push	r16
    2a64:	1f 93       	push	r17
    2a66:	df 93       	push	r29
    2a68:	cf 93       	push	r28
    2a6a:	cd b7       	in	r28, 0x3d	; 61
    2a6c:	de b7       	in	r29, 0x3e	; 62
    2a6e:	c3 56       	subi	r28, 0x63	; 99
    2a70:	d0 40       	sbci	r29, 0x00	; 0
    2a72:	0f b6       	in	r0, 0x3f	; 63
    2a74:	f8 94       	cli
    2a76:	de bf       	out	0x3e, r29	; 62
    2a78:	0f be       	out	0x3f, r0	; 63
    2a7a:	cd bf       	out	0x3d, r28	; 61
    2a7c:	fe 01       	movw	r30, r28
    2a7e:	ed 59       	subi	r30, 0x9D	; 157
    2a80:	ff 4f       	sbci	r31, 0xFF	; 255
    2a82:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2a84:	80 e0       	ldi	r24, 0x00	; 0
    2a86:	61 e0       	ldi	r22, 0x01	; 1
    2a88:	41 e0       	ldi	r20, 0x01	; 1
    2a8a:	0e 94 1d 0c 	call	0x183a	; 0x183a <GPIO_writePin>
    2a8e:	fe 01       	movw	r30, r28
    2a90:	e1 5a       	subi	r30, 0xA1	; 161
    2a92:	ff 4f       	sbci	r31, 0xFF	; 255
    2a94:	80 e0       	ldi	r24, 0x00	; 0
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	a0 e8       	ldi	r26, 0x80	; 128
    2a9a:	bf e3       	ldi	r27, 0x3F	; 63
    2a9c:	80 83       	st	Z, r24
    2a9e:	91 83       	std	Z+1, r25	; 0x01
    2aa0:	a2 83       	std	Z+2, r26	; 0x02
    2aa2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aa4:	8e 01       	movw	r16, r28
    2aa6:	05 5a       	subi	r16, 0xA5	; 165
    2aa8:	1f 4f       	sbci	r17, 0xFF	; 255
    2aaa:	fe 01       	movw	r30, r28
    2aac:	e1 5a       	subi	r30, 0xA1	; 161
    2aae:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab0:	60 81       	ld	r22, Z
    2ab2:	71 81       	ldd	r23, Z+1	; 0x01
    2ab4:	82 81       	ldd	r24, Z+2	; 0x02
    2ab6:	93 81       	ldd	r25, Z+3	; 0x03
    2ab8:	20 e0       	ldi	r18, 0x00	; 0
    2aba:	30 e0       	ldi	r19, 0x00	; 0
    2abc:	4a e7       	ldi	r20, 0x7A	; 122
    2abe:	55 e4       	ldi	r21, 0x45	; 69
    2ac0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ac4:	dc 01       	movw	r26, r24
    2ac6:	cb 01       	movw	r24, r22
    2ac8:	f8 01       	movw	r30, r16
    2aca:	80 83       	st	Z, r24
    2acc:	91 83       	std	Z+1, r25	; 0x01
    2ace:	a2 83       	std	Z+2, r26	; 0x02
    2ad0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ad2:	fe 01       	movw	r30, r28
    2ad4:	e5 5a       	subi	r30, 0xA5	; 165
    2ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad8:	60 81       	ld	r22, Z
    2ada:	71 81       	ldd	r23, Z+1	; 0x01
    2adc:	82 81       	ldd	r24, Z+2	; 0x02
    2ade:	93 81       	ldd	r25, Z+3	; 0x03
    2ae0:	20 e0       	ldi	r18, 0x00	; 0
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	40 e8       	ldi	r20, 0x80	; 128
    2ae6:	5f e3       	ldi	r21, 0x3F	; 63
    2ae8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2aec:	88 23       	and	r24, r24
    2aee:	44 f4       	brge	.+16     	; 0x2b00 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2af0:	fe 01       	movw	r30, r28
    2af2:	e7 5a       	subi	r30, 0xA7	; 167
    2af4:	ff 4f       	sbci	r31, 0xFF	; 255
    2af6:	81 e0       	ldi	r24, 0x01	; 1
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	91 83       	std	Z+1, r25	; 0x01
    2afc:	80 83       	st	Z, r24
    2afe:	64 c0       	rjmp	.+200    	; 0x2bc8 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2b00:	fe 01       	movw	r30, r28
    2b02:	e5 5a       	subi	r30, 0xA5	; 165
    2b04:	ff 4f       	sbci	r31, 0xFF	; 255
    2b06:	60 81       	ld	r22, Z
    2b08:	71 81       	ldd	r23, Z+1	; 0x01
    2b0a:	82 81       	ldd	r24, Z+2	; 0x02
    2b0c:	93 81       	ldd	r25, Z+3	; 0x03
    2b0e:	20 e0       	ldi	r18, 0x00	; 0
    2b10:	3f ef       	ldi	r19, 0xFF	; 255
    2b12:	4f e7       	ldi	r20, 0x7F	; 127
    2b14:	57 e4       	ldi	r21, 0x47	; 71
    2b16:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2b1a:	18 16       	cp	r1, r24
    2b1c:	0c f0       	brlt	.+2      	; 0x2b20 <LCD_displayCharacter+0xbe>
    2b1e:	43 c0       	rjmp	.+134    	; 0x2ba6 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b20:	fe 01       	movw	r30, r28
    2b22:	e1 5a       	subi	r30, 0xA1	; 161
    2b24:	ff 4f       	sbci	r31, 0xFF	; 255
    2b26:	60 81       	ld	r22, Z
    2b28:	71 81       	ldd	r23, Z+1	; 0x01
    2b2a:	82 81       	ldd	r24, Z+2	; 0x02
    2b2c:	93 81       	ldd	r25, Z+3	; 0x03
    2b2e:	20 e0       	ldi	r18, 0x00	; 0
    2b30:	30 e0       	ldi	r19, 0x00	; 0
    2b32:	40 e2       	ldi	r20, 0x20	; 32
    2b34:	51 e4       	ldi	r21, 0x41	; 65
    2b36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b3a:	dc 01       	movw	r26, r24
    2b3c:	cb 01       	movw	r24, r22
    2b3e:	8e 01       	movw	r16, r28
    2b40:	07 5a       	subi	r16, 0xA7	; 167
    2b42:	1f 4f       	sbci	r17, 0xFF	; 255
    2b44:	bc 01       	movw	r22, r24
    2b46:	cd 01       	movw	r24, r26
    2b48:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b4c:	dc 01       	movw	r26, r24
    2b4e:	cb 01       	movw	r24, r22
    2b50:	f8 01       	movw	r30, r16
    2b52:	91 83       	std	Z+1, r25	; 0x01
    2b54:	80 83       	st	Z, r24
    2b56:	1f c0       	rjmp	.+62     	; 0x2b96 <LCD_displayCharacter+0x134>
    2b58:	fe 01       	movw	r30, r28
    2b5a:	e9 5a       	subi	r30, 0xA9	; 169
    2b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5e:	80 e9       	ldi	r24, 0x90	; 144
    2b60:	91 e0       	ldi	r25, 0x01	; 1
    2b62:	91 83       	std	Z+1, r25	; 0x01
    2b64:	80 83       	st	Z, r24
    2b66:	fe 01       	movw	r30, r28
    2b68:	e9 5a       	subi	r30, 0xA9	; 169
    2b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6c:	80 81       	ld	r24, Z
    2b6e:	91 81       	ldd	r25, Z+1	; 0x01
    2b70:	01 97       	sbiw	r24, 0x01	; 1
    2b72:	f1 f7       	brne	.-4      	; 0x2b70 <LCD_displayCharacter+0x10e>
    2b74:	fe 01       	movw	r30, r28
    2b76:	e9 5a       	subi	r30, 0xA9	; 169
    2b78:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7a:	91 83       	std	Z+1, r25	; 0x01
    2b7c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b7e:	de 01       	movw	r26, r28
    2b80:	a7 5a       	subi	r26, 0xA7	; 167
    2b82:	bf 4f       	sbci	r27, 0xFF	; 255
    2b84:	fe 01       	movw	r30, r28
    2b86:	e7 5a       	subi	r30, 0xA7	; 167
    2b88:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8a:	80 81       	ld	r24, Z
    2b8c:	91 81       	ldd	r25, Z+1	; 0x01
    2b8e:	01 97       	sbiw	r24, 0x01	; 1
    2b90:	11 96       	adiw	r26, 0x01	; 1
    2b92:	9c 93       	st	X, r25
    2b94:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b96:	fe 01       	movw	r30, r28
    2b98:	e7 5a       	subi	r30, 0xA7	; 167
    2b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9c:	80 81       	ld	r24, Z
    2b9e:	91 81       	ldd	r25, Z+1	; 0x01
    2ba0:	00 97       	sbiw	r24, 0x00	; 0
    2ba2:	d1 f6       	brne	.-76     	; 0x2b58 <LCD_displayCharacter+0xf6>
    2ba4:	27 c0       	rjmp	.+78     	; 0x2bf4 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ba6:	8e 01       	movw	r16, r28
    2ba8:	07 5a       	subi	r16, 0xA7	; 167
    2baa:	1f 4f       	sbci	r17, 0xFF	; 255
    2bac:	fe 01       	movw	r30, r28
    2bae:	e5 5a       	subi	r30, 0xA5	; 165
    2bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb2:	60 81       	ld	r22, Z
    2bb4:	71 81       	ldd	r23, Z+1	; 0x01
    2bb6:	82 81       	ldd	r24, Z+2	; 0x02
    2bb8:	93 81       	ldd	r25, Z+3	; 0x03
    2bba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bbe:	dc 01       	movw	r26, r24
    2bc0:	cb 01       	movw	r24, r22
    2bc2:	f8 01       	movw	r30, r16
    2bc4:	91 83       	std	Z+1, r25	; 0x01
    2bc6:	80 83       	st	Z, r24
    2bc8:	de 01       	movw	r26, r28
    2bca:	ab 5a       	subi	r26, 0xAB	; 171
    2bcc:	bf 4f       	sbci	r27, 0xFF	; 255
    2bce:	fe 01       	movw	r30, r28
    2bd0:	e7 5a       	subi	r30, 0xA7	; 167
    2bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd4:	80 81       	ld	r24, Z
    2bd6:	91 81       	ldd	r25, Z+1	; 0x01
    2bd8:	8d 93       	st	X+, r24
    2bda:	9c 93       	st	X, r25
    2bdc:	fe 01       	movw	r30, r28
    2bde:	eb 5a       	subi	r30, 0xAB	; 171
    2be0:	ff 4f       	sbci	r31, 0xFF	; 255
    2be2:	80 81       	ld	r24, Z
    2be4:	91 81       	ldd	r25, Z+1	; 0x01
    2be6:	01 97       	sbiw	r24, 0x01	; 1
    2be8:	f1 f7       	brne	.-4      	; 0x2be6 <LCD_displayCharacter+0x184>
    2bea:	fe 01       	movw	r30, r28
    2bec:	eb 5a       	subi	r30, 0xAB	; 171
    2bee:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf0:	91 83       	std	Z+1, r25	; 0x01
    2bf2:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2bf4:	80 e0       	ldi	r24, 0x00	; 0
    2bf6:	62 e0       	ldi	r22, 0x02	; 2
    2bf8:	41 e0       	ldi	r20, 0x01	; 1
    2bfa:	0e 94 1d 0c 	call	0x183a	; 0x183a <GPIO_writePin>
    2bfe:	fe 01       	movw	r30, r28
    2c00:	ef 5a       	subi	r30, 0xAF	; 175
    2c02:	ff 4f       	sbci	r31, 0xFF	; 255
    2c04:	80 e0       	ldi	r24, 0x00	; 0
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	a0 e8       	ldi	r26, 0x80	; 128
    2c0a:	bf e3       	ldi	r27, 0x3F	; 63
    2c0c:	80 83       	st	Z, r24
    2c0e:	91 83       	std	Z+1, r25	; 0x01
    2c10:	a2 83       	std	Z+2, r26	; 0x02
    2c12:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c14:	8e 01       	movw	r16, r28
    2c16:	03 5b       	subi	r16, 0xB3	; 179
    2c18:	1f 4f       	sbci	r17, 0xFF	; 255
    2c1a:	fe 01       	movw	r30, r28
    2c1c:	ef 5a       	subi	r30, 0xAF	; 175
    2c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c20:	60 81       	ld	r22, Z
    2c22:	71 81       	ldd	r23, Z+1	; 0x01
    2c24:	82 81       	ldd	r24, Z+2	; 0x02
    2c26:	93 81       	ldd	r25, Z+3	; 0x03
    2c28:	20 e0       	ldi	r18, 0x00	; 0
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	4a e7       	ldi	r20, 0x7A	; 122
    2c2e:	55 e4       	ldi	r21, 0x45	; 69
    2c30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c34:	dc 01       	movw	r26, r24
    2c36:	cb 01       	movw	r24, r22
    2c38:	f8 01       	movw	r30, r16
    2c3a:	80 83       	st	Z, r24
    2c3c:	91 83       	std	Z+1, r25	; 0x01
    2c3e:	a2 83       	std	Z+2, r26	; 0x02
    2c40:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c42:	fe 01       	movw	r30, r28
    2c44:	e3 5b       	subi	r30, 0xB3	; 179
    2c46:	ff 4f       	sbci	r31, 0xFF	; 255
    2c48:	60 81       	ld	r22, Z
    2c4a:	71 81       	ldd	r23, Z+1	; 0x01
    2c4c:	82 81       	ldd	r24, Z+2	; 0x02
    2c4e:	93 81       	ldd	r25, Z+3	; 0x03
    2c50:	20 e0       	ldi	r18, 0x00	; 0
    2c52:	30 e0       	ldi	r19, 0x00	; 0
    2c54:	40 e8       	ldi	r20, 0x80	; 128
    2c56:	5f e3       	ldi	r21, 0x3F	; 63
    2c58:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2c5c:	88 23       	and	r24, r24
    2c5e:	44 f4       	brge	.+16     	; 0x2c70 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2c60:	fe 01       	movw	r30, r28
    2c62:	e5 5b       	subi	r30, 0xB5	; 181
    2c64:	ff 4f       	sbci	r31, 0xFF	; 255
    2c66:	81 e0       	ldi	r24, 0x01	; 1
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	91 83       	std	Z+1, r25	; 0x01
    2c6c:	80 83       	st	Z, r24
    2c6e:	64 c0       	rjmp	.+200    	; 0x2d38 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2c70:	fe 01       	movw	r30, r28
    2c72:	e3 5b       	subi	r30, 0xB3	; 179
    2c74:	ff 4f       	sbci	r31, 0xFF	; 255
    2c76:	60 81       	ld	r22, Z
    2c78:	71 81       	ldd	r23, Z+1	; 0x01
    2c7a:	82 81       	ldd	r24, Z+2	; 0x02
    2c7c:	93 81       	ldd	r25, Z+3	; 0x03
    2c7e:	20 e0       	ldi	r18, 0x00	; 0
    2c80:	3f ef       	ldi	r19, 0xFF	; 255
    2c82:	4f e7       	ldi	r20, 0x7F	; 127
    2c84:	57 e4       	ldi	r21, 0x47	; 71
    2c86:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2c8a:	18 16       	cp	r1, r24
    2c8c:	0c f0       	brlt	.+2      	; 0x2c90 <LCD_displayCharacter+0x22e>
    2c8e:	43 c0       	rjmp	.+134    	; 0x2d16 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c90:	fe 01       	movw	r30, r28
    2c92:	ef 5a       	subi	r30, 0xAF	; 175
    2c94:	ff 4f       	sbci	r31, 0xFF	; 255
    2c96:	60 81       	ld	r22, Z
    2c98:	71 81       	ldd	r23, Z+1	; 0x01
    2c9a:	82 81       	ldd	r24, Z+2	; 0x02
    2c9c:	93 81       	ldd	r25, Z+3	; 0x03
    2c9e:	20 e0       	ldi	r18, 0x00	; 0
    2ca0:	30 e0       	ldi	r19, 0x00	; 0
    2ca2:	40 e2       	ldi	r20, 0x20	; 32
    2ca4:	51 e4       	ldi	r21, 0x41	; 65
    2ca6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2caa:	dc 01       	movw	r26, r24
    2cac:	cb 01       	movw	r24, r22
    2cae:	8e 01       	movw	r16, r28
    2cb0:	05 5b       	subi	r16, 0xB5	; 181
    2cb2:	1f 4f       	sbci	r17, 0xFF	; 255
    2cb4:	bc 01       	movw	r22, r24
    2cb6:	cd 01       	movw	r24, r26
    2cb8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cbc:	dc 01       	movw	r26, r24
    2cbe:	cb 01       	movw	r24, r22
    2cc0:	f8 01       	movw	r30, r16
    2cc2:	91 83       	std	Z+1, r25	; 0x01
    2cc4:	80 83       	st	Z, r24
    2cc6:	1f c0       	rjmp	.+62     	; 0x2d06 <LCD_displayCharacter+0x2a4>
    2cc8:	fe 01       	movw	r30, r28
    2cca:	e7 5b       	subi	r30, 0xB7	; 183
    2ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cce:	80 e9       	ldi	r24, 0x90	; 144
    2cd0:	91 e0       	ldi	r25, 0x01	; 1
    2cd2:	91 83       	std	Z+1, r25	; 0x01
    2cd4:	80 83       	st	Z, r24
    2cd6:	fe 01       	movw	r30, r28
    2cd8:	e7 5b       	subi	r30, 0xB7	; 183
    2cda:	ff 4f       	sbci	r31, 0xFF	; 255
    2cdc:	80 81       	ld	r24, Z
    2cde:	91 81       	ldd	r25, Z+1	; 0x01
    2ce0:	01 97       	sbiw	r24, 0x01	; 1
    2ce2:	f1 f7       	brne	.-4      	; 0x2ce0 <LCD_displayCharacter+0x27e>
    2ce4:	fe 01       	movw	r30, r28
    2ce6:	e7 5b       	subi	r30, 0xB7	; 183
    2ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cea:	91 83       	std	Z+1, r25	; 0x01
    2cec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cee:	de 01       	movw	r26, r28
    2cf0:	a5 5b       	subi	r26, 0xB5	; 181
    2cf2:	bf 4f       	sbci	r27, 0xFF	; 255
    2cf4:	fe 01       	movw	r30, r28
    2cf6:	e5 5b       	subi	r30, 0xB5	; 181
    2cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfa:	80 81       	ld	r24, Z
    2cfc:	91 81       	ldd	r25, Z+1	; 0x01
    2cfe:	01 97       	sbiw	r24, 0x01	; 1
    2d00:	11 96       	adiw	r26, 0x01	; 1
    2d02:	9c 93       	st	X, r25
    2d04:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d06:	fe 01       	movw	r30, r28
    2d08:	e5 5b       	subi	r30, 0xB5	; 181
    2d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0c:	80 81       	ld	r24, Z
    2d0e:	91 81       	ldd	r25, Z+1	; 0x01
    2d10:	00 97       	sbiw	r24, 0x00	; 0
    2d12:	d1 f6       	brne	.-76     	; 0x2cc8 <LCD_displayCharacter+0x266>
    2d14:	27 c0       	rjmp	.+78     	; 0x2d64 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d16:	8e 01       	movw	r16, r28
    2d18:	05 5b       	subi	r16, 0xB5	; 181
    2d1a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d1c:	fe 01       	movw	r30, r28
    2d1e:	e3 5b       	subi	r30, 0xB3	; 179
    2d20:	ff 4f       	sbci	r31, 0xFF	; 255
    2d22:	60 81       	ld	r22, Z
    2d24:	71 81       	ldd	r23, Z+1	; 0x01
    2d26:	82 81       	ldd	r24, Z+2	; 0x02
    2d28:	93 81       	ldd	r25, Z+3	; 0x03
    2d2a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d2e:	dc 01       	movw	r26, r24
    2d30:	cb 01       	movw	r24, r22
    2d32:	f8 01       	movw	r30, r16
    2d34:	91 83       	std	Z+1, r25	; 0x01
    2d36:	80 83       	st	Z, r24
    2d38:	de 01       	movw	r26, r28
    2d3a:	a9 5b       	subi	r26, 0xB9	; 185
    2d3c:	bf 4f       	sbci	r27, 0xFF	; 255
    2d3e:	fe 01       	movw	r30, r28
    2d40:	e5 5b       	subi	r30, 0xB5	; 181
    2d42:	ff 4f       	sbci	r31, 0xFF	; 255
    2d44:	80 81       	ld	r24, Z
    2d46:	91 81       	ldd	r25, Z+1	; 0x01
    2d48:	8d 93       	st	X+, r24
    2d4a:	9c 93       	st	X, r25
    2d4c:	fe 01       	movw	r30, r28
    2d4e:	e9 5b       	subi	r30, 0xB9	; 185
    2d50:	ff 4f       	sbci	r31, 0xFF	; 255
    2d52:	80 81       	ld	r24, Z
    2d54:	91 81       	ldd	r25, Z+1	; 0x01
    2d56:	01 97       	sbiw	r24, 0x01	; 1
    2d58:	f1 f7       	brne	.-4      	; 0x2d56 <LCD_displayCharacter+0x2f4>
    2d5a:	fe 01       	movw	r30, r28
    2d5c:	e9 5b       	subi	r30, 0xB9	; 185
    2d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d60:	91 83       	std	Z+1, r25	; 0x01
    2d62:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    2d64:	fe 01       	movw	r30, r28
    2d66:	ed 59       	subi	r30, 0x9D	; 157
    2d68:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6a:	80 81       	ld	r24, Z
    2d6c:	88 2f       	mov	r24, r24
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	80 71       	andi	r24, 0x10	; 16
    2d72:	90 70       	andi	r25, 0x00	; 0
    2d74:	95 95       	asr	r25
    2d76:	87 95       	ror	r24
    2d78:	95 95       	asr	r25
    2d7a:	87 95       	ror	r24
    2d7c:	95 95       	asr	r25
    2d7e:	87 95       	ror	r24
    2d80:	95 95       	asr	r25
    2d82:	87 95       	ror	r24
    2d84:	98 2f       	mov	r25, r24
    2d86:	80 e0       	ldi	r24, 0x00	; 0
    2d88:	63 e0       	ldi	r22, 0x03	; 3
    2d8a:	49 2f       	mov	r20, r25
    2d8c:	0e 94 1d 0c 	call	0x183a	; 0x183a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    2d90:	fe 01       	movw	r30, r28
    2d92:	ed 59       	subi	r30, 0x9D	; 157
    2d94:	ff 4f       	sbci	r31, 0xFF	; 255
    2d96:	80 81       	ld	r24, Z
    2d98:	88 2f       	mov	r24, r24
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
    2d9c:	80 72       	andi	r24, 0x20	; 32
    2d9e:	90 70       	andi	r25, 0x00	; 0
    2da0:	95 95       	asr	r25
    2da2:	87 95       	ror	r24
    2da4:	95 95       	asr	r25
    2da6:	87 95       	ror	r24
    2da8:	95 95       	asr	r25
    2daa:	87 95       	ror	r24
    2dac:	95 95       	asr	r25
    2dae:	87 95       	ror	r24
    2db0:	95 95       	asr	r25
    2db2:	87 95       	ror	r24
    2db4:	98 2f       	mov	r25, r24
    2db6:	80 e0       	ldi	r24, 0x00	; 0
    2db8:	64 e0       	ldi	r22, 0x04	; 4
    2dba:	49 2f       	mov	r20, r25
    2dbc:	0e 94 1d 0c 	call	0x183a	; 0x183a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    2dc0:	fe 01       	movw	r30, r28
    2dc2:	ed 59       	subi	r30, 0x9D	; 157
    2dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc6:	80 81       	ld	r24, Z
    2dc8:	88 2f       	mov	r24, r24
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	80 74       	andi	r24, 0x40	; 64
    2dce:	90 70       	andi	r25, 0x00	; 0
    2dd0:	08 2e       	mov	r0, r24
    2dd2:	89 2f       	mov	r24, r25
    2dd4:	00 0c       	add	r0, r0
    2dd6:	88 1f       	adc	r24, r24
    2dd8:	99 0b       	sbc	r25, r25
    2dda:	00 0c       	add	r0, r0
    2ddc:	88 1f       	adc	r24, r24
    2dde:	99 1f       	adc	r25, r25
    2de0:	98 2f       	mov	r25, r24
    2de2:	80 e0       	ldi	r24, 0x00	; 0
    2de4:	65 e0       	ldi	r22, 0x05	; 5
    2de6:	49 2f       	mov	r20, r25
    2de8:	0e 94 1d 0c 	call	0x183a	; 0x183a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    2dec:	fe 01       	movw	r30, r28
    2dee:	ed 59       	subi	r30, 0x9D	; 157
    2df0:	ff 4f       	sbci	r31, 0xFF	; 255
    2df2:	80 81       	ld	r24, Z
    2df4:	98 2f       	mov	r25, r24
    2df6:	99 1f       	adc	r25, r25
    2df8:	99 27       	eor	r25, r25
    2dfa:	99 1f       	adc	r25, r25
    2dfc:	80 e0       	ldi	r24, 0x00	; 0
    2dfe:	66 e0       	ldi	r22, 0x06	; 6
    2e00:	49 2f       	mov	r20, r25
    2e02:	0e 94 1d 0c 	call	0x183a	; 0x183a <GPIO_writePin>
    2e06:	fe 01       	movw	r30, r28
    2e08:	ed 5b       	subi	r30, 0xBD	; 189
    2e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0c:	80 e0       	ldi	r24, 0x00	; 0
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	a0 e8       	ldi	r26, 0x80	; 128
    2e12:	bf e3       	ldi	r27, 0x3F	; 63
    2e14:	80 83       	st	Z, r24
    2e16:	91 83       	std	Z+1, r25	; 0x01
    2e18:	a2 83       	std	Z+2, r26	; 0x02
    2e1a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e1c:	8e 01       	movw	r16, r28
    2e1e:	01 5c       	subi	r16, 0xC1	; 193
    2e20:	1f 4f       	sbci	r17, 0xFF	; 255
    2e22:	fe 01       	movw	r30, r28
    2e24:	ed 5b       	subi	r30, 0xBD	; 189
    2e26:	ff 4f       	sbci	r31, 0xFF	; 255
    2e28:	60 81       	ld	r22, Z
    2e2a:	71 81       	ldd	r23, Z+1	; 0x01
    2e2c:	82 81       	ldd	r24, Z+2	; 0x02
    2e2e:	93 81       	ldd	r25, Z+3	; 0x03
    2e30:	20 e0       	ldi	r18, 0x00	; 0
    2e32:	30 e0       	ldi	r19, 0x00	; 0
    2e34:	4a e7       	ldi	r20, 0x7A	; 122
    2e36:	55 e4       	ldi	r21, 0x45	; 69
    2e38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e3c:	dc 01       	movw	r26, r24
    2e3e:	cb 01       	movw	r24, r22
    2e40:	f8 01       	movw	r30, r16
    2e42:	80 83       	st	Z, r24
    2e44:	91 83       	std	Z+1, r25	; 0x01
    2e46:	a2 83       	std	Z+2, r26	; 0x02
    2e48:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e4a:	fe 01       	movw	r30, r28
    2e4c:	ff 96       	adiw	r30, 0x3f	; 63
    2e4e:	60 81       	ld	r22, Z
    2e50:	71 81       	ldd	r23, Z+1	; 0x01
    2e52:	82 81       	ldd	r24, Z+2	; 0x02
    2e54:	93 81       	ldd	r25, Z+3	; 0x03
    2e56:	20 e0       	ldi	r18, 0x00	; 0
    2e58:	30 e0       	ldi	r19, 0x00	; 0
    2e5a:	40 e8       	ldi	r20, 0x80	; 128
    2e5c:	5f e3       	ldi	r21, 0x3F	; 63
    2e5e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2e62:	88 23       	and	r24, r24
    2e64:	2c f4       	brge	.+10     	; 0x2e70 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2e66:	81 e0       	ldi	r24, 0x01	; 1
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	9e af       	std	Y+62, r25	; 0x3e
    2e6c:	8d af       	std	Y+61, r24	; 0x3d
    2e6e:	46 c0       	rjmp	.+140    	; 0x2efc <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2e70:	fe 01       	movw	r30, r28
    2e72:	ff 96       	adiw	r30, 0x3f	; 63
    2e74:	60 81       	ld	r22, Z
    2e76:	71 81       	ldd	r23, Z+1	; 0x01
    2e78:	82 81       	ldd	r24, Z+2	; 0x02
    2e7a:	93 81       	ldd	r25, Z+3	; 0x03
    2e7c:	20 e0       	ldi	r18, 0x00	; 0
    2e7e:	3f ef       	ldi	r19, 0xFF	; 255
    2e80:	4f e7       	ldi	r20, 0x7F	; 127
    2e82:	57 e4       	ldi	r21, 0x47	; 71
    2e84:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2e88:	18 16       	cp	r1, r24
    2e8a:	64 f5       	brge	.+88     	; 0x2ee4 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e8c:	fe 01       	movw	r30, r28
    2e8e:	ed 5b       	subi	r30, 0xBD	; 189
    2e90:	ff 4f       	sbci	r31, 0xFF	; 255
    2e92:	60 81       	ld	r22, Z
    2e94:	71 81       	ldd	r23, Z+1	; 0x01
    2e96:	82 81       	ldd	r24, Z+2	; 0x02
    2e98:	93 81       	ldd	r25, Z+3	; 0x03
    2e9a:	20 e0       	ldi	r18, 0x00	; 0
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	40 e2       	ldi	r20, 0x20	; 32
    2ea0:	51 e4       	ldi	r21, 0x41	; 65
    2ea2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ea6:	dc 01       	movw	r26, r24
    2ea8:	cb 01       	movw	r24, r22
    2eaa:	bc 01       	movw	r22, r24
    2eac:	cd 01       	movw	r24, r26
    2eae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2eb2:	dc 01       	movw	r26, r24
    2eb4:	cb 01       	movw	r24, r22
    2eb6:	9e af       	std	Y+62, r25	; 0x3e
    2eb8:	8d af       	std	Y+61, r24	; 0x3d
    2eba:	0f c0       	rjmp	.+30     	; 0x2eda <LCD_displayCharacter+0x478>
    2ebc:	80 e9       	ldi	r24, 0x90	; 144
    2ebe:	91 e0       	ldi	r25, 0x01	; 1
    2ec0:	9c af       	std	Y+60, r25	; 0x3c
    2ec2:	8b af       	std	Y+59, r24	; 0x3b
    2ec4:	8b ad       	ldd	r24, Y+59	; 0x3b
    2ec6:	9c ad       	ldd	r25, Y+60	; 0x3c
    2ec8:	01 97       	sbiw	r24, 0x01	; 1
    2eca:	f1 f7       	brne	.-4      	; 0x2ec8 <LCD_displayCharacter+0x466>
    2ecc:	9c af       	std	Y+60, r25	; 0x3c
    2ece:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ed0:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ed2:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ed4:	01 97       	sbiw	r24, 0x01	; 1
    2ed6:	9e af       	std	Y+62, r25	; 0x3e
    2ed8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eda:	8d ad       	ldd	r24, Y+61	; 0x3d
    2edc:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ede:	00 97       	sbiw	r24, 0x00	; 0
    2ee0:	69 f7       	brne	.-38     	; 0x2ebc <LCD_displayCharacter+0x45a>
    2ee2:	16 c0       	rjmp	.+44     	; 0x2f10 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ee4:	fe 01       	movw	r30, r28
    2ee6:	ff 96       	adiw	r30, 0x3f	; 63
    2ee8:	60 81       	ld	r22, Z
    2eea:	71 81       	ldd	r23, Z+1	; 0x01
    2eec:	82 81       	ldd	r24, Z+2	; 0x02
    2eee:	93 81       	ldd	r25, Z+3	; 0x03
    2ef0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ef4:	dc 01       	movw	r26, r24
    2ef6:	cb 01       	movw	r24, r22
    2ef8:	9e af       	std	Y+62, r25	; 0x3e
    2efa:	8d af       	std	Y+61, r24	; 0x3d
    2efc:	8d ad       	ldd	r24, Y+61	; 0x3d
    2efe:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f00:	9a af       	std	Y+58, r25	; 0x3a
    2f02:	89 af       	std	Y+57, r24	; 0x39
    2f04:	89 ad       	ldd	r24, Y+57	; 0x39
    2f06:	9a ad       	ldd	r25, Y+58	; 0x3a
    2f08:	01 97       	sbiw	r24, 0x01	; 1
    2f0a:	f1 f7       	brne	.-4      	; 0x2f08 <LCD_displayCharacter+0x4a6>
    2f0c:	9a af       	std	Y+58, r25	; 0x3a
    2f0e:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2f10:	80 e0       	ldi	r24, 0x00	; 0
    2f12:	62 e0       	ldi	r22, 0x02	; 2
    2f14:	40 e0       	ldi	r20, 0x00	; 0
    2f16:	0e 94 1d 0c 	call	0x183a	; 0x183a <GPIO_writePin>
    2f1a:	80 e0       	ldi	r24, 0x00	; 0
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	a0 e8       	ldi	r26, 0x80	; 128
    2f20:	bf e3       	ldi	r27, 0x3F	; 63
    2f22:	8d ab       	std	Y+53, r24	; 0x35
    2f24:	9e ab       	std	Y+54, r25	; 0x36
    2f26:	af ab       	std	Y+55, r26	; 0x37
    2f28:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f2a:	6d a9       	ldd	r22, Y+53	; 0x35
    2f2c:	7e a9       	ldd	r23, Y+54	; 0x36
    2f2e:	8f a9       	ldd	r24, Y+55	; 0x37
    2f30:	98 ad       	ldd	r25, Y+56	; 0x38
    2f32:	20 e0       	ldi	r18, 0x00	; 0
    2f34:	30 e0       	ldi	r19, 0x00	; 0
    2f36:	4a e7       	ldi	r20, 0x7A	; 122
    2f38:	55 e4       	ldi	r21, 0x45	; 69
    2f3a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f3e:	dc 01       	movw	r26, r24
    2f40:	cb 01       	movw	r24, r22
    2f42:	89 ab       	std	Y+49, r24	; 0x31
    2f44:	9a ab       	std	Y+50, r25	; 0x32
    2f46:	ab ab       	std	Y+51, r26	; 0x33
    2f48:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2f4a:	69 a9       	ldd	r22, Y+49	; 0x31
    2f4c:	7a a9       	ldd	r23, Y+50	; 0x32
    2f4e:	8b a9       	ldd	r24, Y+51	; 0x33
    2f50:	9c a9       	ldd	r25, Y+52	; 0x34
    2f52:	20 e0       	ldi	r18, 0x00	; 0
    2f54:	30 e0       	ldi	r19, 0x00	; 0
    2f56:	40 e8       	ldi	r20, 0x80	; 128
    2f58:	5f e3       	ldi	r21, 0x3F	; 63
    2f5a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2f5e:	88 23       	and	r24, r24
    2f60:	2c f4       	brge	.+10     	; 0x2f6c <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2f62:	81 e0       	ldi	r24, 0x01	; 1
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	98 ab       	std	Y+48, r25	; 0x30
    2f68:	8f a7       	std	Y+47, r24	; 0x2f
    2f6a:	3f c0       	rjmp	.+126    	; 0x2fea <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2f6c:	69 a9       	ldd	r22, Y+49	; 0x31
    2f6e:	7a a9       	ldd	r23, Y+50	; 0x32
    2f70:	8b a9       	ldd	r24, Y+51	; 0x33
    2f72:	9c a9       	ldd	r25, Y+52	; 0x34
    2f74:	20 e0       	ldi	r18, 0x00	; 0
    2f76:	3f ef       	ldi	r19, 0xFF	; 255
    2f78:	4f e7       	ldi	r20, 0x7F	; 127
    2f7a:	57 e4       	ldi	r21, 0x47	; 71
    2f7c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2f80:	18 16       	cp	r1, r24
    2f82:	4c f5       	brge	.+82     	; 0x2fd6 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f84:	6d a9       	ldd	r22, Y+53	; 0x35
    2f86:	7e a9       	ldd	r23, Y+54	; 0x36
    2f88:	8f a9       	ldd	r24, Y+55	; 0x37
    2f8a:	98 ad       	ldd	r25, Y+56	; 0x38
    2f8c:	20 e0       	ldi	r18, 0x00	; 0
    2f8e:	30 e0       	ldi	r19, 0x00	; 0
    2f90:	40 e2       	ldi	r20, 0x20	; 32
    2f92:	51 e4       	ldi	r21, 0x41	; 65
    2f94:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f98:	dc 01       	movw	r26, r24
    2f9a:	cb 01       	movw	r24, r22
    2f9c:	bc 01       	movw	r22, r24
    2f9e:	cd 01       	movw	r24, r26
    2fa0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2fa4:	dc 01       	movw	r26, r24
    2fa6:	cb 01       	movw	r24, r22
    2fa8:	98 ab       	std	Y+48, r25	; 0x30
    2faa:	8f a7       	std	Y+47, r24	; 0x2f
    2fac:	0f c0       	rjmp	.+30     	; 0x2fcc <LCD_displayCharacter+0x56a>
    2fae:	80 e9       	ldi	r24, 0x90	; 144
    2fb0:	91 e0       	ldi	r25, 0x01	; 1
    2fb2:	9e a7       	std	Y+46, r25	; 0x2e
    2fb4:	8d a7       	std	Y+45, r24	; 0x2d
    2fb6:	8d a5       	ldd	r24, Y+45	; 0x2d
    2fb8:	9e a5       	ldd	r25, Y+46	; 0x2e
    2fba:	01 97       	sbiw	r24, 0x01	; 1
    2fbc:	f1 f7       	brne	.-4      	; 0x2fba <LCD_displayCharacter+0x558>
    2fbe:	9e a7       	std	Y+46, r25	; 0x2e
    2fc0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fc2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fc4:	98 a9       	ldd	r25, Y+48	; 0x30
    2fc6:	01 97       	sbiw	r24, 0x01	; 1
    2fc8:	98 ab       	std	Y+48, r25	; 0x30
    2fca:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fcc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fce:	98 a9       	ldd	r25, Y+48	; 0x30
    2fd0:	00 97       	sbiw	r24, 0x00	; 0
    2fd2:	69 f7       	brne	.-38     	; 0x2fae <LCD_displayCharacter+0x54c>
    2fd4:	14 c0       	rjmp	.+40     	; 0x2ffe <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fd6:	69 a9       	ldd	r22, Y+49	; 0x31
    2fd8:	7a a9       	ldd	r23, Y+50	; 0x32
    2fda:	8b a9       	ldd	r24, Y+51	; 0x33
    2fdc:	9c a9       	ldd	r25, Y+52	; 0x34
    2fde:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2fe2:	dc 01       	movw	r26, r24
    2fe4:	cb 01       	movw	r24, r22
    2fe6:	98 ab       	std	Y+48, r25	; 0x30
    2fe8:	8f a7       	std	Y+47, r24	; 0x2f
    2fea:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fec:	98 a9       	ldd	r25, Y+48	; 0x30
    2fee:	9c a7       	std	Y+44, r25	; 0x2c
    2ff0:	8b a7       	std	Y+43, r24	; 0x2b
    2ff2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ff4:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ff6:	01 97       	sbiw	r24, 0x01	; 1
    2ff8:	f1 f7       	brne	.-4      	; 0x2ff6 <LCD_displayCharacter+0x594>
    2ffa:	9c a7       	std	Y+44, r25	; 0x2c
    2ffc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2ffe:	80 e0       	ldi	r24, 0x00	; 0
    3000:	62 e0       	ldi	r22, 0x02	; 2
    3002:	41 e0       	ldi	r20, 0x01	; 1
    3004:	0e 94 1d 0c 	call	0x183a	; 0x183a <GPIO_writePin>
    3008:	80 e0       	ldi	r24, 0x00	; 0
    300a:	90 e0       	ldi	r25, 0x00	; 0
    300c:	a0 e8       	ldi	r26, 0x80	; 128
    300e:	bf e3       	ldi	r27, 0x3F	; 63
    3010:	8f a3       	std	Y+39, r24	; 0x27
    3012:	98 a7       	std	Y+40, r25	; 0x28
    3014:	a9 a7       	std	Y+41, r26	; 0x29
    3016:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3018:	6f a1       	ldd	r22, Y+39	; 0x27
    301a:	78 a5       	ldd	r23, Y+40	; 0x28
    301c:	89 a5       	ldd	r24, Y+41	; 0x29
    301e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3020:	20 e0       	ldi	r18, 0x00	; 0
    3022:	30 e0       	ldi	r19, 0x00	; 0
    3024:	4a e7       	ldi	r20, 0x7A	; 122
    3026:	55 e4       	ldi	r21, 0x45	; 69
    3028:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    302c:	dc 01       	movw	r26, r24
    302e:	cb 01       	movw	r24, r22
    3030:	8b a3       	std	Y+35, r24	; 0x23
    3032:	9c a3       	std	Y+36, r25	; 0x24
    3034:	ad a3       	std	Y+37, r26	; 0x25
    3036:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3038:	6b a1       	ldd	r22, Y+35	; 0x23
    303a:	7c a1       	ldd	r23, Y+36	; 0x24
    303c:	8d a1       	ldd	r24, Y+37	; 0x25
    303e:	9e a1       	ldd	r25, Y+38	; 0x26
    3040:	20 e0       	ldi	r18, 0x00	; 0
    3042:	30 e0       	ldi	r19, 0x00	; 0
    3044:	40 e8       	ldi	r20, 0x80	; 128
    3046:	5f e3       	ldi	r21, 0x3F	; 63
    3048:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    304c:	88 23       	and	r24, r24
    304e:	2c f4       	brge	.+10     	; 0x305a <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    3050:	81 e0       	ldi	r24, 0x01	; 1
    3052:	90 e0       	ldi	r25, 0x00	; 0
    3054:	9a a3       	std	Y+34, r25	; 0x22
    3056:	89 a3       	std	Y+33, r24	; 0x21
    3058:	3f c0       	rjmp	.+126    	; 0x30d8 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    305a:	6b a1       	ldd	r22, Y+35	; 0x23
    305c:	7c a1       	ldd	r23, Y+36	; 0x24
    305e:	8d a1       	ldd	r24, Y+37	; 0x25
    3060:	9e a1       	ldd	r25, Y+38	; 0x26
    3062:	20 e0       	ldi	r18, 0x00	; 0
    3064:	3f ef       	ldi	r19, 0xFF	; 255
    3066:	4f e7       	ldi	r20, 0x7F	; 127
    3068:	57 e4       	ldi	r21, 0x47	; 71
    306a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    306e:	18 16       	cp	r1, r24
    3070:	4c f5       	brge	.+82     	; 0x30c4 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3072:	6f a1       	ldd	r22, Y+39	; 0x27
    3074:	78 a5       	ldd	r23, Y+40	; 0x28
    3076:	89 a5       	ldd	r24, Y+41	; 0x29
    3078:	9a a5       	ldd	r25, Y+42	; 0x2a
    307a:	20 e0       	ldi	r18, 0x00	; 0
    307c:	30 e0       	ldi	r19, 0x00	; 0
    307e:	40 e2       	ldi	r20, 0x20	; 32
    3080:	51 e4       	ldi	r21, 0x41	; 65
    3082:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3086:	dc 01       	movw	r26, r24
    3088:	cb 01       	movw	r24, r22
    308a:	bc 01       	movw	r22, r24
    308c:	cd 01       	movw	r24, r26
    308e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3092:	dc 01       	movw	r26, r24
    3094:	cb 01       	movw	r24, r22
    3096:	9a a3       	std	Y+34, r25	; 0x22
    3098:	89 a3       	std	Y+33, r24	; 0x21
    309a:	0f c0       	rjmp	.+30     	; 0x30ba <LCD_displayCharacter+0x658>
    309c:	80 e9       	ldi	r24, 0x90	; 144
    309e:	91 e0       	ldi	r25, 0x01	; 1
    30a0:	98 a3       	std	Y+32, r25	; 0x20
    30a2:	8f 8f       	std	Y+31, r24	; 0x1f
    30a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    30a6:	98 a1       	ldd	r25, Y+32	; 0x20
    30a8:	01 97       	sbiw	r24, 0x01	; 1
    30aa:	f1 f7       	brne	.-4      	; 0x30a8 <LCD_displayCharacter+0x646>
    30ac:	98 a3       	std	Y+32, r25	; 0x20
    30ae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30b0:	89 a1       	ldd	r24, Y+33	; 0x21
    30b2:	9a a1       	ldd	r25, Y+34	; 0x22
    30b4:	01 97       	sbiw	r24, 0x01	; 1
    30b6:	9a a3       	std	Y+34, r25	; 0x22
    30b8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30ba:	89 a1       	ldd	r24, Y+33	; 0x21
    30bc:	9a a1       	ldd	r25, Y+34	; 0x22
    30be:	00 97       	sbiw	r24, 0x00	; 0
    30c0:	69 f7       	brne	.-38     	; 0x309c <LCD_displayCharacter+0x63a>
    30c2:	14 c0       	rjmp	.+40     	; 0x30ec <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30c4:	6b a1       	ldd	r22, Y+35	; 0x23
    30c6:	7c a1       	ldd	r23, Y+36	; 0x24
    30c8:	8d a1       	ldd	r24, Y+37	; 0x25
    30ca:	9e a1       	ldd	r25, Y+38	; 0x26
    30cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30d0:	dc 01       	movw	r26, r24
    30d2:	cb 01       	movw	r24, r22
    30d4:	9a a3       	std	Y+34, r25	; 0x22
    30d6:	89 a3       	std	Y+33, r24	; 0x21
    30d8:	89 a1       	ldd	r24, Y+33	; 0x21
    30da:	9a a1       	ldd	r25, Y+34	; 0x22
    30dc:	9e 8f       	std	Y+30, r25	; 0x1e
    30de:	8d 8f       	std	Y+29, r24	; 0x1d
    30e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30e4:	01 97       	sbiw	r24, 0x01	; 1
    30e6:	f1 f7       	brne	.-4      	; 0x30e4 <LCD_displayCharacter+0x682>
    30e8:	9e 8f       	std	Y+30, r25	; 0x1e
    30ea:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    30ec:	fe 01       	movw	r30, r28
    30ee:	ed 59       	subi	r30, 0x9D	; 157
    30f0:	ff 4f       	sbci	r31, 0xFF	; 255
    30f2:	80 81       	ld	r24, Z
    30f4:	98 2f       	mov	r25, r24
    30f6:	91 70       	andi	r25, 0x01	; 1
    30f8:	80 e0       	ldi	r24, 0x00	; 0
    30fa:	63 e0       	ldi	r22, 0x03	; 3
    30fc:	49 2f       	mov	r20, r25
    30fe:	0e 94 1d 0c 	call	0x183a	; 0x183a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    3102:	fe 01       	movw	r30, r28
    3104:	ed 59       	subi	r30, 0x9D	; 157
    3106:	ff 4f       	sbci	r31, 0xFF	; 255
    3108:	80 81       	ld	r24, Z
    310a:	88 2f       	mov	r24, r24
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	82 70       	andi	r24, 0x02	; 2
    3110:	90 70       	andi	r25, 0x00	; 0
    3112:	95 95       	asr	r25
    3114:	87 95       	ror	r24
    3116:	98 2f       	mov	r25, r24
    3118:	80 e0       	ldi	r24, 0x00	; 0
    311a:	64 e0       	ldi	r22, 0x04	; 4
    311c:	49 2f       	mov	r20, r25
    311e:	0e 94 1d 0c 	call	0x183a	; 0x183a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    3122:	fe 01       	movw	r30, r28
    3124:	ed 59       	subi	r30, 0x9D	; 157
    3126:	ff 4f       	sbci	r31, 0xFF	; 255
    3128:	80 81       	ld	r24, Z
    312a:	88 2f       	mov	r24, r24
    312c:	90 e0       	ldi	r25, 0x00	; 0
    312e:	84 70       	andi	r24, 0x04	; 4
    3130:	90 70       	andi	r25, 0x00	; 0
    3132:	95 95       	asr	r25
    3134:	87 95       	ror	r24
    3136:	95 95       	asr	r25
    3138:	87 95       	ror	r24
    313a:	98 2f       	mov	r25, r24
    313c:	80 e0       	ldi	r24, 0x00	; 0
    313e:	65 e0       	ldi	r22, 0x05	; 5
    3140:	49 2f       	mov	r20, r25
    3142:	0e 94 1d 0c 	call	0x183a	; 0x183a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    3146:	fe 01       	movw	r30, r28
    3148:	ed 59       	subi	r30, 0x9D	; 157
    314a:	ff 4f       	sbci	r31, 0xFF	; 255
    314c:	80 81       	ld	r24, Z
    314e:	88 2f       	mov	r24, r24
    3150:	90 e0       	ldi	r25, 0x00	; 0
    3152:	88 70       	andi	r24, 0x08	; 8
    3154:	90 70       	andi	r25, 0x00	; 0
    3156:	95 95       	asr	r25
    3158:	87 95       	ror	r24
    315a:	95 95       	asr	r25
    315c:	87 95       	ror	r24
    315e:	95 95       	asr	r25
    3160:	87 95       	ror	r24
    3162:	98 2f       	mov	r25, r24
    3164:	80 e0       	ldi	r24, 0x00	; 0
    3166:	66 e0       	ldi	r22, 0x06	; 6
    3168:	49 2f       	mov	r20, r25
    316a:	0e 94 1d 0c 	call	0x183a	; 0x183a <GPIO_writePin>
    316e:	80 e0       	ldi	r24, 0x00	; 0
    3170:	90 e0       	ldi	r25, 0x00	; 0
    3172:	a0 e8       	ldi	r26, 0x80	; 128
    3174:	bf e3       	ldi	r27, 0x3F	; 63
    3176:	89 8f       	std	Y+25, r24	; 0x19
    3178:	9a 8f       	std	Y+26, r25	; 0x1a
    317a:	ab 8f       	std	Y+27, r26	; 0x1b
    317c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    317e:	69 8d       	ldd	r22, Y+25	; 0x19
    3180:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3182:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3184:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3186:	20 e0       	ldi	r18, 0x00	; 0
    3188:	30 e0       	ldi	r19, 0x00	; 0
    318a:	4a e7       	ldi	r20, 0x7A	; 122
    318c:	55 e4       	ldi	r21, 0x45	; 69
    318e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3192:	dc 01       	movw	r26, r24
    3194:	cb 01       	movw	r24, r22
    3196:	8d 8b       	std	Y+21, r24	; 0x15
    3198:	9e 8b       	std	Y+22, r25	; 0x16
    319a:	af 8b       	std	Y+23, r26	; 0x17
    319c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    319e:	6d 89       	ldd	r22, Y+21	; 0x15
    31a0:	7e 89       	ldd	r23, Y+22	; 0x16
    31a2:	8f 89       	ldd	r24, Y+23	; 0x17
    31a4:	98 8d       	ldd	r25, Y+24	; 0x18
    31a6:	20 e0       	ldi	r18, 0x00	; 0
    31a8:	30 e0       	ldi	r19, 0x00	; 0
    31aa:	40 e8       	ldi	r20, 0x80	; 128
    31ac:	5f e3       	ldi	r21, 0x3F	; 63
    31ae:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    31b2:	88 23       	and	r24, r24
    31b4:	2c f4       	brge	.+10     	; 0x31c0 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    31b6:	81 e0       	ldi	r24, 0x01	; 1
    31b8:	90 e0       	ldi	r25, 0x00	; 0
    31ba:	9c 8b       	std	Y+20, r25	; 0x14
    31bc:	8b 8b       	std	Y+19, r24	; 0x13
    31be:	3f c0       	rjmp	.+126    	; 0x323e <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    31c0:	6d 89       	ldd	r22, Y+21	; 0x15
    31c2:	7e 89       	ldd	r23, Y+22	; 0x16
    31c4:	8f 89       	ldd	r24, Y+23	; 0x17
    31c6:	98 8d       	ldd	r25, Y+24	; 0x18
    31c8:	20 e0       	ldi	r18, 0x00	; 0
    31ca:	3f ef       	ldi	r19, 0xFF	; 255
    31cc:	4f e7       	ldi	r20, 0x7F	; 127
    31ce:	57 e4       	ldi	r21, 0x47	; 71
    31d0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    31d4:	18 16       	cp	r1, r24
    31d6:	4c f5       	brge	.+82     	; 0x322a <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31d8:	69 8d       	ldd	r22, Y+25	; 0x19
    31da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31e0:	20 e0       	ldi	r18, 0x00	; 0
    31e2:	30 e0       	ldi	r19, 0x00	; 0
    31e4:	40 e2       	ldi	r20, 0x20	; 32
    31e6:	51 e4       	ldi	r21, 0x41	; 65
    31e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    31ec:	dc 01       	movw	r26, r24
    31ee:	cb 01       	movw	r24, r22
    31f0:	bc 01       	movw	r22, r24
    31f2:	cd 01       	movw	r24, r26
    31f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    31f8:	dc 01       	movw	r26, r24
    31fa:	cb 01       	movw	r24, r22
    31fc:	9c 8b       	std	Y+20, r25	; 0x14
    31fe:	8b 8b       	std	Y+19, r24	; 0x13
    3200:	0f c0       	rjmp	.+30     	; 0x3220 <LCD_displayCharacter+0x7be>
    3202:	80 e9       	ldi	r24, 0x90	; 144
    3204:	91 e0       	ldi	r25, 0x01	; 1
    3206:	9a 8b       	std	Y+18, r25	; 0x12
    3208:	89 8b       	std	Y+17, r24	; 0x11
    320a:	89 89       	ldd	r24, Y+17	; 0x11
    320c:	9a 89       	ldd	r25, Y+18	; 0x12
    320e:	01 97       	sbiw	r24, 0x01	; 1
    3210:	f1 f7       	brne	.-4      	; 0x320e <LCD_displayCharacter+0x7ac>
    3212:	9a 8b       	std	Y+18, r25	; 0x12
    3214:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3216:	8b 89       	ldd	r24, Y+19	; 0x13
    3218:	9c 89       	ldd	r25, Y+20	; 0x14
    321a:	01 97       	sbiw	r24, 0x01	; 1
    321c:	9c 8b       	std	Y+20, r25	; 0x14
    321e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3220:	8b 89       	ldd	r24, Y+19	; 0x13
    3222:	9c 89       	ldd	r25, Y+20	; 0x14
    3224:	00 97       	sbiw	r24, 0x00	; 0
    3226:	69 f7       	brne	.-38     	; 0x3202 <LCD_displayCharacter+0x7a0>
    3228:	14 c0       	rjmp	.+40     	; 0x3252 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    322a:	6d 89       	ldd	r22, Y+21	; 0x15
    322c:	7e 89       	ldd	r23, Y+22	; 0x16
    322e:	8f 89       	ldd	r24, Y+23	; 0x17
    3230:	98 8d       	ldd	r25, Y+24	; 0x18
    3232:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3236:	dc 01       	movw	r26, r24
    3238:	cb 01       	movw	r24, r22
    323a:	9c 8b       	std	Y+20, r25	; 0x14
    323c:	8b 8b       	std	Y+19, r24	; 0x13
    323e:	8b 89       	ldd	r24, Y+19	; 0x13
    3240:	9c 89       	ldd	r25, Y+20	; 0x14
    3242:	98 8b       	std	Y+16, r25	; 0x10
    3244:	8f 87       	std	Y+15, r24	; 0x0f
    3246:	8f 85       	ldd	r24, Y+15	; 0x0f
    3248:	98 89       	ldd	r25, Y+16	; 0x10
    324a:	01 97       	sbiw	r24, 0x01	; 1
    324c:	f1 f7       	brne	.-4      	; 0x324a <LCD_displayCharacter+0x7e8>
    324e:	98 8b       	std	Y+16, r25	; 0x10
    3250:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3252:	80 e0       	ldi	r24, 0x00	; 0
    3254:	62 e0       	ldi	r22, 0x02	; 2
    3256:	40 e0       	ldi	r20, 0x00	; 0
    3258:	0e 94 1d 0c 	call	0x183a	; 0x183a <GPIO_writePin>
    325c:	80 e0       	ldi	r24, 0x00	; 0
    325e:	90 e0       	ldi	r25, 0x00	; 0
    3260:	a0 e8       	ldi	r26, 0x80	; 128
    3262:	bf e3       	ldi	r27, 0x3F	; 63
    3264:	8b 87       	std	Y+11, r24	; 0x0b
    3266:	9c 87       	std	Y+12, r25	; 0x0c
    3268:	ad 87       	std	Y+13, r26	; 0x0d
    326a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    326c:	6b 85       	ldd	r22, Y+11	; 0x0b
    326e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3270:	8d 85       	ldd	r24, Y+13	; 0x0d
    3272:	9e 85       	ldd	r25, Y+14	; 0x0e
    3274:	20 e0       	ldi	r18, 0x00	; 0
    3276:	30 e0       	ldi	r19, 0x00	; 0
    3278:	4a e7       	ldi	r20, 0x7A	; 122
    327a:	55 e4       	ldi	r21, 0x45	; 69
    327c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3280:	dc 01       	movw	r26, r24
    3282:	cb 01       	movw	r24, r22
    3284:	8f 83       	std	Y+7, r24	; 0x07
    3286:	98 87       	std	Y+8, r25	; 0x08
    3288:	a9 87       	std	Y+9, r26	; 0x09
    328a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    328c:	6f 81       	ldd	r22, Y+7	; 0x07
    328e:	78 85       	ldd	r23, Y+8	; 0x08
    3290:	89 85       	ldd	r24, Y+9	; 0x09
    3292:	9a 85       	ldd	r25, Y+10	; 0x0a
    3294:	20 e0       	ldi	r18, 0x00	; 0
    3296:	30 e0       	ldi	r19, 0x00	; 0
    3298:	40 e8       	ldi	r20, 0x80	; 128
    329a:	5f e3       	ldi	r21, 0x3F	; 63
    329c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    32a0:	88 23       	and	r24, r24
    32a2:	2c f4       	brge	.+10     	; 0x32ae <LCD_displayCharacter+0x84c>
		__ticks = 1;
    32a4:	81 e0       	ldi	r24, 0x01	; 1
    32a6:	90 e0       	ldi	r25, 0x00	; 0
    32a8:	9e 83       	std	Y+6, r25	; 0x06
    32aa:	8d 83       	std	Y+5, r24	; 0x05
    32ac:	3f c0       	rjmp	.+126    	; 0x332c <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    32ae:	6f 81       	ldd	r22, Y+7	; 0x07
    32b0:	78 85       	ldd	r23, Y+8	; 0x08
    32b2:	89 85       	ldd	r24, Y+9	; 0x09
    32b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    32b6:	20 e0       	ldi	r18, 0x00	; 0
    32b8:	3f ef       	ldi	r19, 0xFF	; 255
    32ba:	4f e7       	ldi	r20, 0x7F	; 127
    32bc:	57 e4       	ldi	r21, 0x47	; 71
    32be:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    32c2:	18 16       	cp	r1, r24
    32c4:	4c f5       	brge	.+82     	; 0x3318 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    32c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    32ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    32cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    32ce:	20 e0       	ldi	r18, 0x00	; 0
    32d0:	30 e0       	ldi	r19, 0x00	; 0
    32d2:	40 e2       	ldi	r20, 0x20	; 32
    32d4:	51 e4       	ldi	r21, 0x41	; 65
    32d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    32da:	dc 01       	movw	r26, r24
    32dc:	cb 01       	movw	r24, r22
    32de:	bc 01       	movw	r22, r24
    32e0:	cd 01       	movw	r24, r26
    32e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    32e6:	dc 01       	movw	r26, r24
    32e8:	cb 01       	movw	r24, r22
    32ea:	9e 83       	std	Y+6, r25	; 0x06
    32ec:	8d 83       	std	Y+5, r24	; 0x05
    32ee:	0f c0       	rjmp	.+30     	; 0x330e <LCD_displayCharacter+0x8ac>
    32f0:	80 e9       	ldi	r24, 0x90	; 144
    32f2:	91 e0       	ldi	r25, 0x01	; 1
    32f4:	9c 83       	std	Y+4, r25	; 0x04
    32f6:	8b 83       	std	Y+3, r24	; 0x03
    32f8:	8b 81       	ldd	r24, Y+3	; 0x03
    32fa:	9c 81       	ldd	r25, Y+4	; 0x04
    32fc:	01 97       	sbiw	r24, 0x01	; 1
    32fe:	f1 f7       	brne	.-4      	; 0x32fc <LCD_displayCharacter+0x89a>
    3300:	9c 83       	std	Y+4, r25	; 0x04
    3302:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3304:	8d 81       	ldd	r24, Y+5	; 0x05
    3306:	9e 81       	ldd	r25, Y+6	; 0x06
    3308:	01 97       	sbiw	r24, 0x01	; 1
    330a:	9e 83       	std	Y+6, r25	; 0x06
    330c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    330e:	8d 81       	ldd	r24, Y+5	; 0x05
    3310:	9e 81       	ldd	r25, Y+6	; 0x06
    3312:	00 97       	sbiw	r24, 0x00	; 0
    3314:	69 f7       	brne	.-38     	; 0x32f0 <LCD_displayCharacter+0x88e>
    3316:	14 c0       	rjmp	.+40     	; 0x3340 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3318:	6f 81       	ldd	r22, Y+7	; 0x07
    331a:	78 85       	ldd	r23, Y+8	; 0x08
    331c:	89 85       	ldd	r24, Y+9	; 0x09
    331e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3320:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3324:	dc 01       	movw	r26, r24
    3326:	cb 01       	movw	r24, r22
    3328:	9e 83       	std	Y+6, r25	; 0x06
    332a:	8d 83       	std	Y+5, r24	; 0x05
    332c:	8d 81       	ldd	r24, Y+5	; 0x05
    332e:	9e 81       	ldd	r25, Y+6	; 0x06
    3330:	9a 83       	std	Y+2, r25	; 0x02
    3332:	89 83       	std	Y+1, r24	; 0x01
    3334:	89 81       	ldd	r24, Y+1	; 0x01
    3336:	9a 81       	ldd	r25, Y+2	; 0x02
    3338:	01 97       	sbiw	r24, 0x01	; 1
    333a:	f1 f7       	brne	.-4      	; 0x3338 <LCD_displayCharacter+0x8d6>
    333c:	9a 83       	std	Y+2, r25	; 0x02
    333e:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3340:	cd 59       	subi	r28, 0x9D	; 157
    3342:	df 4f       	sbci	r29, 0xFF	; 255
    3344:	0f b6       	in	r0, 0x3f	; 63
    3346:	f8 94       	cli
    3348:	de bf       	out	0x3e, r29	; 62
    334a:	0f be       	out	0x3f, r0	; 63
    334c:	cd bf       	out	0x3d, r28	; 61
    334e:	cf 91       	pop	r28
    3350:	df 91       	pop	r29
    3352:	1f 91       	pop	r17
    3354:	0f 91       	pop	r16
    3356:	08 95       	ret

00003358 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    3358:	df 93       	push	r29
    335a:	cf 93       	push	r28
    335c:	00 d0       	rcall	.+0      	; 0x335e <LCD_displayString+0x6>
    335e:	0f 92       	push	r0
    3360:	cd b7       	in	r28, 0x3d	; 61
    3362:	de b7       	in	r29, 0x3e	; 62
    3364:	9b 83       	std	Y+3, r25	; 0x03
    3366:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3368:	19 82       	std	Y+1, r1	; 0x01
    336a:	0e c0       	rjmp	.+28     	; 0x3388 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    336c:	89 81       	ldd	r24, Y+1	; 0x01
    336e:	28 2f       	mov	r18, r24
    3370:	30 e0       	ldi	r19, 0x00	; 0
    3372:	8a 81       	ldd	r24, Y+2	; 0x02
    3374:	9b 81       	ldd	r25, Y+3	; 0x03
    3376:	fc 01       	movw	r30, r24
    3378:	e2 0f       	add	r30, r18
    337a:	f3 1f       	adc	r31, r19
    337c:	80 81       	ld	r24, Z
    337e:	0e 94 31 15 	call	0x2a62	; 0x2a62 <LCD_displayCharacter>
		i++;
    3382:	89 81       	ldd	r24, Y+1	; 0x01
    3384:	8f 5f       	subi	r24, 0xFF	; 255
    3386:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3388:	89 81       	ldd	r24, Y+1	; 0x01
    338a:	28 2f       	mov	r18, r24
    338c:	30 e0       	ldi	r19, 0x00	; 0
    338e:	8a 81       	ldd	r24, Y+2	; 0x02
    3390:	9b 81       	ldd	r25, Y+3	; 0x03
    3392:	fc 01       	movw	r30, r24
    3394:	e2 0f       	add	r30, r18
    3396:	f3 1f       	adc	r31, r19
    3398:	80 81       	ld	r24, Z
    339a:	88 23       	and	r24, r24
    339c:	39 f7       	brne	.-50     	; 0x336c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    339e:	0f 90       	pop	r0
    33a0:	0f 90       	pop	r0
    33a2:	0f 90       	pop	r0
    33a4:	cf 91       	pop	r28
    33a6:	df 91       	pop	r29
    33a8:	08 95       	ret

000033aa <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    33aa:	df 93       	push	r29
    33ac:	cf 93       	push	r28
    33ae:	00 d0       	rcall	.+0      	; 0x33b0 <LCD_moveCursor+0x6>
    33b0:	00 d0       	rcall	.+0      	; 0x33b2 <LCD_moveCursor+0x8>
    33b2:	0f 92       	push	r0
    33b4:	cd b7       	in	r28, 0x3d	; 61
    33b6:	de b7       	in	r29, 0x3e	; 62
    33b8:	8a 83       	std	Y+2, r24	; 0x02
    33ba:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    33bc:	8a 81       	ldd	r24, Y+2	; 0x02
    33be:	28 2f       	mov	r18, r24
    33c0:	30 e0       	ldi	r19, 0x00	; 0
    33c2:	3d 83       	std	Y+5, r19	; 0x05
    33c4:	2c 83       	std	Y+4, r18	; 0x04
    33c6:	8c 81       	ldd	r24, Y+4	; 0x04
    33c8:	9d 81       	ldd	r25, Y+5	; 0x05
    33ca:	81 30       	cpi	r24, 0x01	; 1
    33cc:	91 05       	cpc	r25, r1
    33ce:	c1 f0       	breq	.+48     	; 0x3400 <LCD_moveCursor+0x56>
    33d0:	2c 81       	ldd	r18, Y+4	; 0x04
    33d2:	3d 81       	ldd	r19, Y+5	; 0x05
    33d4:	22 30       	cpi	r18, 0x02	; 2
    33d6:	31 05       	cpc	r19, r1
    33d8:	2c f4       	brge	.+10     	; 0x33e4 <LCD_moveCursor+0x3a>
    33da:	8c 81       	ldd	r24, Y+4	; 0x04
    33dc:	9d 81       	ldd	r25, Y+5	; 0x05
    33de:	00 97       	sbiw	r24, 0x00	; 0
    33e0:	61 f0       	breq	.+24     	; 0x33fa <LCD_moveCursor+0x50>
    33e2:	19 c0       	rjmp	.+50     	; 0x3416 <LCD_moveCursor+0x6c>
    33e4:	2c 81       	ldd	r18, Y+4	; 0x04
    33e6:	3d 81       	ldd	r19, Y+5	; 0x05
    33e8:	22 30       	cpi	r18, 0x02	; 2
    33ea:	31 05       	cpc	r19, r1
    33ec:	69 f0       	breq	.+26     	; 0x3408 <LCD_moveCursor+0x5e>
    33ee:	8c 81       	ldd	r24, Y+4	; 0x04
    33f0:	9d 81       	ldd	r25, Y+5	; 0x05
    33f2:	83 30       	cpi	r24, 0x03	; 3
    33f4:	91 05       	cpc	r25, r1
    33f6:	61 f0       	breq	.+24     	; 0x3410 <LCD_moveCursor+0x66>
    33f8:	0e c0       	rjmp	.+28     	; 0x3416 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    33fa:	8b 81       	ldd	r24, Y+3	; 0x03
    33fc:	89 83       	std	Y+1, r24	; 0x01
    33fe:	0b c0       	rjmp	.+22     	; 0x3416 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    3400:	8b 81       	ldd	r24, Y+3	; 0x03
    3402:	80 5c       	subi	r24, 0xC0	; 192
    3404:	89 83       	std	Y+1, r24	; 0x01
    3406:	07 c0       	rjmp	.+14     	; 0x3416 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    3408:	8b 81       	ldd	r24, Y+3	; 0x03
    340a:	80 5f       	subi	r24, 0xF0	; 240
    340c:	89 83       	std	Y+1, r24	; 0x01
    340e:	03 c0       	rjmp	.+6      	; 0x3416 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    3410:	8b 81       	ldd	r24, Y+3	; 0x03
    3412:	80 5b       	subi	r24, 0xB0	; 176
    3414:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    3416:	89 81       	ldd	r24, Y+1	; 0x01
    3418:	80 68       	ori	r24, 0x80	; 128
    341a:	0e 94 b6 10 	call	0x216c	; 0x216c <LCD_sendCommand>
}
    341e:	0f 90       	pop	r0
    3420:	0f 90       	pop	r0
    3422:	0f 90       	pop	r0
    3424:	0f 90       	pop	r0
    3426:	0f 90       	pop	r0
    3428:	cf 91       	pop	r28
    342a:	df 91       	pop	r29
    342c:	08 95       	ret

0000342e <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    342e:	df 93       	push	r29
    3430:	cf 93       	push	r28
    3432:	00 d0       	rcall	.+0      	; 0x3434 <LCD_displayStringRowColumn+0x6>
    3434:	00 d0       	rcall	.+0      	; 0x3436 <LCD_displayStringRowColumn+0x8>
    3436:	cd b7       	in	r28, 0x3d	; 61
    3438:	de b7       	in	r29, 0x3e	; 62
    343a:	89 83       	std	Y+1, r24	; 0x01
    343c:	6a 83       	std	Y+2, r22	; 0x02
    343e:	5c 83       	std	Y+4, r21	; 0x04
    3440:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    3442:	89 81       	ldd	r24, Y+1	; 0x01
    3444:	6a 81       	ldd	r22, Y+2	; 0x02
    3446:	0e 94 d5 19 	call	0x33aa	; 0x33aa <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    344a:	8b 81       	ldd	r24, Y+3	; 0x03
    344c:	9c 81       	ldd	r25, Y+4	; 0x04
    344e:	0e 94 ac 19 	call	0x3358	; 0x3358 <LCD_displayString>
}
    3452:	0f 90       	pop	r0
    3454:	0f 90       	pop	r0
    3456:	0f 90       	pop	r0
    3458:	0f 90       	pop	r0
    345a:	cf 91       	pop	r28
    345c:	df 91       	pop	r29
    345e:	08 95       	ret

00003460 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    3460:	df 93       	push	r29
    3462:	cf 93       	push	r28
    3464:	cd b7       	in	r28, 0x3d	; 61
    3466:	de b7       	in	r29, 0x3e	; 62
    3468:	62 97       	sbiw	r28, 0x12	; 18
    346a:	0f b6       	in	r0, 0x3f	; 63
    346c:	f8 94       	cli
    346e:	de bf       	out	0x3e, r29	; 62
    3470:	0f be       	out	0x3f, r0	; 63
    3472:	cd bf       	out	0x3d, r28	; 61
    3474:	9a 8b       	std	Y+18, r25	; 0x12
    3476:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3478:	89 89       	ldd	r24, Y+17	; 0x11
    347a:	9a 89       	ldd	r25, Y+18	; 0x12
    347c:	9e 01       	movw	r18, r28
    347e:	2f 5f       	subi	r18, 0xFF	; 255
    3480:	3f 4f       	sbci	r19, 0xFF	; 255
    3482:	b9 01       	movw	r22, r18
    3484:	4a e0       	ldi	r20, 0x0A	; 10
    3486:	50 e0       	ldi	r21, 0x00	; 0
    3488:	0e 94 a8 1a 	call	0x3550	; 0x3550 <itoa>
   LCD_displayString(buff); /* Display the string */
    348c:	ce 01       	movw	r24, r28
    348e:	01 96       	adiw	r24, 0x01	; 1
    3490:	0e 94 ac 19 	call	0x3358	; 0x3358 <LCD_displayString>
}
    3494:	62 96       	adiw	r28, 0x12	; 18
    3496:	0f b6       	in	r0, 0x3f	; 63
    3498:	f8 94       	cli
    349a:	de bf       	out	0x3e, r29	; 62
    349c:	0f be       	out	0x3f, r0	; 63
    349e:	cd bf       	out	0x3d, r28	; 61
    34a0:	cf 91       	pop	r28
    34a2:	df 91       	pop	r29
    34a4:	08 95       	ret

000034a6 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    34a6:	df 93       	push	r29
    34a8:	cf 93       	push	r28
    34aa:	cd b7       	in	r28, 0x3d	; 61
    34ac:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    34ae:	81 e0       	ldi	r24, 0x01	; 1
    34b0:	0e 94 b6 10 	call	0x216c	; 0x216c <LCD_sendCommand>
}
    34b4:	cf 91       	pop	r28
    34b6:	df 91       	pop	r29
    34b8:	08 95       	ret

000034ba <__udivmodhi4>:
    34ba:	aa 1b       	sub	r26, r26
    34bc:	bb 1b       	sub	r27, r27
    34be:	51 e1       	ldi	r21, 0x11	; 17
    34c0:	07 c0       	rjmp	.+14     	; 0x34d0 <__udivmodhi4_ep>

000034c2 <__udivmodhi4_loop>:
    34c2:	aa 1f       	adc	r26, r26
    34c4:	bb 1f       	adc	r27, r27
    34c6:	a6 17       	cp	r26, r22
    34c8:	b7 07       	cpc	r27, r23
    34ca:	10 f0       	brcs	.+4      	; 0x34d0 <__udivmodhi4_ep>
    34cc:	a6 1b       	sub	r26, r22
    34ce:	b7 0b       	sbc	r27, r23

000034d0 <__udivmodhi4_ep>:
    34d0:	88 1f       	adc	r24, r24
    34d2:	99 1f       	adc	r25, r25
    34d4:	5a 95       	dec	r21
    34d6:	a9 f7       	brne	.-22     	; 0x34c2 <__udivmodhi4_loop>
    34d8:	80 95       	com	r24
    34da:	90 95       	com	r25
    34dc:	bc 01       	movw	r22, r24
    34de:	cd 01       	movw	r24, r26
    34e0:	08 95       	ret

000034e2 <__prologue_saves__>:
    34e2:	2f 92       	push	r2
    34e4:	3f 92       	push	r3
    34e6:	4f 92       	push	r4
    34e8:	5f 92       	push	r5
    34ea:	6f 92       	push	r6
    34ec:	7f 92       	push	r7
    34ee:	8f 92       	push	r8
    34f0:	9f 92       	push	r9
    34f2:	af 92       	push	r10
    34f4:	bf 92       	push	r11
    34f6:	cf 92       	push	r12
    34f8:	df 92       	push	r13
    34fa:	ef 92       	push	r14
    34fc:	ff 92       	push	r15
    34fe:	0f 93       	push	r16
    3500:	1f 93       	push	r17
    3502:	cf 93       	push	r28
    3504:	df 93       	push	r29
    3506:	cd b7       	in	r28, 0x3d	; 61
    3508:	de b7       	in	r29, 0x3e	; 62
    350a:	ca 1b       	sub	r28, r26
    350c:	db 0b       	sbc	r29, r27
    350e:	0f b6       	in	r0, 0x3f	; 63
    3510:	f8 94       	cli
    3512:	de bf       	out	0x3e, r29	; 62
    3514:	0f be       	out	0x3f, r0	; 63
    3516:	cd bf       	out	0x3d, r28	; 61
    3518:	09 94       	ijmp

0000351a <__epilogue_restores__>:
    351a:	2a 88       	ldd	r2, Y+18	; 0x12
    351c:	39 88       	ldd	r3, Y+17	; 0x11
    351e:	48 88       	ldd	r4, Y+16	; 0x10
    3520:	5f 84       	ldd	r5, Y+15	; 0x0f
    3522:	6e 84       	ldd	r6, Y+14	; 0x0e
    3524:	7d 84       	ldd	r7, Y+13	; 0x0d
    3526:	8c 84       	ldd	r8, Y+12	; 0x0c
    3528:	9b 84       	ldd	r9, Y+11	; 0x0b
    352a:	aa 84       	ldd	r10, Y+10	; 0x0a
    352c:	b9 84       	ldd	r11, Y+9	; 0x09
    352e:	c8 84       	ldd	r12, Y+8	; 0x08
    3530:	df 80       	ldd	r13, Y+7	; 0x07
    3532:	ee 80       	ldd	r14, Y+6	; 0x06
    3534:	fd 80       	ldd	r15, Y+5	; 0x05
    3536:	0c 81       	ldd	r16, Y+4	; 0x04
    3538:	1b 81       	ldd	r17, Y+3	; 0x03
    353a:	aa 81       	ldd	r26, Y+2	; 0x02
    353c:	b9 81       	ldd	r27, Y+1	; 0x01
    353e:	ce 0f       	add	r28, r30
    3540:	d1 1d       	adc	r29, r1
    3542:	0f b6       	in	r0, 0x3f	; 63
    3544:	f8 94       	cli
    3546:	de bf       	out	0x3e, r29	; 62
    3548:	0f be       	out	0x3f, r0	; 63
    354a:	cd bf       	out	0x3d, r28	; 61
    354c:	ed 01       	movw	r28, r26
    354e:	08 95       	ret

00003550 <itoa>:
    3550:	fb 01       	movw	r30, r22
    3552:	9f 01       	movw	r18, r30
    3554:	e8 94       	clt
    3556:	42 30       	cpi	r20, 0x02	; 2
    3558:	c4 f0       	brlt	.+48     	; 0x358a <itoa+0x3a>
    355a:	45 32       	cpi	r20, 0x25	; 37
    355c:	b4 f4       	brge	.+44     	; 0x358a <itoa+0x3a>
    355e:	4a 30       	cpi	r20, 0x0A	; 10
    3560:	29 f4       	brne	.+10     	; 0x356c <itoa+0x1c>
    3562:	97 fb       	bst	r25, 7
    3564:	1e f4       	brtc	.+6      	; 0x356c <itoa+0x1c>
    3566:	90 95       	com	r25
    3568:	81 95       	neg	r24
    356a:	9f 4f       	sbci	r25, 0xFF	; 255
    356c:	64 2f       	mov	r22, r20
    356e:	77 27       	eor	r23, r23
    3570:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <__udivmodhi4>
    3574:	80 5d       	subi	r24, 0xD0	; 208
    3576:	8a 33       	cpi	r24, 0x3A	; 58
    3578:	0c f0       	brlt	.+2      	; 0x357c <itoa+0x2c>
    357a:	89 5d       	subi	r24, 0xD9	; 217
    357c:	81 93       	st	Z+, r24
    357e:	cb 01       	movw	r24, r22
    3580:	00 97       	sbiw	r24, 0x00	; 0
    3582:	a1 f7       	brne	.-24     	; 0x356c <itoa+0x1c>
    3584:	16 f4       	brtc	.+4      	; 0x358a <itoa+0x3a>
    3586:	5d e2       	ldi	r21, 0x2D	; 45
    3588:	51 93       	st	Z+, r21
    358a:	10 82       	st	Z, r1
    358c:	c9 01       	movw	r24, r18
    358e:	0c 94 c9 1a 	jmp	0x3592	; 0x3592 <strrev>

00003592 <strrev>:
    3592:	dc 01       	movw	r26, r24
    3594:	fc 01       	movw	r30, r24
    3596:	67 2f       	mov	r22, r23
    3598:	71 91       	ld	r23, Z+
    359a:	77 23       	and	r23, r23
    359c:	e1 f7       	brne	.-8      	; 0x3596 <strrev+0x4>
    359e:	32 97       	sbiw	r30, 0x02	; 2
    35a0:	04 c0       	rjmp	.+8      	; 0x35aa <strrev+0x18>
    35a2:	7c 91       	ld	r23, X
    35a4:	6d 93       	st	X+, r22
    35a6:	70 83       	st	Z, r23
    35a8:	62 91       	ld	r22, -Z
    35aa:	ae 17       	cp	r26, r30
    35ac:	bf 07       	cpc	r27, r31
    35ae:	c8 f3       	brcs	.-14     	; 0x35a2 <strrev+0x10>
    35b0:	08 95       	ret

000035b2 <_exit>:
    35b2:	f8 94       	cli

000035b4 <__stop_program>:
    35b4:	ff cf       	rjmp	.-2      	; 0x35b4 <__stop_program>
